<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.2.4.18. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="KSA QA1 Environment (SA QA1 ) " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
          <stringProp name="maximumValue">10000</stringProp>
          <stringProp name="minimumValue">00001</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">RANDOMNO</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/VMPT_User/Documents/Invicara_Jmeter/KSA Environment SA QA1/T001_MODELIMPORT_ADMINPORTAL.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">P_FileID,P_EMAILID,P_PASSWORD,C_orchestratorId,C_NAMESPACESID,C_DWFILEID,C_DWFILEVERSIONID,</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="QA3_URL" elementType="Argument">
              <stringProp name="Argument.name">QA3_URL</stringProp>
              <stringProp name="Argument.value">qa1-app.in.invicara.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">qa3-app.invicara.com</stringProp>
            </elementProp>
            <elementProp name="P_ORCHTHINKTIME" elementType="Argument">
              <stringProp name="Argument.name">P_ORCHTHINKTIME</stringProp>
              <stringProp name="Argument.value">30000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T001_THINKTIME" elementType="Argument">
              <stringProp name="Argument.name">T001_THINKTIME</stringProp>
              <stringProp name="Argument.value">5000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="P_DAYMONTH" elementType="Argument">
              <stringProp name="Argument.name">P_DAYMONTH</stringProp>
              <stringProp name="Argument.value">1304A</stringProp>
              <stringProp name="Argument.desc">DATE AND MONTH </stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="QA3_URL_API" elementType="Argument">
              <stringProp name="Argument.name">QA3_URL_API</stringProp>
              <stringProp name="Argument.value">qa1-api.sa.invicara.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">qa3-api.invicara.com</stringProp>
            </elementProp>
            <elementProp name="P_PROJECTNAME" elementType="Argument">
              <stringProp name="Argument.name">P_PROJECTNAME</stringProp>
              <stringProp name="Argument.value">PTLTTEST24041105</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="QA3_URL_ID" elementType="Argument">
              <stringProp name="Argument.name">QA3_URL_ID</stringProp>
              <stringProp name="Argument.value">qa1-id.sa.invicara.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="QA3_APP-URL" elementType="Argument">
              <stringProp name="Argument.name">QA3_APP-URL</stringProp>
              <stringProp name="Argument.value">qa1-app.sa.invicara.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_LAUNCHURL" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/admin/T001_MODELOMPORT_LAUNCHURL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_APP-URL}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/admin/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">none</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/v1/oauth/authorize/T001_MODELOMPORT_LAUNCHURL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">implicit-client</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">read%20write</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://${QA3_APP-URL}/admin/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/oauth/authorize/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_APP-URL}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/T001_MODELOMPORT_LAUNCHURL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">implicit-client</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">read%20write</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://${QA3_APP-URL}/admin/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_APP-URL}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_CSRFTOKEN" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_CSRFTOKEN</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_csrf&quot; content=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_CSRFTOKEN</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_EMAILACTION" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/emailExists/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;_csrf&quot;:&quot;${C_CSRFTOKEN}&quot;,&quot;username&quot;:&quot;${P_EMAILID}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/emailExists</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/passportsvc/api/?client_id=implicit-client&amp;response_type=token&amp;scope=read%20write&amp;redirect_uri=https://${QA3_APP-URL}/admin/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                  <elementProp name="newrelic" elementType="Header">
                    <stringProp name="Header.name">newrelic</stringProp>
                    <stringProp name="Header.value">eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjMyMTI4ODYiLCJhcCI6IjUzNTg4ODYwNiIsImlkIjoiMTNhY2MxMjFjMTdhOWJiOCIsInRyIjoiNmEzNmQ4NjBhYmUwNGM4MGVjNWIzNjM4Y2QzNjVhNjAiLCJ0aSI6MTY3NDU0NTk1NDk1OX19</stringProp>
                  </elementProp>
                  <elementProp name="X-NewRelic-ID" elementType="Header">
                    <stringProp name="Header.name">X-NewRelic-ID</stringProp>
                    <stringProp name="Header.value">VwQGU15bDhAFVVlRDggBVVY=</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="tracestate" elementType="Header">
                    <stringProp name="Header.name">tracestate</stringProp>
                    <stringProp name="Header.value">3212886@nr=0-1-3212886-535888606-13acc121c17a9bb8----1674545954959</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="traceparent" elementType="Header">
                    <stringProp name="Header.name">traceparent</stringProp>
                    <stringProp name="Header.value">00-6a36d860abe04c80ec5b3638cd365a60-13acc121c17a9bb8-01</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="X-CSRF-TOKEN" elementType="Header">
                    <stringProp name="Header.name">X-CSRF-TOKEN</stringProp>
                    <stringProp name="Header.value">${C_CSRFTOKEN}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="_csrf" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_csrf</stringProp>
                    <stringProp name="Argument.value">${C_CSRFTOKEN}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                    <stringProp name="Argument.value">${P_EMAILID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/passportsvc/api/?client_id=implicit-client&amp;response_type=token&amp;scope=read%20write&amp;redirect_uri=https://${QA3_APP-URL}/admin/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/v1/oauth/authorize/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">implicit-client</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">read%20write</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://${QA3_APP-URL}/admin/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/oauth/authorize/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/passportsvc/api/?client_id=implicit-client&amp;response_type=token&amp;scope=read%20write&amp;redirect_uri=https://${QA3_APP-URL}/admin/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/saml/discovery/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entityID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entityID</stringProp>
                    <stringProp name="Argument.value">https%3A%2F%2F${QA3_URL_API}%2Fpassportsvc%2Fapi%2Fsaml%2Fmetadata</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="returnIDParam" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">returnIDParam</stringProp>
                    <stringProp name="Argument.value">idp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/saml/discovery</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/passportsvc/api/?client_id=implicit-client&amp;response_type=token&amp;scope=read%20write&amp;redirect_uri=https://${QA3_APP-URL}/admin/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/saml/login/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="disco" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">disco</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="idp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">idp</stringProp>
                    <stringProp name="Argument.value">https%3A%2F%2F${QA3_URL_ID}%2Fauth%2Frealms%2Ftwinit.io</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/saml/login</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/passportsvc/api/?client_id=implicit-client&amp;response_type=token&amp;scope=read%20write&amp;redirect_uri=https://${QA3_APP-URL}/admin/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_SAMLREQUESTID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_SAMLREQUESTID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;SAMLRequest&quot; value=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_SAMLREQUESTID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/auth/realms/twinit.io/protocol/saml/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="SAMLRequest" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">SAMLRequest</stringProp>
                    <stringProp name="Argument.value">${C_SAMLREQUESTID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_ID}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/auth/realms/twinit.io/protocol/saml</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_TABID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">C_TABID</stringProp>
                <stringProp name="RegexExtractor.regex">tab_id=(.+?)\n</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_TABID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/auth/realms/twinit.io/login-actions/authenticate/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">https%3A%2F%2F${QA3_URL_API}%2Fpassportsvc%2Fapi%2Fsaml%2Fmetadata</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tab_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tab_id</stringProp>
                    <stringProp name="Argument.value">${C_TABID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_ID}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/realms/twinit.io/login-actions/authenticate</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_SESSIONCODEID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_SESSIONCODEID</stringProp>
                <stringProp name="RegexExtractor.regex">session_code=(.+?)&amp;amp</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not_C_SESSIONCODEID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_EXECUTIONCODEID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_EXECUTIONCODEID</stringProp>
                <stringProp name="RegexExtractor.regex">execution=(.+?)&amp;amp</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not_C_EXECUTIONCODEID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_LOGINACTION" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/auth/realms/twinit.io/login-actions/authenticate?session_code&amp;execution&amp;client_id_T006_USERSIGNUP_LOGIN" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                    <stringProp name="Argument.value">${P_EMAILID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                    <stringProp name="Argument.value">Performance@123</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="credentialId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">credentialId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_ID}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/auth/realms/twinit.io/login-actions/authenticate?session_code=${C_SESSIONCODEID}&amp;execution=${C_EXECUTIONCODEID}&amp;client_id=https%3A%2F%2F${QA3_URL_API}%2Fpassportsvc%2Fapi%2Fsaml%2Fmetadata&amp;tab_id=${C_TABID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">null</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_SAMLRESPONSEID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_SAMLRESPONSEID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;SAMLResponse&quot; value=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not_C_SAMLRESPONSEID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/saml/SSOT006_USERSIGNUP_LOGIN" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="SAMLResponse" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">SAMLResponse</stringProp>
                    <stringProp name="Argument.value">${C_SAMLRESPONSEID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/saml/SSO</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">null</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/v1/oauth/authorize/T006_USERSIGNUP_LOGIN" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">implicit-client</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">read%20write</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://${QA3_APP-URL}/admin/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/oauth/authorize/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_ACCESSTOKENID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">C_ACCESSTOKENID</stringProp>
                <stringProp name="RegexExtractor.regex">#access_token=(.+?)&amp;token_type</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not_C_ACCESSTOKENID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/admin/T006_USERSIGNUP_LOGIN" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">qa1-app.sa.invicara.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/admin/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">${P_EMAILID}</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/v1/users/me_T006_USERSIGNUP_LOGIN" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/users/me</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_APP-URL}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_APP-URL}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                    <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                    <stringProp name="Header.value">*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID}</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/v1/invites_T006_USERSIGNUP_LOGIN" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="_status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_status</stringProp>
                    <stringProp name="Argument.value">PENDING</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="includeAll" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">includeAll</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/invites</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_APP-URL}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_APP-URL}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                    <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                    <stringProp name="Header.value">*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID}</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_PROJECT CREATION" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/passportsvc/api/v1/apps?_pageSize_T001_PROJECT CREATION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/apps?_pageSize=100</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_APPID" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_APPID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_APPID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/passportsvc/api/v1/auth/token?appId_T001_PROJECT CREATION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/auth/token?appId=0f02c817-8655-423e-9d22-5439187078f9</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">0f02c817-8655-423e-9d22-5439187078f9</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_ACCESSTOKENID1" enabled="true">
                <stringProp name="TestPlan.comments">_namespaces&quot;:\[&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_ACCESSTOKENID1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_ACCESSTOKENID1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/passportsvc/api/v1/workspaces" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${P_PROJECTNAME}${RANDOMNO}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                  <elementProp name="userType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">project_workspace</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/workspaces</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">1200000</stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">/passportsvc/api/v1/workspaces?_name=demouser0601AA&amp;_userType=project_workspace</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_DWFILEID" enabled="false">
                <stringProp name="TestPlan.comments">_tipId&quot;:&quot;b79a071a-304c-4e28-985c-ed7deb593b11&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_DWFILEID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_fileId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_DWFILEID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_DWFILEVERSIONID" enabled="false">
                <stringProp name="TestPlan.comments">&quot;_orchrunid&quot;:&quot;f9fcae73-5672-457a-8bca-4f6a4cc36159&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_DWFILEVERSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_DWFILEVERSIONID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/passportsvc/api/v1/workspaces_T001_PROJECT CREATION" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;_name&quot;:&quot;${P_PROJECTNAME}${RANDOMNO}&quot;,&quot;_description&quot;:&quot;PTTEST${__time(,)}&quot;,&quot;_shortName&quot;:&quot;DEMO${__time(,)}&quot;,&quot;_userAttributes&quot;:{&quot;nextScriptEngine&quot;:true},&quot;_userType&quot;:&quot;project_workspace&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/workspaces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/passportsvc/api/?client_id=implicit-client&amp;response_type=token&amp;scope=read%20write&amp;redirect_uri=https://${QA3_URL}/admin/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-GB,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;101&quot;, &quot;Google Chrome&quot;;v=&quot;101&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_TASKSID" enabled="false">
                <stringProp name="TestPlan.comments">_namespaces&quot;:\[&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_TASKSID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_TASKSID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">FileWriter f = new FileWriter(&quot;InvicaraIPUT.csv&quot;,true);
BufferedWriter out = new BufferedWriter(f);
out.write(vars.get(&quot;CNAMESPACESID&quot;) + &quot;,&quot;+  &quot;\n&quot;);
out.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CNAMESPACESID" enabled="false">
                <stringProp name="TestPlan.comments">_namespaces&quot;:\[&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CNAMESPACESID</stringProp>
                <stringProp name="RegexExtractor.regex">_namespaces&quot;:\[&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_CNAMESPACESID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="CNAMESPACESID" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">CNAMESPACESID</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">_namespaces&quot;:[&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;]</stringProp>
                <stringProp name="BoundaryExtractor.default">NOTFOUND_CNAMESPACESID</stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </BoundaryExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_T001_PROJECT CREATION" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;_namespaces&quot;:[&quot;${CNAMESPACESID}&quot;],&quot;_name&quot;:&quot;Root Container&quot;,&quot;_shortName&quot;:&quot;Root Container&quot;,&quot;_userType&quot;:&quot;file_container&quot;,&quot;_description&quot;:&quot;Root Container&quot;,&quot;_version&quot;:{&quot;_userAttributes&quot;:{&quot;path&quot;:&quot;/&quot;}},&quot;_itemClass&quot;:&quot;NamedFileCollection&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">/itemsvc/api/v1/nameduseritems   C_NAMESPACESID</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_USERITEMDBID1" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_USERITEMDBID1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_userItemDbId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_USERITEMDBID1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_USERTIPID1" enabled="true">
                <stringProp name="TestPlan.comments">_createdById&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_USERTIPID1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_USERTIPID1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_CREATEDATID" enabled="true">
                <stringProp name="TestPlan.comments">_createdById&quot;:&quot;(.+?)&quot;  &quot;_createdAt&quot;:</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_CREATEDATID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_createdAt&quot;:(.+?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_CREATEDATID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_UPDATEBYID1" enabled="true">
                <stringProp name="TestPlan.comments">_createdById&quot;:&quot;(.+?)&quot;  &quot;_createdAt&quot;:  &quot;_updatedAt&quot;:</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_UPDATEBYID1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_updatedAt&quot;:(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_UPDATEBYID1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_LOAD PROJECT SETUP" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_T001_LOAD PROJECT SETUP" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
   {&#xd;
      &quot;_name&quot;:&quot;BIMPK Upload&quot;,&#xd;
      &quot;_shortName&quot;:&quot;iaf_ext_bimpk_upload&quot;,&#xd;
      &quot;_description&quot;:&quot;Load, Transform and Write Model from BIMPK&quot;,&#xd;
      &quot;_userType&quot;:&quot;iaf_ext_bimpk_upload&quot;,&#xd;
      &quot;_version&quot;:{&#xd;
         &quot;_userData&quot;:&quot;const groupBy = (objectArray, property) =&gt; {\n  return objectArray.reduce((acc, obj) =&gt; {\nlet key = obj[property];\nkey = key.replace(/[\\.]+/g, \&quot;\&quot;);\nif (!acc[key]) {\n  acc[key] = {};\n}\n// Add object to list for given key&apos;s value\nacc[key] = obj;\nreturn acc;\n  }, {});\n}\n\nconst _mapItemsAsRelated = (parentItems, relatedItems, fromField, relatedField) =&gt; {\n  let res = [];\n  for (let i = 0, l = parentItems.length; i &lt; l; i++) {\nlet relatedRecs = [];\n\nlet parentItem = parentItems[i];\nlet fromValues = [];\n\nif (!(parentItem[fromField]) &amp;&amp; fromField.indexOf(\&quot;.\&quot;) &gt; 1) {\n  fromValues = fromField.split(\&quot;.\&quot;).reduce((o, i) =&gt; o[i] || [], parentItem);\n} else {\n  fromValues = Array.isArray(parentItem[fromField]) ? parentItem[fromField] : [parentItem[fromField]];\n}\n\nif (fromValues &amp;&amp; fromValues.length &gt; 0)\n  relatedRecs = relatedItems.filter((r) =&gt; fromValues.includes(r[relatedField]));\n\nif (relatedRecs.length &gt; 0) {\n  res.push({\nparentItem: parentItems[i],\nrelatedItems: relatedRecs\n  });\n}\n  }\n  return res;\n}\n\nconst createBIMCollections = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Collections\&quot;}));\n\n  let packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\n  let packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\n  console.log(\&quot;Create BIM Collection\&quot;);\n  //create Elements Collection\n  const elementsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_elements\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_ba_elem\&quot;,\n\&quot;_description\&quot;: \&quot;Elements in BA model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_elements\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_coll = await IafScriptEngine.createCollection(elementsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Collection\&quot;}));\n\n  console.log(\&quot;model element collection\&quot;, model_els_coll)\n  let elemCollIndex = {\n\&quot;_id\&quot;: model_els_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  };\n  let elemIndex = await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  //create Element Properties Collection\n  const modelElemPropsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_elem_props\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_elprops\&quot;,\n\&quot;_description\&quot;: \&quot;Element Props in BA model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_element_props\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_props_coll = await IafScriptEngine.createCollection(modelElemPropsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Props Collection\&quot;}));\n\n  //create Type Elements Collection\n  const typeElemsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_type_el\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_type_el\&quot;,\n\&quot;_description\&quot;: \&quot;Type Elements in BA Check model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_type_elements\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_type_el_coll = await IafScriptEngine.createCollection(typeElemsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Type Element Collection\&quot;}));\n\n  console.log(\&quot;model type collection\&quot;, model_type_el_coll)\n\n  let typeElemCollIndex = {\n\&quot;_id\&quot;: model_type_el_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  }\n  let typeindex = await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  //create Geometry File Collection\n  const geometryFilesCol = {\n\&quot;_name\&quot;: packagename + \&quot;_geom_file\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_file\&quot;,\n\&quot;_description\&quot;: \&quot;File Collection for Geometry Files\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_geomresources\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_file_coll = await IafScriptEngine.createCollection(geometryFilesCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry File Collection\&quot;}));\n\n  //create Geometry View Collection\n  const geometryViewsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_geom_view\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_view\&quot;,\n\&quot;_description\&quot;: \&quot;Geometry Views in Model\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_geomviews\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_views_coll = await IafScriptEngine.createCollection(geometryViewsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry View Collection\&quot;}));\n\n  //create Model Data Cache Collection\n  const dataCacheCol = {\n\&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n\&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n\&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n}\nconst data_cache_coll = await IafScriptEngine.createCollection(dataCacheCol, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n\nlet bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\nlet bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\nconsole.log(\&quot;fileid: \&quot; + bimpkFileId + \&quot;, bimpkFileVersionid: \&quot; + bimpkFileVersionId);\n\n  //create Model Composite Item\n  const modelCompItem = {\n\&quot;_name\&quot;: packagename,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_modelver\&quot;,\n\&quot;_description\&quot;: \&quot;BIM model version by transform\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;_version\&quot;: {\n\&quot;_userAttributes\&quot;: {\n\&quot;bimpk\&quot;: {\n  \&quot;fileId\&quot;: bimpkFileId,\n  \&quot;fileVersionId\&quot;: bimpkFileVersionId\n}\n}\n}\n  }\n  let model = await IafScriptEngine.createNamedCompositeItem(modelCompItem, ctx)\n  await IafScriptEngine.setVar(\&quot;bim_model\&quot;, model);\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Model Composite Item\&quot;}));\n  console.log(JSON.stringify(model, null, 3))\n\n  let _myCollections = {\n\&quot;model_els_coll\&quot;: model_els_coll,\n\&quot;model_els_props_coll\&quot;: model_els_props_coll,\n\&quot;model_type_el_coll\&quot;: model_type_el_coll,\n\&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n\&quot;model_geom_views_coll\&quot;: model_geom_views_coll,\n\&quot;data_cache_coll\&quot;: data_cache_coll\n\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createBIMCollectionVersion = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Found Previous Model Creating Versions\&quot;}));\n\n  let bimModel = await IafScriptEngine.getVar(\&quot;bim_model\&quot;)\n  const modelRelatedCollection = await IafScriptEngine.getCollectionsInComposite(bimModel._id,null, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version - bim_model\&quot;}));\n\n  console.log(\&quot;bimModel\&quot;, JSON.stringify(bimModel))\n\n  let bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\n  let bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\n  console.log(\&quot;bimpkFileId\&quot;, JSON.stringify(bimpkFileId))\n\n  console.log(\&quot;bimpkFileVersionId\&quot;, JSON.stringify(bimpkFileVersionId))\n\n  let newModelVer = {\&quot;namedUserItemId\&quot;:bimModel._id}\n\n  newModelVer._userAttributes = {\nbimpk: {\nfileId: bimpkFileId,\nfileVersionId: bimpkFileVersionId\n}\n  }\n\n  let version = await IafScriptEngine.createNamedUserItemVersion(newModelVer,ctx);\n  console.log(\&quot;Create BIM Collection Version bim_model version\&quot;);\n  console.log(JSON.stringify(version, null, 3))\n\n  console.log(\&quot;newModversionelVer\&quot;, JSON.stringify(version))\n\n  const model_els_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_elements&apos;);\n  const model_els_props_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_element_props&apos;);\n  const model_type_el_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_type_elements&apos;);\n  const model_geom_file_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomresources&apos;);\n  const model_geom_views_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomviews&apos;);\n\n  let data_cache_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;data_cache&apos;);\n  if (!data_cache_coll) {\nlet packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\nlet packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\nlet data_cache_coll_def = {\n\&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n\&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n\&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n}\ndata_cache_coll = await IafScriptEngine.createCollection(data_cache_coll_def, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n  }\n\n  // create the versions\n\n  const model_els_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_els_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_coll\&quot;}));\n\n  const model_els_props_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_els_props_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_props_coll\&quot;}));\n\n  const model_type_el_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_type_el_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_type_el_coll\&quot;}));\n\n  const data_cache_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: data_cache_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Data Cache Version data_cache\&quot;}));\n\n  const model_geom_file_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_geom_file_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_file_coll\&quot;}));\n\n  const model_geom_views_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_geom_views_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_views_coll\&quot;}));\n\n  let elemCollIndex = {\n\&quot;_id\&quot;: model_els_coll._userItemId,\nindexDefs: [\n{\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n},\n{\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n}\n]\n  };\n  await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  let typeElemCollIndex = {\n\&quot;_id\&quot;: model_type_el_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  }\n  await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  // set them in global variables\n  IafScriptEngine.setVar(\&quot;model_els_coll\&quot;, model_els_coll);\n  IafScriptEngine.setVar(\&quot;model_els_props_coll\&quot;, model_els_props_coll);\n  IafScriptEngine.setVar(\&quot;model_type_el_coll\&quot;, model_type_el_coll);\n  IafScriptEngine.setVar(\&quot;data_cache_coll\&quot;, data_cache_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_file_coll\&quot;, model_geom_file_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_views_coll\&quot;, model_geom_views_coll);\n\n  let _myCollections = {\n\&quot;model_els_coll\&quot;: model_els_coll,\n\&quot;model_els_props_coll\&quot;: model_els_props_coll,\n\&quot;model_type_el_coll\&quot;: model_type_el_coll,\n\&quot;data_cache_coll\&quot;: data_cache_coll,\n\&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n\&quot;model_geom_views_coll\&quot;: model_geom_views_coll\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createRelatedItemsAndRelationships = async (_colls, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Relations and Related Items\&quot;}));\n\n  await IafScriptEngine.addRelatedCollections({\n\&quot;namedCompositeItemId\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n\&quot;relatedCollections\&quot;: [\n_colls.model_els_coll._userItemId,\n_colls.model_els_props_coll._userItemId,\n_colls.model_type_el_coll._userItemId,\n_colls.data_cache_coll._userItemId,\n_colls.model_geom_file_coll._userItemId,\n_colls.model_geom_views_coll._userItemId\n  ]}, ctx);\n  console.log(\&quot;Create Related Collection\&quot;);\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_els\&quot;);\n\n  const type_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_type_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_type_els\&quot;);\n\n  await IafScriptEngine.createItemsAsRelatedBulk({\n\&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_userItemId\&quot;: _colls.model_els_props_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;properties\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection properties\&quot;);\n\n  const el_to_type_relations = await IafScriptEngine.createRelations({\n\&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;relations\&quot;: IafScriptEngine.getVar(\&quot;manage_el_to_type_relations\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection Relations\&quot;);\n\n  await IafScriptEngine.setVar(\&quot;outparams\&quot;, {\n\&quot;filecolid\&quot;: _colls.model_geom_file_coll._userItemId,\n\&quot;viewcolid\&quot;: _colls.model_geom_views_coll._userItemId,\n\&quot;compositeitemid\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n\&quot;myCollections\&quot;: _colls\n  });\n  return await IafScriptEngine.getVar(\&quot;outparams\&quot;);\n}\n\nconst extractBimpk = async (param, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  try {\n//\n\n// Extract data \nlet _objectsArray = {\n  \&quot;objects\&quot;: [],\n  \&quot;properties\&quot;: [],\n  \&quot;types\&quot;: []\n}\nparam.files.forEach((file) =&gt; {\n  file.occurences.forEach((occ) =&gt; {\nocc.objects.objects.forEach((obj) =&gt; {\n  let _myObj = {\n\&quot;package_id\&quot;: obj.id,\n\&quot;type_id\&quot;: obj.type,\n\&quot;relationships\&quot;: obj.relationships,\n\&quot;source_id\&quot;: obj.sourceId,\n\&quot;properties\&quot;: obj.properties,\n\&quot;source_filename\&quot;:file.name\n  }\n  _objectsArray.objects.push(_myObj);\n\n});\nocc.objects.properties.forEach((prop) =&gt; {\n  _objectsArray.properties.push(prop);\n})\n\nocc.objects.types.forEach((type) =&gt; {\n  let _type = {\n\&quot;id\&quot;: type.id,\n\&quot;name\&quot;: type.name,\n\&quot;source_id\&quot;: type.sourceId,\n\&quot;properties\&quot;: type.properties\n\n  }\n  _objectsArray.types.push(_type);\n});\n\n  });\n\n});\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Data Extraction is complete\&quot;}));\n// Data Extraction Completed\n//--------------------------------\n// load the typemap\nlet assetTypeMap = null\ntry {\n  assetTypeMap = await IafScriptEngine.getItems({\n  \&quot;collectionDesc\&quot;: {\n\&quot;_userType\&quot;: \&quot;iaf_dt_type_map_defs_coll\&quot;,\n\&quot;_namespaces\&quot;: IafScriptEngine.getVar(\&quot;namespaces\&quot;)\n  },\n  \&quot;options\&quot;: {\n\&quot;page\&quot;: {\n  \&quot;getAllItems\&quot;: true\n}\n  }\n}, ctx);\n} catch (err) {\n  console.log(&apos;{\&quot;level\&quot;: \&quot;info\&quot;, \&quot;message\&quot;: \&quot;Type Map collection does not exist\&quot;}&apos;)\n}\n\nfor (let type of _objectsArray.types) {\n  for (let prop of type.properties) {\nlet _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\nprop.dName = _myProp.dName;\nif (_myProp.hasOwnProperty(\&quot;Asset Category\&quot;)) {\n  prop.baType = _myProp[\&quot;Asset Category\&quot;]\n}\n\n  }\n  type._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n  \&quot;format\&quot;: \&quot;hex\&quot;\n});\n  type.properties = groupBy(type.properties, \&quot;dName\&quot;);\n  if (assetTypeMap &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Family\&quot;) &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Type\&quot;)) {\nlet _myRow = assetTypeMap.find(x =&gt; x[\&quot;Revit Family\&quot;] == type.properties[\&quot;Revit Family\&quot;].val &amp;&amp; x[\&quot;Revit Type\&quot;] == type.properties[\&quot;Revit Type\&quot;].val);\nif (_myRow) {\n  type.dtCategory = _myRow.dtCategory;\n  type.dtType = _myRow.dtType;\n}\n  };\n};\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Type Extraction is complete\&quot;}));\n// do the same for properties in the object\nfor (let obj of _objectsArray.objects) {\n  obj.properties.forEach((prop) =&gt; {\nlet _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\nprop.dName = _myProp.dName;\n\n  });\n\n  obj._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n  \&quot;format\&quot;: \&quot;hex\&quot;\n});\n  obj.properties = groupBy(obj.properties, \&quot;dName\&quot;);\n  let _myVal = _objectsArray.types.find(x =&gt; x.id == obj.type_id);\n  obj.dtCategory = _myVal.dtCategory;\n  obj.dtType = _myVal.dtType;\n  if (_myVal.hasOwnProperty(\&quot;baType\&quot;)) {\nobj.baType = _myVal.baType;\n  }\n\n};\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Property Extraction is complete\&quot;}));\nlet _myProperties =[];\n_objectsArray.objects.forEach((object) =&gt;{\n  let _myProp = {\n_id:object._id,\nproperties:object.properties\n  }\n  _myProperties.push(_myProp);\n\n});\nawait IafScriptEngine.setVar(\&quot;properties\&quot;, _myProperties);\n_objectsArray.objects.forEach(e =&gt; { delete e.properties });\nawait IafScriptEngine.setVar(\&quot;manage_els\&quot;, _objectsArray.objects);\nawait IafScriptEngine.setVar(\&quot;manage_type_els\&quot;, _objectsArray.types);\nawait IafScriptEngine.setVar(\&quot;manage_el_to_type_relations\&quot;,\n  _mapItemsAsRelated(IafScriptEngine.getVar(\&quot;manage_els\&quot;),\nIafScriptEngine.getVar(\&quot;manage_type_els\&quot;), \&quot;type_id\&quot;, \&quot;id\&quot;));\n  } catch (err) {\nconsole.log(err);\n  }\n}\n\nconst cacheSourceFileGraphicsIds = async(params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n  \n  const { model_els_coll, data_cache_coll } = params.inparams.myCollections\n\n  console.log(&apos;--&gt; cache elems: &apos; + model_els_coll._name)\n  console.log(&apos;--&gt; cache data: &apos; + data_cache_coll._name)\n\n  let sourcefiles = await IafScriptEngine.getDistinct({\ncollectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\nfield: &apos;source_filename&apos;,\noptions: { getCollInfo: true }\n  }, ctx)\n\n  let sourcefileNames = sourcefiles._list[0]._versions[0]._relatedItems.source_filename\n\n  let cacheDataItems = []\n  for (let i = 0; i &lt; sourcefileNames.length; i++) {\n\nlet packageIds = await IafScriptEngine.getDistinct({\ncollectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\nquery: {source_filename: sourcefileNames[i]},\nfield: &apos;package_id&apos;,\noptions: { getCollInfo: true }\n}, ctx)\n\ncacheDataItems.push({\ndataType: &apos;sourcefileToPkgIds&apos;,\ndata: {\nsource_filename: sourcefileNames[i],\npackage_id: packageIds._list[0]._versions[0]._relatedItems.package_id\n}\n})\n  }\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: data_cache_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: cacheDataItems\n  }, ctx);\n  console.log(\&quot;Create Cache Data: source filenames to package_ids\&quot;);\n\n}\n\n\nexport default {\n  async uploadBimpk(params, libraries, ctx) {\n\nconst { PlatformApi,  IafScriptEngine} = libraries;\n\nconst {IafItemSvc} = PlatformApi\n\nlet param = params.inparams;\n// set global variables first\nawait IafScriptEngine.setVar(\&quot;namespaces\&quot;, ctx._namespaces);\nawait IafScriptEngine.setVar(\&quot;package_name\&quot;, param.filename);\nawait IafScriptEngine.setVar(\&quot;package_name_short\&quot;, param.filename.substring(0, 11));\nawait IafScriptEngine.setVar(\&quot;bimpk_fileid\&quot;, param._fileId);\nawait IafScriptEngine.setVar(\&quot;bimpk_fileVersionId\&quot;, param._fileVersionId);\ndebugger;\n\nlet res = await IafItemSvc.getNamedUserItems({\&quot;query\&quot;:{\n\&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\&quot;_versions._userAttributes.bimpk.fileId\&quot;: param._fileId,\n\&quot;_itemClass\&quot;:\&quot;NamedCompositeItem\&quot;\n}},ctx,{});\n\n  let bim_model = res._list[0];\n\n  console.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\n\n  if (bim_model) {\nIafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollectionVersion(param, libraries, ctx);\n\n  } else {\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollections(param, libraries, ctx);\n\n  }\n\nconsole.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\nif (bim_model) {\nIafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollectionVersion(param, libraries, ctx);\n} else {\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollections(param, libraries, ctx);\n}\n\nreturn IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n  },\n  async createModelDataCache(params, libraries, ctx) {\n\nconst { PlatformApi,  IafScriptEngine} = libraries;\n\nawait cacheSourceFileGraphicsIds(params, libraries, ctx)\n\nreturn IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n  }\n}&quot;&#xd;
      },&#xd;
      &quot;_namespaces&quot;:[&#xd;
         &quot;${CNAMESPACESID}&quot;&#xd;
      ],&#xd;
      &quot;_itemClass&quot;:&quot;Script&quot;&#xd;
   }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">itemsvc/api/v1/nameduseritems?nsfilter=DEMOUSER0601_NQj1K6Fn</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_SETUP SCRIPT" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;_name&quot;:&quot;Project Setup&quot;,&quot;_shortName&quot;:&quot;iaf_ext_proj_setup&quot;,&quot;_description&quot;:&quot;Scripts to Setup a Project&quot;,&quot;_userType&quot;:&quot;iaf_ext_proj_setup&quot;,&quot;_namespaces&quot;:[&quot;${CNAMESPACESID}&quot;],&quot;_version&quot;:{&quot;_userData&quot;:&quot;let RunnableScripts = [\n\t{ name: \&quot;1. Setup Project User Groups\&quot;, script: \&quot;createUserGroups\&quot; },\n\t{ name: \&quot;2. Create User Configs for User Groups\&quot;, script: \&quot;userConfigsLoader\&quot; },\n\t{ name: \&quot;3. Load Project Scripts\&quot;, script: \&quot;scriptsLoader\&quot; },\n\t{ name: \&quot;4. Create or Recreate BIMPK Uploader Datasource\&quot;, script: \&quot;createOrRecreateBIMPKDatasource\&quot; },\n\t{ name: \&quot;5. Create or Recreate SGPK Uploader Datasource\&quot;, script: \&quot;createOrRecreateSGPKDatasource\&quot; },\n\t{ name: \&quot;6. Create or Recreate Elements Type Mapper Datasource\&quot;, script: \&quot;createOrRecreateRemapElementsTypeDatasource\&quot; },\n\t{ name: \&quot;7. Create or Recreate Type Map from XLSX File\&quot;, script: \&quot;typeMapLoader\&quot; },\n\t{ name: \&quot;8. Create or Recreate File Attributes\&quot;, script: \&quot;fileAttributeLoader\&quot; },\n\t{ name: \&quot;9. Create or Recreate File Item Index\&quot;, script: \&quot;createOrRecreateFileItemIndex\&quot; },\n\t{ name: \&quot;10a. Upload BIMPK File\&quot;, script: \&quot;uploadBIMPKFile\&quot;},\n\t{ name: \&quot;10b. Upload SGPK File\&quot;, script: \&quot;uploadSGPKFile\&quot; },\n\t{ name: \&quot;10c. Import Latest BIMPK Version\&quot;, script: \&quot;importBimpkFile\&quot; },\n\t{ name: \&quot;11. Import Assets\&quot;, script: \&quot;importModeledAssets\&quot; },\n\t{ name: \&quot;12. Create or Recreate Asset Index\&quot;, script: \&quot;createOrRecreateAssetIndex\&quot; },\n\t{ name: \&quot;13. Import Model Spaces\&quot;, script: \&quot;importModeledSpaces\&quot; },\n\t{ name: \&quot;14. Create or Recreate Spaces Index\&quot;, script: \&quot;createOrRecreateSpacesIndex\&quot; },\n\t{ name: \&quot;15. Import Extended Data\&quot;, script: \&quot;importExtendedData\&quot; },\n\t{ name: \&quot;16. Create or Recreate Collections collection\&quot;, script: \&quot;createOrRecreateCollectionsCollection\&quot; },\n\t{ name: \&quot;17. Add API Config\&quot;, script: \&quot;addApiGatewayConfig\&quot; },\n\t{ name: \&quot;18. Create Object Schemas\&quot;, script: \&quot;createObjectSchemas\&quot; },\n\t{ name: \&quot;19. Create Systems and System Elements collections\&quot;, script: \&quot;createSystemsAndElementsCollections\&quot; },\n\t{ name: \&quot;20. Create Pick List Collections\&quot;, script: \&quot;createPickListCollections\&quot; },\n\t{ name: \&quot;21. Load Project and Collections\&quot;, script: \&quot;loadProjectAndCollections\&quot; },\n\t{ name: \&quot;Upload Data Sheet\&quot;, script: \&quot;uploadDataSheet\&quot;},\n\t{ name: \&quot;Add Import Data Sheet Orchestrator\&quot;, script: \&quot;createOrRecreateExcelImportOrchestrator\&quot; },\n\t{ name: \&quot;Run Asset Import\&quot;, script: \&quot;runAssetImport\&quot;}\n  ]\n  \n  //Info for creating user groups\n  let userGroupDescriptors = [\n\t{\n\t  _name: &apos;Solutions Mgmt&apos;,\n\t  _shortName: &apos;sol_man&apos;,\n\t  _description: &apos;Solutions User Group&apos;,\n\t  permissions: {\n\t\t//accessAll is for easy creation of an admin with access to everything\n\t\taccessAll: true\n\t  }\n\t},\n\t{\n\t  _name: &apos;File Contributor&apos;,\n\t  _shortName: &apos;file_contrib&apos;,\n\t  _description: &apos;File Contributor User Group&apos;,\n\t  permissions: {\n\t\tworkspaces: [{ actions: [&apos;READ&apos;, &apos;EDIT&apos;] }],\n\t\tnamedUserItems: [{ actions: [&apos;READ&apos;, &apos;EDIT&apos;] }],\n\t\tfiles: [{ actions: [&apos;READ&apos;, &apos;EDIT&apos;] }]\n\t  }\n\t},\n\t{\n\t  _name: &apos;Viewer&apos;,\n\t  _shortName: &apos;file_reviewer&apos;,\n\t  _description: &apos;File Reviewer User Group&apos;,\n\t  permissions: {\n\t\tworkspaces: [{ actions: [&apos;READ&apos;] }],\n\t\tnamedUserItems: [{ actions: [&apos;READ&apos;] }],\n\t\tfiles: [{ actions: [&apos;READ&apos;] }]\n\t  }\n\t},\n  ]\n  \n  //Info for creating user configs\n  let userConfigDescriptors = [\n\t{\n\t  _name: \&quot;DBM Contributor\&quot;,\n\t  _shortName: \&quot;iaf_dbm_contrib_uc\&quot;,\n\t  _description: \&quot;DBM Contributor User Config\&quot;,\n\t  _userType: \&quot;ipa-dt\&quot;\n\t},\n\t{\n\t  _name: \&quot;DBM Viewer\&quot;,\n\t  _shortName: \&quot;iaf_dbm_review_uc\&quot;,\n\t  _description: \&quot;DBM Reviewer User Config\&quot;,\n\t  _userType: \&quot;ipa-dt\&quot;\n\t},\n\t{\n\t  _name: \&quot;DBM Solution Admin\&quot;,\n\t  _shortName: \&quot;iaf_dbm_solman_uc\&quot;,\n\t  _description: \&quot;DBM Solution Admin User Config\&quot;,\n\t  _userType: \&quot;ipa-dt\&quot;\n\t}\n  ]\n  \n  //Map between UserConfig and UserGroups\n  let userConfigToUserGroupMap =\n\t[\n\t  { userConfig: \&quot;iaf_dbm_contrib_uc\&quot;, userGroup: \&quot;file_contrib\&quot; },\n\t  { userConfig: \&quot;iaf_dbm_review_uc\&quot;, userGroup: \&quot;file_reviewer\&quot; },\n\t  { userConfig: \&quot;iaf_dbm_solman_uc\&quot;, userGroup: \&quot;sol_man\&quot; }\n\t]\n  \n  //Info for creating scripts\n  let scriptsDescriptors = [\n\t{\n\t  _name: \&quot;Load Project Collection Data\&quot;,\n\t  _shortName: \&quot;iaf_dt_proj_colls\&quot;,\n\t  _description: \&quot;Load All Project Collections\&quot;,\n\t  _userType: \&quot;iaf_dt_proj_colls\&quot;\n\t},\n\t{\n\t  _name: \&quot;Type Map Interactions\&quot;,\n\t  _shortName: \&quot;iaf_dt_types\&quot;,\n\t  _description: \&quot;Scripts for interacting with the type map\&quot;,\n\t  _userType: \&quot;iaf_dt_types\&quot;\n\t},\n\t{\n\t  _name: \&quot;BIMPK Upload\&quot;,\n\t  _shortName: \&quot;iaf_bimpk_upload\&quot;,\n\t  _description: \&quot;Load, Transform and Write Model from BIMPK\&quot;,\n\t  _userType: \&quot;iaf_bimpk_upload\&quot;\n\t},\n\t{\n\t  _name: \&quot;SGPK Upload\&quot;,\n\t  _shortName: \&quot;iaf_sgpk_upload\&quot;,\n\t  _description: \&quot;Load, Transform and Write Model from BIMPK\&quot;,\n\t  _userType: \&quot;iaf_sgpk_upload\&quot;\n\t},\n\t{\n\t  _name: \&quot;BIMPK Post Import - Copy Inverse Relations\&quot;,\n\t  _shortName: \&quot;iaf_bimpk_post_imp\&quot;,\n\t  _description: \&quot;BIMPK Post Import - Copy Inverse Relations from Prev Version\&quot;,\n\t  _userType: \&quot;iaf_bimpk_post_imp\&quot;\n\t},\n\t{\n\t  _name: \&quot;Re-mapping type elements\&quot;,\n\t  _shortName: \&quot;iaf_map_elms_type\&quot;,\n\t  _description: \&quot;Update model type elements, after BIMtypes updated\&quot;,\n\t  _userType: \&quot;iaf_map_elms_type\&quot;\n\t},\n\t{\n\t  _name: \&quot;Dashboard Scripts\&quot;,\n\t  _shortName: \&quot;iaf_dashboard\&quot;,\n\t  _description: \&quot;Scripts to provide data for dashboard development\&quot;,\n\t  _userType: \&quot;iaf_dashboard\&quot;\n\t},\n\t{\n\t  _name: \&quot;Files As Entities All Users\&quot;,\n\t  _shortName: \&quot;iaf_files_allusers\&quot;,\n\t  _description: \&quot;Files for Entity View\&quot;,\n\t  _userType: \&quot;iaf_files_allusers\&quot;\n\t},\n\t{\n\t  _name: \&quot;Entity Collection All Users Scripts\&quot;,\n\t  _shortName: \&quot;iaf_collect_allusers\&quot;,\n\t  _description: \&quot;Scripts to interact with collections\&quot;,\n\t  _userType: \&quot;iaf_collect_allusers\&quot;\n\t},\n\t{\n\t  _name: \&quot;Entity Asset All Users Logic\&quot;,\n\t  _shortName: \&quot;iaf_entass_allusers\&quot;,\n\t  _description: \&quot;Common Entity Asset Business Logic\&quot;,\n\t  _userType: \&quot;iaf_entass_allusers\&quot;\n\t},\n\t{\n\t  _name: \&quot;Entity Space All Users Logic\&quot;,\n\t  _shortName: \&quot;iaf_entspa_allusers\&quot;,\n\t  _description: \&quot;Common Entity Space Business Logic\&quot;,\n\t  _userType: \&quot;iaf_entspa_allusers\&quot;\n\t},\n\t{\n\t  _name: \&quot;Object Model API Scripts\&quot;,\n\t  _shortName: \&quot;iaf_obj_model_api\&quot;,\n\t  _description: \&quot;Object Model API Asset Script\&quot;,\n\t  _userType: \&quot;iaf_obj_model_api\&quot;\n\t},\n\t{\n\t  _name: \&quot;Asset Sync up Scripts\&quot;,\n\t  _shortName: \&quot;iaf_assets_j2\&quot;,\n\t  _description: \&quot;Sisense Asset Sync scripts\&quot;,\n\t  _userType: \&quot;iaf_assets_j2\&quot;,\n\t},\n\t{\n\t  _name: \&quot;J2 FIN5 SYNC scripts\&quot;,\n\t  _shortName: \&quot;iaf_create_J2Assets\&quot;,\n\t  _description: \&quot;Scripts to sync J2 data\&quot;,\n\t  _userType: \&quot;iaf_create_J2Assets\&quot;,\n\t},\n  \n\t{   _name: \&quot;Entity Relations Scripts\&quot;,\n\t\t_shortName: \&quot;iaf_relations_scripts\&quot;,\n\t\t_description: \&quot;Scripts to manage (CRUD) parent-child relations between entities\&quot;,\n\t\t_userType: \&quot;iaf_relations_scripts\&quot;\n\t},\n  \n\t{   _name: \&quot;Import Asset Scripts\&quot;,\n\t\t_shortName: \&quot;iaf_import_data_sheets\&quot;,\n\t\t_description: \&quot;Scripts to import assets/spaces on server side\&quot;,\n\t\t_userType: \&quot;iaf_import_data_sheets\&quot;\n\t},\n\n\t{   _name: \&quot;Validation Scripts\&quot;,\n\t\t_shortName: \&quot;iaf_validation\&quot;,\n\t\t_description: \&quot;Scripts to validate to model and platform data\&quot;,\n\t\t_userType: \&quot;iaf_validation\&quot;\n\t},\n\n\t{ _name: \&quot;BMS Equipment Entity scripts\&quot;,\n      _shortName: \&quot;iaf_bms_allusers\&quot;,\n      _description: \&quot;BMS data as entities\&quot;,\n      _userType: \&quot;iaf_bms_allusers\&quot;,\n    },\n\n\t{ _name: \&quot;Asset SYNC scripts\&quot;,\n      _shortName: \&quot;iaf_assets_postgres\&quot;,\n      _description: \&quot;Scripts to add assets in postgress\&quot;,\n      _userType: \&quot;iaf_assets_postgres\&quot;,\n    },\n\n\t{ _name: \&quot;Create BMS Equipments\&quot;,\n      _shortName: \&quot;iaf_bms_equipments\&quot;,\n      _description: \&quot;Scripts to create BMS equipment collections\&quot;,\n      _userType: \&quot;iaf_bms_equipments\&quot;,\n    },\n\n  ]\n  \n  let ProjSetup = {\n  \n\t//Exposes the runnable steps to script execution tools like the vscode extension\n\tgetRunnableScripts() {\n\t  return RunnableScripts\n\t},\n  \n\t//Create the use groups as described in the userGroupDescriptors\n\t//This can be run multiple times if new user groups are added to userGroupDescriptors\n\t//Duplicate user grousp will nto be created\n\t//However, you cannot edit existing usergroups by this script\n\tasync createUserGroups(input, libraries, ctx) {\n  \n\t  let { PlatformApi } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let res\n\t  try {\n\t\tres = await PlatformApi.IafProj.addUserGroups(proj, userGroupDescriptors, ctx);\n\t  } catch (e) {\n\t\tres = undefined;\n\t\tthrow e;\n\t  }\n  \n\t  return res\n\t},\n  \n\t//Create user configs as described in the userConfigDescriptors\n\t//Do not re-run this script it will create duplicate user configs\n\t//Instead update the user config using the vscode extension\n\tasync userConfigsLoader(input, libraries, ctx) {\n  \n\t  let { PlatformApi, UiUtils } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let configFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: true, accept: \&quot;.exp\&quot; })\n  \n\t  let configNames = _.map(configFiles, (f) =&gt; {\n\t\t//get the first part of the file name without extensions\n\t\treturn _.split(f.name, &apos;.&apos;)[0]\n\t  })\n  \n\t  let userGroups = await PlatformApi.IafProj.getUserGroups(proj, ctx)\n  \n\t  //load content of the user configs\n\t  let configContents = await UiUtils.IafLocalFile.loadEXPFiles(configFiles)\n  \n\t  let configs = _.zip(configNames, configContents)\n  \n\t  let configDefs = _.map(configs, (c) =&gt; {\n\t\treturn { configName: c[0], configContent: c[1] }\n\t  })\n  \n\t  //create configItems\n\t  let configItems = []\n\t  configDefs.forEach((c) =&gt; {\n\t\tlet item = _.find(userConfigDescriptors, { _shortName: c.configName })\n\t\tif (item) {\n\t\t  item._version = { _userData: JSON.stringify(c.configContent, null, 2) }\n\t\t  configItems.push(item)\n\t\t}\n\t  })\n  \n\t  //Look up the UserGroup mapped to each UserConfig\n\t  let groupItems = []\n\t  configDefs.forEach((c) =&gt; {\n\t\tlet group = _.find(userConfigToUserGroupMap, { userConfig: c.configName })\n\t\tlet item = _.find(userGroups, { _shortName: group.userGroup })\n\t\tif (item) {\n\t\t  groupItems.push(item)\n\t\t}\n\t  })\n  \n\t  let configsAndGroups = _.zip(configItems, groupItems)\n  \n\t  let configsAndGroupDefs = _.map(configsAndGroups, (c) =&gt; {\n\t\treturn { userConfig: c[0], userGroup: c[1] }\n\t  })\n  \n\t  let results = []\n  \n\t  //Do not use forEach as it is not Promise aware!\n\t  for (let i = 0; i &lt; configsAndGroupDefs.length; i++) {\n\t\tlet result = await PlatformApi.IafUserGroup.addUserConfigs(configsAndGroupDefs[i].userGroup, [configsAndGroupDefs[i].userConfig], ctx);\n\t\tif (result &amp;&amp; result._list) {\n\t\t  result = result._list;\n\t\t}\n\t\tresults.push(result);\n\t  }\n  \n\t  return results\n\t},\n  \n\t//Create scripts in the project based on scriptsDescriptors\n\t//This version only handles js scripts\n\t//Do not re-run as it will create duplicate scripts\n\t//Instead update the scripts using the vscode extension\n\tasync scriptsLoader(input, libraries, ctx) {\n  \n\t  let { PlatformApi, UiUtils } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let scriptFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: true, accept: \&quot;.js\&quot; })\n  \n\t  let scriptNames = _.map(scriptFiles, (f) =&gt; {\n\t\treturn _.split(f.name, &apos;.&apos;)[0]\n\t  })\n  \n\t  let scriptContents = await UiUtils.IafLocalFile.loadFiles(scriptFiles)\n  \n\t  let scripts = _.zip(scriptNames, scriptContents)\n  \n\t  let scriptDefs = _.map(scripts, (s) =&gt; {\n\t\treturn { scriptName: s[0], scriptContent: s[1] }\n\t  })\n\t  console.log(scriptDefs)\n  \n\t  let scriptItems = []\n\t  scriptDefs.forEach((c) =&gt; {\n\t\tlet item = _.find(scriptsDescriptors, { _shortName: c.scriptName })\n\t\tif (item) {\n\t\t  item._version = { _userData: c.scriptContent };\n\t\t  item._namespaces = proj._namespaces\n\t\t  scriptItems.push(item)\n\t\t}\n\t  })\n  \n\t  let results = await PlatformApi.IafScripts.create(scriptItems, ctx);\n\t  if (results &amp;&amp; results._list) {\n\t\tresults = results._list;\n\t  }\n\t  return results\n\t},\n  \n\t//Creates or recreates the bimpk uploader datasource orchestrator to the project\n\t//If it is already added to the project it will be removed then readded\n\t//If you need to make changes to the datasource then  make the changes here\n\t//and run this script again\n\tasync createOrRecreateBIMPKDatasource(input, libraries, ctx) {\n  \n\t  let { PlatformApi } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  const query = {\n\t\t_namespaces: proj._namespaces,\n\t\t_userType: \&quot;bimpk_uploader\&quot;\n\t  };\n  \n\t  const datasources = await PlatformApi.IafScriptEngine.getDatasources(query, ctx);\n  \n\t  const filteredDatasources = _.filter(datasources, d =&gt; d._userType === \&quot;bimpk_uploader\&quot;\n\t\t&amp;&amp; d._name === \&quot;BIMPK Uploader\&quot;);\n  \n\t  _.each(filteredDatasources, async datasource =&gt; await PlatformApi.IafScriptEngine.removeDatasource({ orchId: datasource.id }, ctx));\n  \n\t  let datasourceResult = await PlatformApi.IafScriptEngine.addDatasource(\n\t\t{\n\t\t  _name: \&quot;BIMPK Uploader\&quot;,\n\t\t  _description: \&quot;Orchestrator to upload model from BIMPK file\&quot;,\n\t\t  _namespaces: proj._namespaces,\n\t\t  _userType: \&quot;bimpk_uploader\&quot;,\n\t\t  _params: {\n\t\t\ttasks: [\n\t\t\t  {\n\t\t\t\t_orchcomp: \&quot;default_script_target\&quot;,\n\t\t\t\t_name: \&quot;Copy space relationships from previous version\&quot;,\n\t\t\t\t_sequenceno: 7,\n\t\t\t\t\&quot;_actualparams\&quot;: {\n\t\t\t\t  \&quot;userType\&quot;: \&quot;iaf_bimpk_post_imp\&quot;,\n\t\t\t\t  \&quot;relatedUserType\&quot;: \&quot;iaf_ext_space_coll\&quot;,\n\t\t\t\t  \&quot;_scriptName\&quot;: \&quot;bimpkPostUpload\&quot;\n\t\t\t\t}\n\t\t\t  },\n\t\t\t  {\n\t\t\t\t_orchcomp: \&quot;default_script_target\&quot;,\n\t\t\t\t_name: \&quot;Copy assets relationships from previous version\&quot;,\n\t\t\t\t_sequenceno: 6,\n\t\t\t\t\&quot;_actualparams\&quot;: {\n\t\t\t\t  \&quot;userType\&quot;: \&quot;iaf_bimpk_post_imp\&quot;,\n\t\t\t\t  \&quot;relatedUserType\&quot;: \&quot;iaf_ext_asset_coll\&quot;,\n\t\t\t\t  \&quot;_scriptName\&quot;: \&quot;bimpkPostUpload\&quot;\n\t\t\t\t}\n\t\t\t  },\n\t\t\t  {\n\t\t\t\tname: \&quot;folder_cleaner_target\&quot;,\n\t\t\t\t_sequenceno: 5\n\t\t\t  },\n\t\t\t  {\n\t\t\t\tname: \&quot;scz_relations_target\&quot;,\n\t\t\t\t_sequenceno: 4\n\t\t\t  },\n\t\t\t  {\n\t\t\t\tname: \&quot;default_script_target\&quot;,\n\t\t\t\t\&quot;_actualparams\&quot;: {\n\t\t\t\t  \&quot;userType\&quot;: \&quot;iaf_bimpk_upload\&quot;,\n\t\t\t\t  // Possible values are ALL, SYSTEM_EQUIPMENTS, SPACIAL_STRUCTURE, SYSTEM_CONNECTIONS, ELECTRICAL_DEVICES, ELECTRICAL_CIRCUITS\n\t\t\t\t  //\&quot;sysRelationships\&quot;: [\&quot;ALL\&quot;],\n\t\t\t\t  \&quot;_scriptName\&quot;: \&quot;uploadBimpk\&quot;\n\t\t\t\t},\n\t\t\t\t_sequenceno: 3\n\t\t\t  },\n\t\t\t  {\n\t\t\t\tname: \&quot;bimpk_element_extractor\&quot;,\n\t\t\t\t_sequenceno: 2\n\t\t\t  },\n\t\t\t  {\n\t\t\t\tname: \&quot;bimpk_file_extractor\&quot;,\n\t\t\t\t_sequenceno: 1\n\t\t\t  }\n  \n\t\t\t]\n\t\t  }\n\t\t}, ctx\n\t  )\n\t  return datasourceResult;\n\t},\n  \n\t//Creates or recreates the sgpk uploader datasource orchestrator to the project\n\t//If it is already added to the project it will be removed then readded\n\t//If you need to make changes to the datasource then  make the changes here\n\t//and run this script again\n\tasync createOrRecreateSGPKDatasource(input, libraries, ctx) {\n  \n\t  let { PlatformApi } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  const query = {\n\t\t_namespaces: proj._namespaces,\n\t\t_userType: \&quot;sgpk_uploader\&quot;\n\t  };\n  \n\t  const datasources = await PlatformApi.IafScriptEngine.getDatasources(query, ctx);\n  \n\t  const filteredDatasources = _.filter(datasources, d =&gt; d._userType === \&quot;sgpk_uploader\&quot;\n\t\t&amp;&amp; d._name === \&quot;SGPK Uploader\&quot;);\n  \n\t  _.each(filteredDatasources, async datasource =&gt; await PlatformApi.IafScriptEngine.removeDatasource({ orchId: datasource.id }, ctx));\n  \n\t  let datasourceResult = await PlatformApi.IafScriptEngine.addDatasource(\n\t\t{\n\t\t  _name: \&quot;SGPK Uploader\&quot;,\n\t\t  _description: \&quot;Orchestrator to upload model from SGPK file\&quot;,\n\t\t  _namespaces: proj._namespaces,\n\t\t  _userType: \&quot;sgpk_uploader\&quot;,\n\t\t  _params: {\n\t\t\ttasks: [\n\t\t\t  {\n\t\t\t\tname: \&quot;scz_relations_target\&quot;,\n\t\t\t\t_sequenceno: 3\n\t\t\t  },\n\t\t\t  {\n\t\t\t\tname: \&quot;default_script_target\&quot;,\n\t\t\t\t\&quot;_actualparams\&quot;: {\n\t\t\t\t  \&quot;userType\&quot;: \&quot;iaf_sgpk_upload\&quot;,\n\t\t\t\t  \&quot;_scriptName\&quot;: \&quot;uploadSGPK\&quot;\n\t\t\t\t},\n\t\t\t\t_sequenceno: 2\n\t\t\t  },\n\t\t\t  {\n\t\t\t\tname: \&quot;generic_compressed_file_extractor\&quot;,\n\t\t\t\t_sequenceno: 1\n\t\t\t  }\n\t\t\t]\n\t\t  }\n\t\t}, ctx\n\t  )\n\t  return datasourceResult;\n\t},\n  \n\t//Creates or recreates the remap model and assets datasource orchestrator to the project\n\t//If it is already added to the project it will be removed then readded\n\t//If you need to make changes to the datasource then  make the changes here\n\t//and run this script again\n\tasync createOrRecreateRemapElementsTypeDatasource(input, libraries, ctx) {\n  \n\t  let { PlatformApi } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  const query = {\n\t\t_namespaces: proj._namespaces,\n\t\t_userType: \&quot;map_elements_type\&quot;\n\t  };\n  \n\t  const datasources = await PlatformApi.IafScriptEngine.getDatasources(query, ctx);\n  \n\t  const filteredDatasources = _.filter(datasources, d =&gt; d._userType === \&quot;map_elements_type\&quot;\n\t\t&amp;&amp; d._name === \&quot;Map Elements type\&quot;);\n  \n\t  _.each(filteredDatasources, async datasource =&gt; await PlatformApi.IafScriptEngine.removeDatasource({ orchId: datasource.id }, ctx));\n  \n\t  let datasourceResult = await PlatformApi.IafScriptEngine.addDatasource(\n\t\t{\n\t\t  _name: \&quot;Map Elements type\&quot;,\n\t\t  _description: \&quot;Orchestrator to map elements to dtCategory and dtType from type map coll\&quot;,\n\t\t  _namespaces: proj._namespaces,\n\t\t  _userType: \&quot;map_elements_type\&quot;,\n\t\t  _params: {\n\t\t\ttasks: [\n\t\t\t  {\n\t\t\t\t_orchcomp: \&quot;default_script_target\&quot;,\n\t\t\t\t_name: \&quot;Map type map to elements\&quot;,\n\t\t\t\t_sequenceno: 1,\n\t\t\t\t\&quot;_actualparams\&quot;: {\n\t\t\t\t  \&quot;userType\&quot;: \&quot;iaf_map_elms_type\&quot;,\n\t\t\t\t  \&quot;_scriptName\&quot;: \&quot;mapAssetCollection\&quot;\n\t\t\t\t}\n\t\t\t  }\n\t\t\t]\n\t\t  }\n\t\t}, ctx\n\t  )\n\t  return datasourceResult;\n\t},\n  \n\t//Creates or recreates the dtCategory/dtType def collection\n\tasync typeMapLoader(input, libraries, ctx) {\n  \n\t  let { PlatformApi, UiUtils } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let xlsxFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; })\n\t  let typeWorkbook = await UiUtils.IafDataPlugin.readXLSXFiles(xlsxFiles)\n\t  let wbJSON = UiUtils.IafDataPlugin.workbookToJSON(typeWorkbook[0])\n\t  let iaf_dt_grid_data = wbJSON.Sheet1\n\t  let iaf_dt_grid_as_objects = UiUtils.IafDataPlugin.parseGridData({ gridData: iaf_dt_grid_data })\n  \n\t  let atm_defs_coll = await PlatformApi.IafScriptEngine.createOrRecreateCollection(\n\t\t{\n\t\t  _name: &apos;ATM Def Collection&apos;,\n\t\t  _shortName: &apos;typemap_defs&apos;,\n\t\t  _namespaces: proj._namespaces,\n\t\t  _description: &apos;Asset Type Map Collection&apos;,\n\t\t  _userType: &apos;iaf_dt_type_map_defs_coll&apos;\n\t\t}, ctx)\n  \n\t  let atm_defs_items_res = await PlatformApi.IafScriptEngine.createItemsBulk({\n\t\t_userItemId: atm_defs_coll._userItemId,\n\t\t_namespaces: proj._namespaces,\n\t\titems: iaf_dt_grid_as_objects\n\t  }, ctx)\n  \n\t  return atm_defs_items_res\n\t},\n  \n\t//Creates or recreates the file attribute collection and populates it with items from an xlsx\n\t//You can run this multiple times to continue to update file attributes\n\tasync fileAttributeLoader(input, libraries, ctx) {\n  \n\t  let { PlatformApi, UiUtils } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let xlsxFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; })\n\t  let typeWorkbook = await UiUtils.IafDataPlugin.readXLSXFiles(xlsxFiles)\n\t  console.log(typeWorkbook)\n\t  let wbJSON = UiUtils.IafDataPlugin.workbookToJSON(typeWorkbook[0])\n\t  console.log(wbJSON)\n\t  let iaf_dt_grid_data = wbJSON[&apos;Document Attributes&apos;]\n\t  console.log(iaf_dt_grid_data)\n\t  let iaf_dt_grid_as_objects = UiUtils.IafDataPlugin.parseGridData(\n\t\t{ gridData: iaf_dt_grid_data, options: { asColumns: true } })\n  \n\t  let file_attrib_coll = await PlatformApi.IafScriptEngine.createOrRecreateCollection(\n\t\t{\n\t\t  _name: \&quot;FDM File Attrib Collection\&quot;,\n\t\t  _shortName: \&quot;rkfileattrib\&quot;,\n\t\t  _namespaces: proj._namespaces,\n\t\t  _description: \&quot;FDM File Attribute Collection\&quot;,\n\t\t  _userType: \&quot;iaf_cde_file_attrib_coll\&quot;\n\t\t}, ctx)\n  \n\t  let fileAttributes = [{\n\t\toriginator: iaf_dt_grid_as_objects[&apos;Originator&apos;],\n\t\tcontributor: iaf_dt_grid_as_objects[&apos;Contributor&apos;],\n\t\tbuilding: iaf_dt_grid_as_objects[&apos;Building&apos;],\n\t\tlevelsAndLocations: iaf_dt_grid_as_objects[&apos;Levels And Locations&apos;],\n\t\tdocumentType: iaf_dt_grid_as_objects[&apos;Document Type&apos;],\n\t\tfileDiscipline: iaf_dt_grid_as_objects[&apos;File Discipline&apos;],\n\t\tmanufacturer: iaf_dt_grid_as_objects[&apos;Manufacturer&apos;],\n\t\tfileType: iaf_dt_grid_as_objects[&apos;File Type&apos;],\n\t\trevision: iaf_dt_grid_as_objects[&apos;Revision&apos;],\n\t\tstageDescription: iaf_dt_grid_as_objects[&apos;Stage Description&apos;]\n\t  }]\n  \n\t  let file_attribs = await PlatformApi.IafScriptEngine.createItems({\n\t\t_userItemId: file_attrib_coll._userItemId,\n\t\t_namespaces: proj._namespaces,\n\t\titems: fileAttributes\n\t  }, ctx)\n  \n\t  return file_attribs\n  \n  \n\t},\n  \n\t//Creates or recreates the text search index for file containers\n\t//if more file containers are created, add them here\n\tasync createOrRecreateFileItemIndex(input, libraries, ctx) {\n  \n\t  let { PlatformApi } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let root_file_cont = await PlatformApi.IafScriptEngine.getFileCollection({\n\t\t_userType: \&quot;file_container\&quot;,\n\t\t_shortName: \&quot;Root Container\&quot;\n\t  }, ctx)\n  \n\t  let index = await PlatformApi.IafScriptEngine.createOrRecreateIndex({\n\t\t_id: root_file_cont._id,\n\t\tindexDefs: [\n\t\t  {\n\t\t\tkey: {\n\t\t\t  name: \&quot;text\&quot;,\n\t\t\t  \&quot;fileAttributes.documentType\&quot;: \&quot;text\&quot;,\n\t\t\t  \&quot;fileAttributes.originator\&quot;: \&quot;text\&quot;,\n\t\t\t  \&quot;fileAttributes.dtCategory\&quot;: \&quot;text\&quot;,\n\t\t\t  \&quot;fileAttributes.dtType\&quot;: \&quot;text\&quot;\n\t\t\t},\n\t\t\toptions: {\n\t\t\t  name: \&quot;text_search_index\&quot;,\n\t\t\t  default_language: \&quot;english\&quot;\n\t\t\t}\n\t\t  }\n\t\t]\n\t  }, ctx)\n  \n\t  return index\n\t},\n  \n\t//Uploads a BIMPKFile to the File Service in the project&apos;s root folder\n\t//TO DO: hopefully be able to give custom onProgress and onSuccess callbacks to uploadFile\n\tasync uploadBIMPKFile(input, libraries, ctx) {\n  \n\t  let { PlatformApi, UiUtils } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let selectFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.bimpk\&quot; })\n\t  if (!ctx._namespaces) {\n\t\tctx._namespaces = proj._namespaces\n\t  }\n  \n\t  let uploadedFile = await PlatformApi.IafScriptEngine.uploadFile(selectFiles[0], ctx)\n  \n\t},\n  \n\t//Uploads a SGPKFile to the File Service in the project&apos;s root folder\n\t//TO DO: hopefully be able to give custom onProgress and onSuccess callbacks to uploadFile\n\tasync uploadSGPKFile(input, libraries, ctx) {\n  \n\t  let { PlatformApi, UiUtils } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let selectFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.sgpk\&quot; })\n\t  if (!ctx._namespaces) {\n\t\tctx._namespaces = proj._namespaces\n\t  }\n  \n\t  let uploadedFile = await PlatformApi.IafScriptEngine.uploadFile(selectFiles[0], ctx)\n  \n\t},\n  \n\t//Uploads project data sheet to the File Service in the project&apos;s root folder\n\t//TO DO: hopefully be able to give custom onProgress and onSuccess callbacks to uploadFile\n\tasync uploadDataSheet(input, libraries, ctx) {\n  \n\t  let { PlatformApi, UiUtils } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let selectFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; })\n\t  if (!ctx._namespaces) {\n\t\tctx._namespaces = proj._namespaces\n\t  }\n  \n\t  let uploadedFile = await PlatformApi.IafScriptEngine.uploadFile(selectFiles[0], ctx)\n  \n\t},\n  \n\t//Imports the latest version of the first bimpk found in the project\n\t//Will not work if mroe than one bimpk (with different names) are in the project\\\n\t//Will error if that version has already been imported\n\tasync importBimpkFile(input, libraries, ctx) {\n  \n\t  let { PlatformApi } = libraries\n  \n\t  //get bimpks files from file svc\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx);\n\t  let bimpkCriteria = {\n\t\t_namespaces: proj._namespaces,\n\t\t_parents: &apos;root&apos;,\n\t\t_name: &apos;.*bimpk&apos;\n\t  }\n  \n\t  let getBimpks = await PlatformApi.IafFileSvc.getFiles(bimpkCriteria, ctx, { _pageSize: 100 });\n\t  let bimpk = getBimpks._list[0];\n  \n\t  console.log(`bimpk`, bimpk)\n  \n\t  let getVersions = await PlatformApi.IafFileSvc.getFileVersions(bimpk._id, ctx);\n\t  let version = _.find(getVersions._list, { _version: bimpk._tipVersion })\n\t  console.log(`version`, version)\n  \n\t  //get the bimpk import orchestrator\n\t  let bimpkOrch;\n\t  let datasources = await PlatformApi.IafDataSource.getOrchestrators(null, ctx);\n  \n\t  if (datasources) {\n\t\tbimpkOrch = _.find(datasources._list, { _userType: &apos;bimpk_uploader&apos; });\n\t  } else {\n\t\tbimpkOrch = null;\n\t  }\n  \n\t  console.log(`bimpkOrch`, bimpkOrch);\n  \n\t  //get the orchestrator step to pass parameters\n\t  let task = _.find(bimpkOrch.orchsteps, { _name: &apos;bimpk_file_extractor&apos; });\n\t  let seqTypeId = task._compid;\n  \n\t  //add params for the step\n\t  let req = {\n\t\torchestratorId: bimpkOrch.id,\n\t\t_actualparams: [\n\t\t  {\n\t\t\tsequence_type_id: seqTypeId,\n\t\t\tparams: {\n\t\t\t  _fileId: bimpk._id,\n\t\t\t  _fileVersionId: version._id\n\t\t\t}\n\t\t  }\n\t\t]\n\t  };\n\t  console.log(req)\n\t  //run orchestrator\n\t  let result = await PlatformApi.IafDataSource.runOrchestrator(bimpkOrch.id, req, ctx);\n  \n\t  let orchRunResult = await PlatformApi.IafDataSource.getOrchRunStatus(result.id);\n\t  console.log(`orchRunResult`, orchRunResult[0].orchrunsteps)\n  \n\t  let orchStepRunStatus = orchRunResult[0].orchrunsteps;\n  \n\t  //poll based on in run id until finished\n\t  let interval = setInterval(async () =&gt; {\n\t\tlet errStatus = _.filter(orchStepRunStatus, run_status =&gt; {\n\t\t  return run_status._status === \&quot;ERROR\&quot;;\n\t\t});\n\t\tlet queuedStatus = _.filter(orchStepRunStatus, run_status =&gt; {\n\t\t  return run_status._status === \&quot;QUEUED\&quot;;\n\t\t});\n\t\tlet runningStatus = _.filter(orchStepRunStatus, run_status =&gt; {\n\t\t  return run_status._status === \&quot;RUNNING\&quot;;\n\t\t});\n  \n\t\tconsole.log(`errStatus`, errStatus)\n\t\tconsole.log(`queuedStatus`, queuedStatus)\n\t\tconsole.log(`runningStatus`, runningStatus)\n  \n\t\tif (!_.isEmpty(errStatus) || (_.isEmpty(queuedStatus) &amp;&amp; _.isEmpty(runningStatus))) {\n  \n\t\t  if (_.isEmpty(errStatus)) {\n\t\t\torchStepRunStatus.forEach((step) =&gt; step.status = &apos;COMPLETED&apos;);\n\t\t  }\n  \n\t\t  //when import is complete kill the polling\n\t\t  clearInterval(interval);\n  \n\t\t  //reset the currently selected model to the one we just imported\n\t\t  //note: this is kept on the app itself - thus the setSelectedItems\n\t\t  //not on the local state of the page\n\t\t}\n\t\torchRunResult = await PlatformApi.IafDataSource.getOrchRunStatus(result.id);\n\t\torchStepRunStatus = orchRunResult[0].orchrunsteps;\n\t  }, 10000);\n  \n\t  console.log(`orchRunResult`, orchStepRunStatus)\n\t},\n  \n\t//Imports a spreadsheet of assets to create and relates assets to model elements (if model exists)\n\t//Can be rerun to delete and recreate asset collection and reimport assets\n\tasync importModeledAssets(input, libraries, ctx) {\n  \n\t  let { PlatformApi, UiUtils } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let xlsxFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; })\n  \n\t  let typeWorkbook = await UiUtils.IafDataPlugin.readXLSXFiles(xlsxFiles)\n\t  let wbJSON = UiUtils.IafDataPlugin.workbookToJSON(typeWorkbook[0])\n\t  let iaf_dt_grid_data = wbJSON.Assets\n\t  let iaf_dt_grid_as_objects = UiUtils.IafDataPlugin.parseGridData({ gridData: iaf_dt_grid_data })\n  \n\t  //filter out those rows with no Asset Name\n\t  let assetRows = _.filter(iaf_dt_grid_as_objects, (row) =&gt; _.size(row[&apos;Asset Name&apos;]) &gt; 0)\n  \n\t  let assetObjects = _.map(assetRows, (asset) =&gt; {\n\t\tlet aObj = {\n\t\t  \&quot;Asset Name\&quot;: asset[\&quot;Asset Name\&quot;],\n\t\t  properties: {\n\t\t\trevitGuid: { val: asset[\&quot;revitGuid\&quot;], dName: \&quot;revitGuid\&quot;, type: \&quot;text\&quot; },\n\t\t\tdtCategory: { val: asset[\&quot;dtCategory\&quot;], dName: \&quot;dtCategory\&quot;, type: \&quot;&lt;&lt;HIERARCHY&gt;&gt;\&quot; },\n\t\t\tdtType: { val: asset[\&quot;dtType\&quot;], dName: \&quot;dtType\&quot;, type: \&quot;&lt;&lt;HIERARCHY&gt;&gt;\&quot; },\n\t\t\t\&quot;Revit Family\&quot;: { val: asset[\&quot;Revit Family\&quot;], dName: \&quot;Revit Family\&quot;, type: \&quot;text\&quot; },\n\t\t\t\&quot;Revit Type\&quot;: { val: asset[\&quot;Revit Type\&quot;], dName: \&quot;Revit Type\&quot;, type: \&quot;text\&quot; },\n\t\t\t\&quot;BA Name\&quot;: { val: asset[\&quot;BA Name\&quot;], dName: \&quot;BA Name\&quot;, type: \&quot;text\&quot; },\n\t\t\t\&quot;Containing Floor\&quot;: { val: asset[\&quot;Containing Floor\&quot;], dName: \&quot;Containing Floor\&quot;, type: \&quot;text\&quot; },\n\t\t\t\&quot;Room Number\&quot;: { val: asset[\&quot;Room Number\&quot;], dName: \&quot;Room Number\&quot;, type: \&quot;text\&quot; },\n\t\t\tMark: { val: asset[\&quot;Mark\&quot;], dName: \&quot;Mark\&quot;, type: \&quot;text\&quot; },\n\t\t\tManufacturer: { val: asset[\&quot;Manufacturer\&quot;], dName: \&quot;Manufacturer\&quot;, type: \&quot;text\&quot; },\n\t\t\tModel: { val: asset[\&quot;Model\&quot;], dName: \&quot;Model\&quot;, type: \&quot;text\&quot; },\n\t\t\t\&quot;Matterport Url\&quot;: { val: asset[\&quot;Matterport Url\&quot;], dName: \&quot;Matterport Url\&quot;, type: \&quot;text\&quot; },\n\t\t\t\&quot;Image Url\&quot;: { val: asset[\&quot;Image Url\&quot;], dName: \&quot;Image Url\&quot;, type: \&quot;text\&quot; },\n\t\t\tDate: { val: asset[\&quot;Date\&quot;], dName: \&quot;Date\&quot;, type: \&quot;date\&quot; }\n\t\t  }\n\t\t}\n\t\treturn aObj\n\t  })\n  \n\t  console.log(assetObjects)\n  \n\t  let asset_coll = await PlatformApi.IafScriptEngine.createOrRecreateCollection({\n\t\t_name: &apos;Asset Collection&apos;,\n\t\t_shortName: &apos;asset_coll&apos;,\n\t\t_namespaces: proj._namespaces,\n\t\t_description: &apos;Physical Asset Collection&apos;,\n\t\t_userType: &apos;iaf_ext_asset_coll&apos;\n\t  }, ctx)\n  \n\t  console.log(asset_coll)\n  \n\t  let asset_items_res = await PlatformApi.IafScriptEngine.createItemsBulk(\n\t\t{\n\t\t  _userItemId: asset_coll._userItemId,\n\t\t  _namespaces: proj._namespaces,\n\t\t  items: assetObjects\n\t\t}, ctx\n\t  )\n  \n\t  let indexRes = await PlatformApi.IafScriptEngine.createOrRecreateIndex(\n\t\t{\n\t\t  _id: asset_coll._id,\n\t\t  indexDefs: [\n\t\t  {\n\t\t\tkey: {\n\t\t\t\&quot;Asset Name\&quot;: \&quot;text\&quot;,\n\t\t\t\&quot;properties.Mark.val\&quot;: \&quot;text\&quot;,\n\t\t\t\&quot;properties.Manufacturer.val\&quot;: \&quot;text\&quot;,\n\t\t\t\&quot;properties.Model.val\&quot;: \&quot;text\&quot;,\n\t\t\t\&quot;properties.dtCategory.val\&quot;: \&quot;text\&quot;,\n\t\t\t\&quot;properties.dtType.val\&quot;: \&quot;text\&quot;\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\&quot;name\&quot;: \&quot;text_search_index\&quot;,\n\t\t\t\&quot;default_language\&quot;: \&quot;english\&quot;\n\t\t\t}\n\t\t  }\n\t\t  ]\n\t\t}, ctx\n\t\t)\n\t\n\t\tconsole.log(indexRes)\n  \n\t  let iaf_ext_current_bim_models = await PlatformApi.IafScriptEngine.getCompositeCollection(\n\t\t{ query: { \&quot;_userType\&quot;: \&quot;bim_model_version\&quot;, \&quot;_namespaces\&quot;: { \&quot;$in\&quot;: proj._namespaces }, \&quot;_itemClass\&quot;: \&quot;NamedCompositeItem\&quot; } }, ctx, { getLatestVersion: true })\n  \n\t  console.log(iaf_ext_current_bim_models)\n  \n\t  if (!iaf_ext_current_bim_models) return \&quot;Created Assets. No Model Present\&quot;\n  \n\t  if (!Array.isArray(iaf_ext_current_bim_models)) iaf_ext_current_bim_models = [iaf_ext_current_bim_models]\n  \n\t  const iaf_ext_current_bim_model = _.last(_.sortBy(iaf_ext_current_bim_models, m =&gt; m._metadata._updatedAt))\n  \n\t  let model_els_coll = await PlatformApi.IafScriptEngine.getCollectionInComposite(\n\t\tiaf_ext_current_bim_model._userItemId, { _userType: \&quot;rvt_elements\&quot; }, ctx\n\t  )\n  \n\t  let asset_query = {\n\t\tquery: {},\n\t\t_userItemId: asset_coll._userItemId,\n\t\toptions: {\n\t\t  project: { \&quot;Asset Name\&quot;: 1, _id: 1 },\n\t\t  page: { getAllItems: true },\n\t\t  sort: { \&quot;_id\&quot;: 1 }\n\t\t}\n\t  }\n  \n\t  let all_assets = await PlatformApi.IafScriptEngine.getItems(\n\t\tasset_query, ctx\n\t  )\n  \n\t  //Find revitGuid and store in sourceIds array for each asset.\n\t  //Because revitGuid is under asset.property, it&apos;s probably easier to fill them from\n\t  //assetRows by finding matching \&quot;Asset Name\&quot;\n\t  let assetsWithSourceIds = _.map(all_assets, (asset) =&gt; {\n\t\tlet sourceIds = []\n\t\tlet row = _.find(assetRows, [\&quot;Asset Name\&quot;, asset[\&quot;Asset Name\&quot;]])\n\t\tif (row) {\n\t\t  sourceIds.push(row.revitGuid)\n\t\t}\n\t\tasset.sourceIds = sourceIds\n\t\treturn asset\n\t  })\n  \n\t  console.log(\&quot;assetsWithSourceIds\&quot;)\n\t  console.log(assetsWithSourceIds)\n  \n\t  let nfallSourceIds = _.map(assetsWithSourceIds, &apos;sourceIds&apos;)\n  \n\t  console.log(\&quot;nfallSourceIds\&quot;)\n\t  console.log(nfallSourceIds)\n  \n\t  let allSourceIds = _.flatten(nfallSourceIds)\n  \n\t  console.log(\&quot;allSourceIds\&quot;)\n\t  console.log(allSourceIds)\n  \n\t  let platformIdList = await PlatformApi.IafScriptEngine.findInCollectionsByPropValuesBulk(\n\t\t{\n\t\t  queryProp: { prop: \&quot;source_id\&quot;, values: allSourceIds },\n\t\t  collectionDesc: {\n\t\t\t_userType: model_els_coll._userType,\n\t\t\t_userItemId: model_els_coll._userItemId\n\t\t  },\n\t\t  options: {\n\t\t\tproject: { platformId: 1, source_id: 1 },\n\t\t\tpage: { getAllItems: true, getPageInfo: true },\n\t\t\tchunkSize: 50\n\t\t  }\n\t\t}, ctx\n\t  )\n  \n\t  console.log(\&quot;platformIdList\&quot;)\n\t  console.log(platformIdList)\n  \n\t  assetsWithSourceIds = assetsWithSourceIds.filter(a =&gt; a.sourceIds.length &gt; 0)\n  \n\t  let assetsWithPlatformIds = _.map(assetsWithSourceIds, (asset) =&gt; {\n\t\tlet platformIds = []\n\t\t//let ids = _.find(platformIdList._list, _.get([\&quot;source_id\&quot;, asset.sourceIds.length &gt; 0 ? asset.sourceIds[0], undefined]))\n\t\tlet ids = _.find(platformIdList._list, {source_id: asset.sourceIds[0]})\n\t\tplatformIds.push({ _id: ids ? ids._id : undefined })\n\t\tasset.platformIds = platformIds\n\t\treturn asset\n\t  })\n  \n\t  console.log(\&quot;assetsWithPlatformIds\&quot;)\n\t  console.log(assetsWithPlatformIds)\n  \n\t  //assetsWithPlatformIdArray is not needed as it produces the same array\n\t  //since platformIds is already an array\n  \n\t  let relatedItems = _.map(assetsWithPlatformIds, (related) =&gt; {\n\t\tlet obj = {\n\t\t  parentItem: { _id: related._id },\n\t\t  relatedItems: related.platformIds\n\t\t}\n\t\treturn obj\n\t  })\n  \n\t  console.log(\&quot;relatedItems\&quot;)\n\t  console.log(relatedItems)\n  \n\t  let result = await PlatformApi.IafScriptEngine.createRelations(\n\t\t{\n\t\t  parentUserItemId: asset_coll._userItemId,\n\t\t  _userItemId: model_els_coll._userItemId,\n\t\t  _namespaces: proj._namespaces,\n\t\t  relations: relatedItems\n\t\t}, ctx\n\t  )\n  \n\t  console.log(&apos;Import of Model Assets Complete&apos;)\n\t  console.log(result)\n  \n\t  return result\n\t},\n  \n\t//Creates or recreates the index on the asset collection\n\t//Can be rerun many times with changes ot the index\n\tasync createOrRecreateAssetIndex(input, libraries, ctx) {\n  \n\t  let { PlatformApi } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let asset_coll = await PlatformApi.IafScriptEngine.getCollection(\n\t\t{\n\t\t  _userType: \&quot;iaf_ext_asset_coll\&quot;,\n\t\t  _shortName: \&quot;asset_coll\&quot;,\n\t\t  _itemClass: \&quot;NamedUserCollection\&quot;,\n\t\t}, ctx\n\t  )\n  \n\t  let indexRes = await PlatformApi.IafScriptEngine.createOrRecreateIndex(\n\t\t{\n\t\t  _id: asset_coll._id,\n\t\t  indexDefs: [\n\t\t\t{\n\t\t\t  key: {\n\t\t\t\t\&quot;Asset Name\&quot;: \&quot;text\&quot;,\n\t\t\t\t\&quot;properties.Mark.val\&quot;: \&quot;text\&quot;,\n\t\t\t\t\&quot;properties.Manufacturer.val\&quot;: \&quot;text\&quot;,\n\t\t\t\t\&quot;properties.Model.val\&quot;: \&quot;text\&quot;,\n\t\t\t\t\&quot;properties.dtCategory.val\&quot;: \&quot;text\&quot;,\n\t\t\t\t\&quot;properties.dtType.val\&quot;: \&quot;text\&quot;\n\t\t\t  },\n\t\t\t  options: {\n\t\t\t\t\&quot;name\&quot;: \&quot;text_search_index\&quot;,\n\t\t\t\t\&quot;default_language\&quot;: \&quot;english\&quot;\n\t\t\t  }\n\t\t\t}\n\t\t  ]\n\t\t}, ctx\n\t  )\n\t  return indexRes\n\t},\n  \n\t//Imports a spreadsheet of spaces to create and relates spaces to model elements (if model exists)\n\t//Can be rerun to delete and recreate space collection and reimport spaces\n\tasync importModeledSpaces(input, libraries, ctx) {\n  \n\t\t  let { PlatformApi, UiUtils } = libraries\n\t  \n\t\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n\t  \n\t\t  let xlsxFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; })\n\t\t  let typeWorkbook = await UiUtils.IafDataPlugin.readXLSXFiles(xlsxFiles)\n\t\t  let wbJSON = UiUtils.IafDataPlugin.workbookToJSON(typeWorkbook[0])\n\t\t  let iaf_dt_grid_data = wbJSON.Spaces\n\t\t  let iaf_dt_grid_as_objects = UiUtils.IafDataPlugin.parseGridData({ gridData: iaf_dt_grid_data })\n\t  \n\t\t  //filter out those rows with no space Name\n\t\t  let spaceRows = _.filter(iaf_dt_grid_as_objects, (row) =&gt; _.size(row[&apos;space name&apos;]) &gt; 0)\n\t  \n\t\t  let spaceObjects = _.map(spaceRows, (space) =&gt; {\n\t\t\tconst spaceName = space[\&quot;space name\&quot;]\n\t\t\tlet spaceObj = {\n\t\t\t  \&quot;Space Name\&quot;: spaceName,\n\t\t\t  properties: {\n\t\t\t\trevitGuid: { val: space[\&quot;revitGuid\&quot;], dName: \&quot;revitGuid\&quot;, type: \&quot;text\&quot; },\n\t\t\t\tType: { val: space[\&quot;Type\&quot;], dName: \&quot;Type\&quot;, type: \&quot;text\&quot; },\n\t\t\t\tname: { val: space[\&quot;name\&quot;], dName: \&quot;name\&quot;, type: \&quot;text\&quot; },\n\t\t\t\tArea: { val: space[\&quot;area\&quot;], dName: \&quot;Area\&quot;, type: \&quot;number\&quot;, uom: _.get(_.find(iaf_dt_grid_as_objects, obj =&gt; obj[\&quot;space name\&quot;] == spaceName), \&quot;area_uom\&quot;) },\n\t\t\t\tNumber: { val: space[\&quot;number\&quot;], dName: \&quot;Number\&quot;, type: \&quot;text\&quot; },\n\t\t\t\tFloor: { val: space[\&quot;level\&quot;], dName: \&quot;Level\&quot;, type: \&quot;text\&quot; },\n\t\t\t\tPerimeter: { val: space[\&quot;perimeter\&quot;], dName: \&quot;Perimeter\&quot;, type: \&quot;number\&quot;, uom: _.get(_.find(iaf_dt_grid_as_objects, obj =&gt; obj[\&quot;space name\&quot;] == spaceName), \&quot;perimeter_uom\&quot;) }\n\t\t\t  }\n\t\t\t}\n\t\t\treturn spaceObj\n\t\t  })\n\t  \n\t\t  let space_coll = await PlatformApi.IafScriptEngine.createOrRecreateCollection({\n\t\t\t_name: &apos;Space Collection&apos;,\n\t\t\t_shortName: &apos;space_coll&apos;,\n\t\t\t_namespaces: proj._namespaces,\n\t\t\t_description: &apos;Physical Space Collection&apos;,\n\t\t\t_userType: &apos;iaf_ext_space_coll&apos;\n\t\t  }, ctx)\n  \n\t\t  console.log(&apos;Space Collection&apos;)\n\t\t  console.log(space_coll)\n\t  \n\t\t  let space_items_res = await PlatformApi.IafScriptEngine.createItemsBulk(\n\t\t\t{\n\t\t\t  _userItemId: space_coll._userItemId,\n\t\t\t  _namespaces: proj._namespaces,\n\t\t\t  items: spaceObjects\n\t\t\t}, ctx\n\t\t  )\n\t  \n\t\t  let iaf_ext_current_bim_models = await PlatformApi.IafScriptEngine.getCompositeCollection(\n\t\t\t{ query: { \&quot;_userType\&quot;: \&quot;bim_model_version\&quot;, \&quot;_namespaces\&quot;: { \&quot;$in\&quot;: proj._namespaces }, \&quot;_itemClass\&quot;: \&quot;NamedCompositeItem\&quot; } }, ctx, { getLatestVersion: true })\n\t  \n\t\t  if (!iaf_ext_current_bim_models) return \&quot;Spaces created. No Model Present\&quot;\n\t  \n\t\t  if (!Array.isArray(iaf_ext_current_bim_models)) iaf_ext_current_bim_models = [iaf_ext_current_bim_models]\n\t  \n\t\t  let iaf_ext_current_bim_model = _.last(_.sortBy(iaf_ext_current_bim_models, m =&gt; m._metadata._updatedAt))\n\t  \n\t\t  let model_els_coll = await PlatformApi.IafScriptEngine.getCollectionInComposite(\n\t\t\tiaf_ext_current_bim_model._userItemId, { _userType: \&quot;rvt_elements\&quot; },\n\t\t\tctx\n\t\t  )\n\t  \n\t\t  let space_query = {\n\t\t\tquery: {},\n\t\t\t_userItemId: space_coll._userItemId,\n\t\t\toptions: {\n\t\t\t  project: { \&quot;Space Name\&quot;: 1, _id: 1 },\n\t\t\t  page: { getAllItems: true },\n\t\t\t  sort: { \&quot;_id\&quot;: 1 }\n\t\t\t}\n\t\t  }\n\t  \n\t\t  let all_spaces = await PlatformApi.IafScriptEngine.getItems(\n\t\t\tspace_query, ctx\n\t\t  )\n\t  \n\t\t  console.log(\&quot;all_spaces\&quot;)\n\t\t  console.log(all_spaces)\n\t  \n\t\t  //Find revitGuid and store in sourceIds array for each space.\n\t\t  let spacesWithSourceIds = _.map(all_spaces, (space) =&gt; {\n\t\t\tlet sourceIds = []\n\t\t\tlet row = _.find(spaceRows, [\&quot;space name\&quot;, space[\&quot;Space Name\&quot;]])\n\t\t\tif (row) {\n\t\t\t  sourceIds.push(row.revitGuid)\n\t\t\t}\n\t\t\tspace.sourceIds = sourceIds\n\t\t\treturn space\n\t  \n\t\t  })\n\t  \n\t\t  console.log(\&quot;spacesWithSourceIds\&quot;)\n\t\t  console.log(spacesWithSourceIds)\n\t  \n\t\t  let nfallSourceIds = _.map(spacesWithSourceIds, &apos;sourceIds&apos;)\n\t  \n\t\t  console.log(\&quot;nfallSourceIds\&quot;)\n\t\t  console.log(nfallSourceIds)\n\t  \n\t\t  let allSourceIds = _.flatten(nfallSourceIds)\n\t  \n\t\t  console.log(\&quot;allSourceIds\&quot;)\n\t\t  console.log(allSourceIds)\n\t  \n\t\t  let platformIdList = await PlatformApi.IafScriptEngine.findInCollectionsByPropValuesBulk(\n\t\t\t  {\n\t\t\t\tqueryProp: {prop: \&quot;source_id\&quot;, values: allSourceIds},\n\t\t\t\tcollectionDesc: {_userType: model_els_coll._userType,\n\t\t\t\t  _userItemId: model_els_coll._userItemId},\n\t\t\t\toptions: {\n\t\t\t\t  project: {platformId: 1, source_id: 1},\n\t\t\t\t  page: {getAllItems: true, getPageInfo: true},\n\t\t\t\t  chunkSize: 50\n\t\t\t\t}\n\t\t\t  }, ctx\n\t\t  )\n\t  \n\t\t  console.log(\&quot;platformIdList\&quot;)\n\t\t  console.log(platformIdList)\n\t  \n\t\t  let spacesWithPlatformIds = _.map(spacesWithSourceIds, (space)=&gt; {\n\t\t\t  let platformIds = []\n\t\t\t  const spaceSourceId = _.get(space, \&quot;sourceIds.0\&quot;);\n\t\t\t  let platformIdData = _.find(platformIdList._list, {source_id: spaceSourceId})\n\t\t\t  platformIds.push({_id: platformIdData ? platformIdData._id : undefined})\n\t\t\t  space.platformIds = platformIds\n\t\t\t  return space\n\t\t\t})\n\t  \n\t\t  console.log(\&quot;spacesWithPlatformIds\&quot;)\n\t\t  console.log(spacesWithPlatformIds)\n\t  \n\t\t  let relatedItems = _.map(spacesWithPlatformIds, (related) =&gt; {\n\t\t\tlet obj = {\n\t\t\t  parentItem: { _id: related._id },\n\t\t\t  relatedItems: related.platformIds\n\t\t\t}\n\t\t\treturn obj\n\t\t  })\n\t  \n\t\t  let result = await PlatformApi.IafScriptEngine.createRelations(\n\t\t\t{\n\t\t\t  parentUserItemId: space_coll._userItemId,\n\t\t\t  _userItemId: model_els_coll._userItemId,\n\t\t\t  _namespaces: proj._namespaces,\n\t\t\t  relations: relatedItems\n\t\t\t}, ctx\n\t\t  )\n\t  \n\t\t  console.log(&apos;Import of Model Spaces Complete. result:&apos;)\n\t\t  console.log(result)\n\t  },\n  \n\t//Creates or recreates the index on the space collection\n\t//Can be rerun many times with changes to the index\n\tasync createOrRecreateSpacesIndex(input, libraries, ctx) {\n  \n\t  let { PlatformApi } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let space_coll = await PlatformApi.IafScriptEngine.getCollection(\n\t\t{\n\t\t  _userType: \&quot;iaf_ext_space_coll\&quot;,\n\t\t  _shortName: \&quot;space_coll\&quot;,\n\t\t  _itemClass: \&quot;NamedUserCollection\&quot;,\n\t\t}, ctx\n\t  )\n  \n\t  let indexRes = await PlatformApi.IafScriptEngine.createOrRecreateIndex(\n\t\t{\n\t\t  _id: space_coll._id,\n\t\t  indexDefs: [\n\t\t\t{\n\t\t\t  key: {\n\t\t\t\t\&quot;Space Name\&quot;: \&quot;text\&quot;\n\t\t\t  },\n\t\t\t  options: {\n\t\t\t\t\&quot;name\&quot;: \&quot;text_search_index\&quot;,\n\t\t\t\t\&quot;default_language\&quot;: \&quot;english\&quot;\n\t\t\t  }\n\t\t\t}\n\t\t  ]\n\t\t}, ctx\n\t  )\n\t  return indexRes\n\t},\n  \n\t//Imports extended data that will be matched to Assets by Type Mark, Mark, or Both\n\t//Can be rerun to wholesale replace a type of extended data\n\tasync importExtendedData(input, libraries, ctx) {\n  \n\t  let { PlatformApi, UiUtils } = libraries\n  \n\t  const proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  const xlsxFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; });\n\t  console.log(\&quot;xlsxFiles\&quot;, xlsxFiles);\n\t  const typeWorkbook = await UiUtils.IafDataPlugin.readXLSXFiles(xlsxFiles);\n\t  const wbJSON = UiUtils.IafDataPlugin.workbookToJSON(typeWorkbook[0]);\n  \n\t  const coll_data = _.get(wbJSON, \&quot;Collection Info\&quot;);\n\t  if (!coll_data) {\n\t\tconsole.log(\&quot;Collection Info Tab Missing\&quot;);\n\t  }\n  \n\t  const coll_data_objects = UiUtils.IafDataPlugin.parseGridData({ gridData: coll_data });\n\t  const collInfo = _.get(coll_data_objects, \&quot;0\&quot;);\n\t  console.log(\&quot;Collection Info\&quot;);\n\t  console.log(collInfo);\n  \n\t  const iaf_dt_grid_property_info_data = _.get(wbJSON, \&quot;Property Info\&quot;);\n\t  if (!iaf_dt_grid_property_info_data) {\n\t\tconsole.log(\&quot;Property Info Tab Missing\&quot;);\n\t  }\n\t  const iaf_dt_grid_property_info_data_objects = UiUtils.IafDataPlugin.parseGridData(\n\t\t{ gridData: iaf_dt_grid_property_info_data });\n\t  console.log(iaf_dt_grid_property_info_data_objects);\n  \n\t  const dataBySheet = _.map(_.groupBy(iaf_dt_grid_property_info_data_objects, dataObj =&gt; {\n\t\treturn dataObj[\&quot;sheet id\&quot;];\n\t  }), data =&gt; {\n\t\tlet res = { _id: _.get(data, \&quot;0.sheet id\&quot;), props: [] };\n\t\t_.forEach(data, v =&gt; {\n\t\t  let property = { prop: v.Property, type: v.Type };\n\t\t  if (v.uom) {\n\t\t\tproperty.uom = v.uom;\n\t\t  }\n\t\t  res.props.push(property);\n\t\t});\n\t\treturn res;\n\t  });\n\t  console.log(&apos;dataBySheet&apos;, dataBySheet);\n  \n\t  const dataWithWorkbookData = _.map(dataBySheet, sheetData =&gt; {\n\t\tconst wbJSONSheetDataById = _.get(wbJSON, sheetData._id);\n\t\tlet headers = _.take(wbJSONSheetDataById);\n\t\tsheetData.workbook = _.map(_.drop(wbJSONSheetDataById), d =&gt; {\n\t\t  return _.fromPairs(_.zip(headers[0], d));\n\t\t});\n\t\treturn sheetData;\n\t  });\n\t  console.log(&apos;dataWithWorkbookData&apos;, dataWithWorkbookData);\n  \n\t  const rowsWithPropData = _.map(dataWithWorkbookData, dataObj =&gt; {\n\t\treturn _.map(dataObj.workbook, d =&gt; {\n\t\t  return { _id: dataObj._id, props: dataObj.props, row: d };\n\t\t});\n\t  });\n\t  console.log(&apos;rowsWithPropData&apos;, rowsWithPropData);\n  \n\t  const rowsWithPropDataFlat = _.flatten(rowsWithPropData);\n\t  console.log(&apos;rowsWithPropDataFlat&apos;, rowsWithPropDataFlat);\n  \n\t  //Add the type of linking criteria to each row\n\t  //BOTH, TYPE for Type Mark, and MARK for Mark\n\t  //undefined if no conditions match\n\t  const withCriteria = _.map(rowsWithPropDataFlat, r =&gt; {\n\t\tconst row = r.row;\n\t\tconst mark = row.Mark;\n\t\tconst typeMark = row[\&quot;Type Mark\&quot;];\n\t\tconst criteria = mark &amp;&amp; typeMark ? \&quot;BOTH\&quot; : (mark ? \&quot;MARK\&quot; : (typeMark ? \&quot;TYPE\&quot; : undefined));\n\t\tr.criteria = criteria;\n\t\treturn r;\n\t  });\n\t  console.log(&apos;withCriteria&apos;, withCriteria);\n  \n\t  //FILTER OUT ANY ERRORS JUST IN CASE\n\t  const withCriteriaNoErrors = _.filter(withCriteria, wc =&gt; wc.criteria);\n\t  console.log(&apos;withCriteriaNoErrors - &apos;, withCriteriaNoErrors);\n  \n\t  const iaf_asset_collection = await PlatformApi.IafScriptEngine.getCollection(\n\t\t{\n\t\t  _userType: \&quot;iaf_ext_asset_coll\&quot;,\n\t\t  _shortName: \&quot;asset_coll\&quot;,\n\t\t  _itemClass: \&quot;NamedUserCollection\&quot;,\n\t\t}, ctx\n\t  );\n\t  console.log(&apos;iaf_asset_collection&apos;, iaf_asset_collection);\n  \n\t  const assetQueries = _.map(withCriteriaNoErrors, data =&gt; {\n\t\tconst query = {};\n\t\tconst criteria = data.criteria;\n\t\tif (criteria === \&quot;MARK\&quot; || criteria === \&quot;BOTH\&quot;) {\n\t\t  query[\&quot;properties.Mark.val\&quot;] = _.get(data, \&quot;row.Mark\&quot;);\n\t\t}\n\t\tif (criteria === \&quot;TYPE\&quot; || criteria === \&quot;BOTH\&quot;) {\n\t\t  query[\&quot;properties.Type Mark.val\&quot;] = _.get(data, \&quot;row.Type Mark\&quot;);\n\t\t}\n\t\treturn {\n\t\t  query,\n\t\t  collectionDesc: {\n\t\t\t_itemClass: \&quot;NamedUserCollection\&quot;,\n\t\t\t_userType: iaf_asset_collection._userType,\n\t\t\t_userItemId: iaf_asset_collection._userItemId\n\t\t  },\n\t\t  options: { page: { getAllItems: true } }\n\t\t};\n\t  });\n\t  console.log(&apos;assetQueries&apos;, assetQueries);\n  \n\t  const assets = await PlatformApi.IafScriptEngine.getItemsMulti(assetQueries, ctx);\n\t  console.log(&apos;assets&apos;, assets);\n  \n\t  //JUST REORGANIZE THINGS FOR EASIER USE\n\t  const rowsWithAssetsProcessed = _.map(withCriteriaNoErrors, (criObj, index) =&gt; {\n\t\tcriObj.rowAssets = assets[index];\n\t\treturn criObj;\n\t  });\n\t  console.log(&apos;rowsWithAssetsProcessed&apos;, rowsWithAssetsProcessed);\n  \n\t  //CREATE A NEW DATA OBJECT FOR EACH ASSET\n\t  const assetDataPairs = _.map(rowsWithAssetsProcessed, rec =&gt; {\n\t\trec.dataObjects = _.map(rec.rowAssets, ra =&gt; {\n\t\t  const data = {};\n\t\t  _.each(rec.props, prop =&gt; {\n\t\t\tconst dName = prop.prop;\n\t\t\tconst type = prop.type;\n\t\t\tconst val = _.get(rec, \&quot;row.\&quot; + dName);\n\t\t\tconst epoch = type === \&quot;date\&quot; ? UiUtils.IafDataPlugin.convertToEpoch(val) : undefined;\n\t\t\tdata[dName] = { dName, val, uom: prop.uom, type, epoch }\n\t\t  });\n\t\t  return { properties: data }\n\t\t});\n\t\treturn rec;\n\t  });\n\t  console.log(&apos;assetDataPairs&apos;, assetDataPairs);\n  \n\t  //GET THE FLAT LISTS OF THE DATA OBJECTS AND ASSETS\n\t  //IN THE SAME ORDER!\n\t  const flatAllAssets = _.flatten(_.map(assetDataPairs, adp =&gt; adp.rowAssets));\n\t  console.log(&apos;flatAllAssets&apos;, flatAllAssets);\n\t  const flatAllDataObjs = _.flatten(_.map(assetDataPairs, adp =&gt; adp.dataObjects));\n\t  console.log(&apos;flatAllDataObjs&apos;, flatAllDataObjs);\n  \n\t  //CREATE THE COLLECTION AND THE DATA OBJECTS\n\t  let data_obj_coll = await PlatformApi.IafScriptEngine.createOrRecreateCollection(\n\t\t{\n\t\t  _name: collInfo.Name,\n\t\t  _shortName: collInfo.ShortName,\n\t\t  _namespaces: proj._namespaces,\n\t\t  _description: collInfo.Description,\n\t\t  _userType: collInfo.userType\n\t\t}, ctx\n\t  );\n\t  console.log(&apos;data_obj_coll&apos;, data_obj_coll);\n  \n\t  let data_obj_res = await PlatformApi.IafScriptEngine.createItemsBulk({\n\t\t_userItemId: data_obj_coll._userItemId,\n\t\t_namespaces: proj._namespaces,\n\t\titems: flatAllDataObjs\n\t  }, ctx);\n\t  console.log(&apos;data_obj_res&apos;, data_obj_res);\n  \n\t  //CREATE ITEMS BULK DOESNT RETURN THE CREATED OBJECTS\n\t  //IT RETURNS URIS FOR THE OBJECTS\n\t  //SO GET ALL THOSE IN ONE LIST WHICH WE WILL USE\n\t  //TO GET THE NEW OBJECT IDS OFF THE END\n\t  const allURIs = _.flatten(_.map(data_obj_res[0], d =&gt; d._uris));\n\t  console.log(&apos;allURIs&apos;, allURIs);\n  \n\t  const dataObjIds = _.map(allURIs, u =&gt; _.last(_.split(u, &apos;/&apos;)));\n\t  console.log(&apos;dataObjIds&apos;, dataObjIds);\n  \n\t  //ZIP THE NEW DATA IDS WITH THE ASSETS\n\t  //THIS SHOULD BE IN THE CORRECT ORDER\n\t  const assetsWithDataIds = _.zip(flatAllAssets, dataObjIds);\n\t  console.log(&apos;assetsWithDataIds&apos;, assetsWithDataIds);\n  \n\t  //CREATE RELATIONS\n\t  const relatedItems = _.map(assetsWithDataIds, d =&gt; {\n\t\treturn {\n\t\t  parentItem: d[0],\n\t\t  relatedItems: [{ _id: d[1] }]\n\t\t}\n\t  });\n\t  console.log(&apos;relatedItems&apos;, relatedItems);\n  \n\t  const relations = await PlatformApi.IafScriptEngine.createRelations(\n\t\t{\n\t\t  parentUserItemId: iaf_asset_collection._userItemId,\n\t\t  _userItemId: data_obj_coll._userItemId,\n\t\t  _namespaces: proj._namespaces,\n\t\t  relations: relatedItems\n\t\t}, ctx\n\t  );\n\t  console.log(&apos;relations&apos;, relations);\n  \n\t  //GET AN ASSET WITH THE RELATED DATA AS A TEST\n\t  const testAsset = await PlatformApi.IafScriptEngine.findWithRelated(\n\t\t{\n\t\t  parent: {\n\t\t\tquery: { _id: flatAllAssets[0]._id },\n\t\t\tcollectionDesc: { _userItemId: iaf_asset_collection._userItemId },\n\t\t\toptions: { page: { getAllItems: true } }\n\t\t  },\n\t\t  related: [\n\t\t\t{\n\t\t\t  relatedDesc: { _relatedUserType: data_obj_coll._userType },\n\t\t\t  as: &apos;Related Data Object&apos;\n\t\t\t}\n\t\t  ]\n\t\t}, ctx\n\t  );\n  \n\t  return {\n\t\tfile: xlsxFiles[0].name + \&quot; file imported!\&quot;,\n\t\textendedDataCollection: data_obj_coll,\n\t\ttestAsset: testAsset._list[0]\n\t  };\n  \n  \n\t},\n  \n\t//Creates or recreates the collection collections and the simple index on it\n\t//Cen be rerun but will delete all existing collections\n\tasync createOrRecreateCollectionsCollection(inpout, libraries, ctx) {\n  \n\t  let { PlatformApi } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  let collections = await PlatformApi.IafScriptEngine.createOrRecreateCollection(\n\t\t{\n\t\t  _name: &apos;Collections Collection&apos;,\n\t\t  _shortName: &apos;Collections&apos;,\n\t\t  _namespaces: proj._namespaces,\n\t\t  _description: &apos;Collections of Entities&apos;,\n\t\t  _userType: &apos;iaf_ext_coll_coll&apos;\n\t\t}, ctx\n\t  )\n  \n\t  PlatformApi.IafScriptEngine.createOrRecreateIndex({\n\t\t_id: collections._id,\n\t\tindexDefs: [\n\t\t  {\n\t\t\tkey: {\n\t\t\t  \&quot;Collection Name\&quot;: \&quot;text\&quot;,\n\t\t\t  \&quot;properties.Type.val\&quot;: \&quot;text\&quot;\n\t\t\t},\n\t\t\toptions: {\n\t\t\t  name: \&quot;text_search_index\&quot;,\n\t\t\t  default_language: \&quot;english\&quot;\n\t\t\t}\n\t\t  }\n\t\t]\n\t  }, ctx)\n  \n\t  return collections\n\t},\n  \n\t//Adds an object model api config to the project\n\tasync addApiGatewayConfig(input, libraries, ctx) {\n  \n\t  let { PlatformApi, UiUtils } = libraries\n  \n\t  const proj = await PlatformApi.IafProj.getCurrent(ctx);\n  \n\t  const configFile = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.json\&quot; });\n\t  const configFileData = await UiUtils.IafLocalFile.loadFiles(configFile);\n\t  const configData = [JSON.parse(configFileData[0])];\n  \n\t  const configFileItem = await PlatformApi.IafItemSvc.createNamedUserItems([{\n\t\t_name: \&quot;API config\&quot;,\n\t\t_shortName: \&quot;api_config\&quot;,\n\t\t_description: \&quot;API configuration with the REST API endpoints\&quot;,\n\t\t_namespaces: proj._namespaces,\n\t\t_userType: \&quot;api_config\&quot;,\n\t\t_version: { _userData: JSON.stringify(configData) }\n\t  }], \&quot;UserConfig\&quot;, ctx);\n  \n\t  const configFileItemId = configFileItem &amp;&amp; configFileItem._list &amp;&amp; configFileItem._list[0] &amp;&amp; configFileItem._list[0]._id\n\t\t? configFileItem._list[0]._id : undefined;\n  \n\t  if (configFileItemId) {\n\t\tconst addApiConfigResponse = await PlatformApi.IafObjectModelAPISvc.addApiConfig(configFileItemId, ctx);\n\t\treturn addApiConfigResponse;\n\t  } else {\n\t\treturn \&quot;Failed to add apiConfig\&quot;;\n\t  }\n\t},\n  \n\tasync createObjectSchemas(input, libraries, ctx) {\n\t  let { PlatformApi, UiUtils } = libraries\n\t  let objectSchemas = await UiUtils.IafLocalFile.selectFiles({ multiple: true, accept: \&quot;.json\&quot; })\n\t  const schemaContents = await UiUtils.IafLocalFile.loadJSONFiles(objectSchemas)\n\t  let iaf_dt_current_proj = await PlatformApi.IafProj.getCurrent(ctx);\n\t  let iaf_schema_col = await PlatformApi.IafScriptEngine.createOrRecreateCollection(\n\t\t{\n\t\t  _name: &apos;IAF Schemas&apos;,\n\t\t  _shortName: &apos;schemas&apos;,\n\t\t  _namespaces: iaf_dt_current_proj._namespaces,\n\t\t  _description: &apos;IAF Schema Store Collection&apos;,\n\t\t  _userType: &apos;iaf_schema_collection&apos;\n\t\t}, ctx)\n\t  const iaf_schemas = await PlatformApi.IafScriptEngine.createItems({\n\t\t_userItemId: iaf_schema_col._userItemId,\n\t\t_namespaces: iaf_dt_current_proj._namespaces,\n\t\titems: schemaContents\n\t  }, ctx)\n\t  return iaf_schemas\n\t},\n  \n\tasync createSystemsAndElementsCollections(input, libraries, ctx) {\n\t  let { PlatformApi, UiUtils } = libraries\n\t  let iaf_dt_current_proj = await PlatformApi.IafProj.getCurrent(ctx);\n\t  let systems = await PlatformApi.IafScriptEngine.createOrRecreateCollection(\n\t\t{\n\t\t  _name: &apos;Systems Collection&apos;,\n\t\t  _shortName: &apos;systems&apos;,\n\t\t  _namespaces: iaf_dt_current_proj._namespaces,\n\t\t  _description: &apos;Systems are groups of related entities&apos;,\n\t\t  _userType: &apos;iaf_ext_sys_coll&apos;\n\t\t}, ctx)\n\t  let index = await PlatformApi.IafScriptEngine.createOrRecreateIndex({\n\t\t_id: systems._id,\n\t\tindexDefs: [\n\t\t  {\n\t\t\tkey: { \&quot;System Name\&quot;: \&quot;text\&quot; },\n\t\t\toptions: {\n\t\t\t  name: \&quot;text_search_index\&quot;,\n\t\t\t  default_language: \&quot;english\&quot;\n\t\t\t}\n\t\t  }\n\t\t]\n\t  }, ctx)\n\t  let systemElements = await PlatformApi.IafScriptEngine.createOrRecreateCollection(\n\t\t{\n\t\t  _name: &apos;System Elements Collection&apos;,\n\t\t  _shortName: &apos;system-elements&apos;,\n\t\t  _namespaces: iaf_dt_current_proj._namespaces,\n\t\t  _description: &apos;Systems Elements are entities grouped under a System&apos;,\n\t\t  _userType: &apos;iaf_ext_sysel_coll&apos;\n\t\t}, ctx)\n\t  let index2 = await PlatformApi.IafScriptEngine.createOrRecreateIndex({\n\t\t_id: systemElements._id,\n\t\tindexDefs: [\n\t\t  {\n\t\t\tkey: { \&quot;Element Name\&quot;: \&quot;text\&quot; },\n\t\t\toptions: {\n\t\t\t  name: \&quot;text_search_index\&quot;,\n\t\t\t  default_language: \&quot;english\&quot;\n\t\t\t}\n\t\t  }\n\t\t]\n\t  }, ctx)\n\t  return { systems, systemElements }\n\t},\n  \n\tasync createPickListCollections(input, libraries, ctx) {\n\t  let { PlatformApi, UiUtils } = libraries\n\t  let iaf_dt_current_proj = await PlatformApi.IafProj.getCurrent(ctx);\n\t  let iaf_pick_list_col = await PlatformApi.IafScriptEngine.createOrRecreateCollection(\n\t\t{\n\t\t  _name: &apos;IAF Pick List&apos;,\n\t\t  _shortName: &apos;pick_list&apos;,\n\t\t  _namespaces: iaf_dt_current_proj._namespaces,\n\t\t  _description: &apos;IAF Pick List Collection&apos;,\n\t\t  _userType: &apos;iaf_pick_list_collection&apos;\n\t\t}, ctx)\n\t  let array_of_default_pick_list_items = [\n\t\t{ type: \&quot;SystemsCategories\&quot;, values: [{ display: &apos;Mechanical&apos;, value: &apos;MechanicalSystemsCategories&apos; }, { display: &apos;Piping&apos;, value: &apos;PipingSystemsCategories&apos; }, { display: &apos;Electrical&apos;, value: &apos;ElectricalSystemsCategories&apos; }] },\n\t\t{ type: \&quot;MechanicalSystemsCategories\&quot;, values: [{ display: &apos;Exhaust Air&apos;, value: &apos;Exhaust Air&apos; }, { display: &apos;Return Air&apos;, value: &apos;Return Air&apos; }, { display: &apos;Supply Air&apos;, value: &apos;Supply Air&apos; }] },\n\t\t{\n\t\t  type: \&quot;PipingSystemsCategories\&quot;, values: [\n\t\t\t{ display: &apos;Hydronic Supply&apos;, value: &apos;Hydronic Supply&apos; },\n\t\t\t{ display: &apos;Hydronic Return&apos;, value: &apos;Hydronic Return&apos; },\n\t\t\t{ display: &apos;Chilled Water Supply&apos;, value: &apos;Chilled Water Supply&apos; },\n\t\t\t{ display: &apos;Chilled Water Return&apos;, value: &apos;Chilled Water Return&apos; },\n\t\t\t{ display: &apos;Hot Water Supply&apos;, value: &apos;Hot Water Supply&apos; },\n\t\t\t{ display: &apos;Hot Water Return&apos;, value: &apos;Hot Water Return&apos; },\n\t\t\t{ display: &apos;Sanitary&apos;, value: &apos;Sanitary&apos; },\n\t\t\t{ display: &apos;Condensate Drain&apos;, value: &apos;Condensate Drain&apos; },\n\t\t\t{ display: &apos;Natural Gas&apos;, value: &apos;Natural Gas&apos; }]\n\t\t},\n\t\t{ type: \&quot;ElectricalSystemsCategories\&quot;, values: [{ display: &apos;Low Voltage&apos;, value: &apos;Low Voltage&apos; }, { display: &apos;High Voltage&apos;, value: &apos;High Voltage&apos; }] }\n\t  ]\n\t  const default_pick_list_collection_result = await PlatformApi.IafScriptEngine.createItems({\n\t\t_userItemId: iaf_pick_list_col._userItemId,\n\t\t_namespaces: iaf_dt_current_proj._namespaces,\n\t\titems: array_of_default_pick_list_items\n\t  }, ctx)\n\t  return default_pick_list_collection_result\n\t},\n\tasync loadProjectAndCollections(input, libraries, ctx, callback) {\n  \n\t  const { IafProj, IafScriptEngine, IafDataSource } = libraries.PlatformApi\n  \n\t  let currentProj = await IafProj.getCurrent(ctx)\n  \n\t  let collections = await IafScriptEngine.getCollections(null, ctx)\n\t  collections = collections._list\n  \n\t  let latestModelComposite = await IafScriptEngine.getCompositeCollection({\n\t\tquery:\n\t\t{\n\t\t  \&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\t\t  \&quot;_namespaces\&quot;: { \&quot;$in\&quot;: currentProj._namespaces },\n\t\t  \&quot;_itemClass\&quot;: \&quot;NamedCompositeItem\&quot;\n\t\t}\n\t  }, ctx, { getLatestVersion: true })\n  \n\t  let latestElementCollection\n\t  if (latestModelComposite)\n\t\tlatestElementCollection = await IafScriptEngine.getCollectionInComposite(latestModelComposite._id, {\n\t\t  _userType: \&quot;rvt_elements\&quot;\n\t\t}, ctx)\n  \n\t  let datasources = await IafDataSource.getOrchestrators(null, ctx)\n\t  datasources = datasources._list\n  \n\t  let iaf_collections = _.find(collections, { _userType: \&quot;iaf_ext_coll_coll\&quot; })\n\t  let iaf_asset_collection = _.find(collections, { _userType: \&quot;iaf_ext_asset_coll\&quot; })\n\t  let iaf_space_collection = _.find(collections, { _userType: \&quot;iaf_ext_space_coll\&quot; })\n\t  let iaf_bms_collection = _.find(collections, { _userType: \&quot;bms_assets\&quot; })\n\t  let iaf_schema_collection = _.find(collections, { _userType: \&quot;iaf_schema_collection\&quot; })\n\t  let iaf_pick_list_collection = _.find(collections, { _userType: \&quot;iaf_pick_list_collection\&quot; })\n\t  let iaf_systems_collection = _.find(collections, { _userType: \&quot;iaf_ext_sys_coll\&quot; })\n\t  let iaf_system_elements_collection = _.find(collections, { _userType: \&quot;iaf_ext_sysel_coll\&quot; })\n\t  let iaf_ext_files_coll = _.find(collections, { _userType: \&quot;file_container\&quot; })\n\t  let iaf_dt_contractor_coll = _.find(collections, { _userType: \&quot;iaf_dt_contractor_coll\&quot; })\n\t  let iaf_dt_installer_coll = _.find(collections, { _userType: \&quot;iaf_dt_installer_coll\&quot; })\n\t  let iaf_dt_iron_data_coll = _.find(collections, { _userType: \&quot;iaf_dt_iron_data_coll\&quot; })\n\t  let iaf_dt_spec_data_coll = _.find(collections, { _userType: \&quot;iaf_dt_spec_data_coll\&quot; })\n\t  let iaf_dt_sup_data_coll = _.find(collections, { _userType: \&quot;iaf_dt_sup_data_coll\&quot; })\n\t  let iaf_dt_trace_coll = _.find(collections, { _userType: \&quot;iaf_dt_trace_coll\&quot; })\n\t  let iaf_dt_warranty_coll = _.find(collections, { _userType: \&quot;iaf_dt_warranty_coll\&quot; })\n\t  let iaf_dt_commtest_coll = _.find(collections, { _userType: \&quot;iaf_dt_commtest_coll\&quot; })\n  \n\t  IafScriptEngine.setVar(&apos;iaf_collections&apos;, iaf_collections)\n\t  IafScriptEngine.setVar(&apos;iaf_space_collection&apos;, iaf_space_collection)\n\t  IafScriptEngine.setVar(&apos;iaf_bms_collection&apos;, iaf_bms_collection)\n\t  IafScriptEngine.setVar(&apos;iaf_schema_collection&apos;, iaf_schema_collection)\n\t  IafScriptEngine.setVar(&apos;iaf_pick_list_collection&apos;, iaf_pick_list_collection)\n\t  IafScriptEngine.setVar(&apos;iaf_systems_collection&apos;, iaf_systems_collection)\n\t  IafScriptEngine.setVar(&apos;iaf_system_elements_collection&apos;, iaf_system_elements_collection)\n\t  IafScriptEngine.setVar(&apos;iaf_ext_files_coll&apos;, iaf_ext_files_coll)\n\t  IafScriptEngine.setVar(&apos;iaf_dt_contractor_coll&apos;, iaf_dt_contractor_coll)\n\t  IafScriptEngine.setVar(&apos;iaf_dt_spec_data_coll&apos;, iaf_dt_spec_data_coll)\n\t  IafScriptEngine.setVar(&apos;iaf_dt_installer_coll&apos;, iaf_dt_installer_coll)\n\t  IafScriptEngine.setVar(&apos;iaf_dt_iron_data_coll&apos;, iaf_dt_iron_data_coll)\n\t  IafScriptEngine.setVar(&apos;iaf_dt_sup_data_coll&apos;, iaf_dt_sup_data_coll)\n\t  IafScriptEngine.setVar(&apos;iaf_dt_trace_coll&apos;, iaf_dt_trace_coll)\n\t  IafScriptEngine.setVar(&apos;iaf_dt_warranty_coll&apos;, iaf_dt_warranty_coll)\n\t  IafScriptEngine.setVar(&apos;iaf_dt_commtest_coll&apos;, iaf_dt_commtest_coll)\n\t  IafScriptEngine.setVar(&apos;iaf_entityCollectionMap&apos;, {\n\t\tAsset: iaf_asset_collection,\n\t\tAssets: iaf_asset_collection,\n\t\tSpace: iaf_space_collection,\n\t\tSpaces: iaf_space_collection,\n\t\tFile: iaf_ext_files_coll,\n\t\tFiles: iaf_ext_files_coll,\n\t\tCollection: iaf_collections,\n\t\tCollections: iaf_collections,\n\t\t\&quot;BMS Equipment\&quot;: iaf_bms_collection,\n\t\tSystem: iaf_systems_collection,\n\t\tSystems: iaf_systems_collection,\n\t\tSystemElement: iaf_system_elements_collection,\n\t\tSystemElements: iaf_system_elements_collection\n\t  })\n\t  IafScriptEngine.setVar(&apos;iaf_entityNamePropMap&apos;, {\n\t\tAsset: \&quot;Asset Name\&quot;,\n\t\tAssets: \&quot;Asset Name\&quot;,\n\t\tSpace: \&quot;Space Name\&quot;,\n\t\tSpaces: \&quot;Space Name\&quot;,\n\t\tFile: \&quot;name\&quot;,\n\t\tFiles: \&quot;name\&quot;,\n\t\tCollection: \&quot;Collection Name\&quot;,\n\t\tCollections: \&quot;Collection Name\&quot;,\n\t\t\&quot;BMS Equipment\&quot;: \&quot;id.display\&quot;,\n\t\tSystem: \&quot;Systems Name\&quot;,\n\t\tSystems: \&quot;Systems Name\&quot;,\n\t\tSystemElement: \&quot;Element Name\&quot;,\n\t\tSystemElements: \&quot;Element Name\&quot;,\n\t  })\n\t  IafScriptEngine.setVar(&apos;iaf_typedef_collection&apos;, _.find(collections, { _userType: \&quot;iaf_dt_type_map_defs_coll\&quot; }))\n\t  IafScriptEngine.setVar(&apos;iaf_asset_collection&apos;, iaf_asset_collection)\n  \n\t  if (latestModelComposite) {\n\t\tIafScriptEngine.setVar(&apos;iaf_ext_current_bim_model&apos;, latestModelComposite)\n\t\tIafScriptEngine.setVar(&apos;iaf_ext_elements_collection&apos;, latestElementCollection)\n\t  }\n  \n\t  IafScriptEngine.setVar(&apos;datasources&apos;, datasources)\n\t  IafScriptEngine.setVar(&apos;IAF_workspace&apos;, currentProj)\n\t  return {\n\t\tcurrentProj,\n\t\tiaf_typedef_collection: IafScriptEngine.getVar(&apos;iaf_typedef_collection&apos;),\n\t\tiaf_asset_collection: IafScriptEngine.getVar(&apos;iaf_asset_collection&apos;),\n\t\tlatestModelComposite,\n\t\tlatestElementCollection,\n\t\tdatasources,\n\t\tiaf_entityNamePropMap: IafScriptEngine.getVar(&apos;iaf_entityNamePropMap&apos;),\n\t\tiaf_entityCollectionMap: IafScriptEngine.getVar(&apos;iaf_entityCollectionMap&apos;),\n\t\tcollections,\n\t\tiaf_collections: IafScriptEngine.getVar(&apos;iaf_collections&apos;),\n\t\tiaf_space_collection: IafScriptEngine.getVar(&apos;iaf_space_collection&apos;),\n\t\tiaf_bms_collection: IafScriptEngine.getVar(&apos;iaf_bms_collection&apos;),\n\t\tiaf_schema_collection: IafScriptEngine.getVar(&apos;iaf_schema_collection&apos;),\n\t\tiaf_pick_list_collection: IafScriptEngine.getVar(&apos;iaf_pick_list_collection&apos;),\n\t\tiaf_systems_collection: IafScriptEngine.getVar(&apos;iaf_systems_collection&apos;),\n\t\tiaf_system_elements_collection: IafScriptEngine.getVar(&apos;iaf_system_elements_collection&apos;),\n\t\tiaf_ext_files_coll: IafScriptEngine.getVar(&apos;iaf_ext_files_coll&apos;),\n\t\tiaf_dt_contractor_coll: IafScriptEngine.getVar(&apos;iaf_dt_contractor_coll&apos;),\n\t\tiaf_dt_installer_coll: IafScriptEngine.getVar(&apos;iaf_dt_installer_coll&apos;),\n\t\tiaf_dt_iron_data_coll: IafScriptEngine.getVar(&apos;iaf_dt_iron_data_coll&apos;),\n\t\tiaf_dt_spec_data_coll: IafScriptEngine.getVar(&apos;iaf_dt_spec_data_coll&apos;),\n\t\tiaf_dt_sup_data_coll: IafScriptEngine.getVar(&apos;iaf_dt_sup_data_coll&apos;),\n\t\tiaf_dt_trace_coll: IafScriptEngine.getVar(&apos;iaf_dt_trace_coll&apos;),\n\t\tiaf_dt_warranty_coll: IafScriptEngine.getVar(&apos;iaf_dt_warranty_coll&apos;),\n\t\tiaf_dt_commtest_coll: IafScriptEngine.getVar(&apos;iaf_dt_commtest_coll&apos;)\n\t  }\n\t},\n  \n  \n\tasync createOrRecreateExcelImportOrchestrator(input, libraries, ctx) {\n  \n\t  let { PlatformApi } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  const query = {\n\t\t_namespaces: proj._namespaces,\n\t\t_userType: \&quot;xlsx_import\&quot;\n\t  };\n  \n\t  const datasources = await PlatformApi.IafScriptEngine.getDatasources(query, ctx);\n  \n\t  const filteredDatasources = _.filter(datasources, d =&gt; d._userType === \&quot;xlsx_import\&quot;\n\t\t&amp;&amp; d._name === \&quot;xlsx_import\&quot;);\n  \n\t  _.each(filteredDatasources, async datasource =&gt; await PlatformApi.IafScriptEngine.removeDatasource({ orchId: datasource.id }, ctx));\n  \n\t  let datasourceResult = await PlatformApi.IafScriptEngine.addDatasource(\n\t\t{\n\t\t  _name:\&quot;xlsx_import\&quot;,\n\t\t  _description: \&quot;Orchestrator to Import XLSX File\&quot;,\n\t\t  _namespaces: proj._namespaces,\n\t\t  _userType: \&quot;xlsx_import\&quot;,\n\t\t  _params:{\n\t\t\ttasks:[\n\t\t\t\t{\n\t\t\t\t  _orchcomp:\&quot;default_script_target\&quot;,\n\t\t\t\t  _name: \&quot;Import excel sheets\&quot;,\n\t\t\t\t  _sequenceno: 1,\n\t\t\t\t  \&quot;_actualparams\&quot;: {\n\t\t\t\t\t\&quot;userType\&quot;: \&quot;iaf_import_data_sheets\&quot;,\n\t\t\t\t\t\&quot;_scriptName\&quot;: \&quot;importModeledAssets\&quot;\n\t\t\t\t  }\n\t\t\t\t}\n  \n\t\t\t]\n\t\t  }\n\t\t}, ctx\n\t  )\n\t  return datasourceResult;\n\t},\n  \n\tasync runAssetImport(input, libraries, ctx) {\n  \n\t  let { PlatformApi } = libraries\n  \n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\n  \n\t  const query = {\n\t\t_namespaces: proj._namespaces,\n\t\t_userType: \&quot;xlsx_import\&quot;\n\t  };\n  \n\t  const datasources = await PlatformApi.IafScriptEngine.getDatasources(query, ctx);\n  \n\t  const filteredDatasources = _.filter(datasources, d =&gt; d._userType === \&quot;xlsx_import\&quot; &amp;&amp; d._name === \&quot;xlsx_import\&quot;);\n  \n\t  console.log(\&quot;filteredDatasources\&quot;, JSON.stringify(filteredDatasources))\n\n\t  const orchReq= {\n\t\t_namespaces: proj._namespaces,\n\t\torchestratorId: filteredDatasources[0].id\n\t  };\n  \n\t  const orchRes = await PlatformApi.IafScriptEngine.runDatasource(orchReq, ctx);\n\t  \n\t  console.log(\&quot;orchRes\&quot;, JSON.stringify(orchRes))\n  \n\t}\n  }\n  \n  export default ProjSetup&quot;},&quot;_itemClass&quot;:&quot;Script&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}&amp;nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">&amp;nsfilter=${CNAMESPACESID}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_SETUP SCRIPT" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;_name&quot;:&quot;Project Setup&quot;,&quot;_shortName&quot;:&quot;iaf_ext_proj_setup&quot;,&quot;_description&quot;:&quot;Scripts to Setup a Project&quot;,&quot;_userType&quot;:&quot;iaf_ext_proj_setup&quot;,&quot;_namespaces&quot;:[&quot;${CNAMESPACESID}&quot;],&quot;_version&quot;:{&quot;_userData&quot;:&quot;let RunnableScripts = [\r\n\t{ name: \&quot;1. Setup Project User Groups\&quot;, script: \&quot;createUserGroups\&quot; },\r\n\t{ name: \&quot;2. Create User Configs for User Groups\&quot;, script: \&quot;userConfigsLoader\&quot; },\r\n\t{ name: \&quot;3. Load Project Scripts\&quot;, script: \&quot;scriptsLoader\&quot; },\r\n\t{ name: \&quot;4. Create or Recreate BIMPK Uploader Datasource\&quot;, script: \&quot;createOrRecreateBIMPKDatasource\&quot; },\r\n\t{ name: \&quot;5. Create or Recreate SGPK Uploader Datasource\&quot;, script: \&quot;createOrRecreateSGPKDatasource\&quot; },\r\n\t{ name: \&quot;6. Create or Recreate Elements Type Mapper Datasource\&quot;, script: \&quot;createOrRecreateRemapElementsTypeDatasource\&quot; },\r\n\t{ name: \&quot;7. Create or Recreate Type Map from XLSX File\&quot;, script: \&quot;typeMapLoader\&quot; },\r\n\t{ name: \&quot;8. Create or Recreate File Attributes\&quot;, script: \&quot;fileAttributeLoader\&quot; },\r\n\t{ name: \&quot;9. Create or Recreate File Item Index\&quot;, script: \&quot;createOrRecreateFileItemIndex\&quot; },\r\n\t{ name: \&quot;10a. Upload BIMPK File\&quot;, script: \&quot;uploadBIMPKFile\&quot;},\r\n\t{ name: \&quot;10b. Upload SGPK File\&quot;, script: \&quot;uploadSGPKFile\&quot; },\r\n\t{ name: \&quot;10c. Import Latest BIMPK Version\&quot;, script: \&quot;importBimpkFile\&quot; },\r\n\t{ name: \&quot;11. Import Assets\&quot;, script: \&quot;importModeledAssets\&quot; },\r\n\t{ name: \&quot;12. Create or Recreate Asset Index\&quot;, script: \&quot;createOrRecreateAssetIndex\&quot; },\r\n\t{ name: \&quot;13. Import Model Spaces\&quot;, script: \&quot;importModeledSpaces\&quot; },\r\n\t{ name: \&quot;14. Create or Recreate Spaces Index\&quot;, script: \&quot;createOrRecreateSpacesIndex\&quot; },\r\n\t{ name: \&quot;15. Import Extended Data\&quot;, script: \&quot;importExtendedData\&quot; },\r\n\t{ name: \&quot;16. Create or Recreate Collections collection\&quot;, script: \&quot;createOrRecreateCollectionsCollection\&quot; },\r\n\t{ name: \&quot;17. Add API Config\&quot;, script: \&quot;addApiGatewayConfig\&quot; },\r\n\t{ name: \&quot;18. Create Object Schemas\&quot;, script: \&quot;createObjectSchemas\&quot; },\r\n\t{ name: \&quot;19. Create Systems and System Elements collections\&quot;, script: \&quot;createSystemsAndElementsCollections\&quot; },\r\n\t{ name: \&quot;20. Create Pick List Collections\&quot;, script: \&quot;createPickListCollections\&quot; },\r\n\t{ name: \&quot;21. Load Project and Collections\&quot;, script: \&quot;loadProjectAndCollections\&quot; },\r\n\t{ name: \&quot;Upload Data Sheet\&quot;, script: \&quot;uploadDataSheet\&quot;},\r\n\t{ name: \&quot;Add Import Data Sheet Orchestrator\&quot;, script: \&quot;createOrRecreateExcelImportOrchestrator\&quot; },\r\n\t{ name: \&quot;Run Asset Import\&quot;, script: \&quot;runAssetImport\&quot;},\r\n\t{ name: \&quot;Enable Skyspark Integration\&quot;, script: \&quot;enableSkysparkIntegration\&quot;},\r\n\t{ name: \&quot;Run Intial Skyspark SYNC\&quot;, script: \&quot;runIntialSkysparkSync\&quot;},\r\n\t{ name: \&quot;Import Asset Skyspark Relations\&quot;, script: \&quot;importAssetsSkysparkRelations\&quot;},\r\n\t{ name: \&quot;Enable Sisense Integration\&quot;, script: \&quot;enableSisenseIntegration\&quot;},\r\n\t{ name: \&quot;Run Analytics Schema Create\&quot;, script: \&quot;runAnalyticSchemaCreate\&quot;},\r\n\t{ name: \&quot;Run - Create DT Assets into Postgres\&quot;, script: \&quot;runIntialDTSisenseAssetSync\&quot;},\r\n\t{ name: \&quot;Update File Tags\&quot;, script: \&quot;updateFileTags\&quot;},\r\n  ]\r\n  \r\n  //Info for creating user groups\r\n  let userGroupDescriptors = [\r\n\t{\r\n\t  _name: &apos;Solutions Mgmt&apos;,\r\n\t  _shortName: &apos;sol_man&apos;,\r\n\t  _description: &apos;Solutions User Group&apos;,\r\n\t  permissions: {\r\n\t\t//accessAll is for easy creation of an admin with access to everything\r\n\t\taccessAll: true\r\n\t  }\r\n\t},\r\n\t{\r\n\t  _name: &apos;File Contributor&apos;,\r\n\t  _shortName: &apos;file_contrib&apos;,\r\n\t  _description: &apos;File Contributor User Group&apos;,\r\n\t  permissions: {\r\n\t\tworkspaces: [{ actions: [&apos;READ&apos;, &apos;EDIT&apos;] }],\r\n\t\tnamedUserItems: [{ actions: [&apos;READ&apos;, &apos;EDIT&apos;] }],\r\n\t\tfiles: [{ actions: [&apos;READ&apos;, &apos;EDIT&apos;] }]\r\n\t  }\r\n\t},\r\n\t{\r\n\t  _name: &apos;Viewer&apos;,\r\n\t  _shortName: &apos;file_reviewer&apos;,\r\n\t  _description: &apos;File Reviewer User Group&apos;,\r\n\t  permissions: {\r\n\t\tworkspaces: [{ actions: [&apos;READ&apos;] }],\r\n\t\tnamedUserItems: [{ actions: [&apos;READ&apos;] }],\r\n\t\tfiles: [{ actions: [&apos;READ&apos;] }]\r\n\t  }\r\n\t},\r\n  ]\r\n  \r\n  //Info for creating user configs\r\n  let userConfigDescriptors = [\r\n\t{\r\n\t  _name: \&quot;DBM Contributor\&quot;,\r\n\t  _shortName: \&quot;iaf_dbm_contrib_uc\&quot;,\r\n\t  _description: \&quot;DBM Contributor User Config\&quot;,\r\n\t  _userType: \&quot;ipa-dt\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;DBM Viewer\&quot;,\r\n\t  _shortName: \&quot;iaf_dbm_review_uc\&quot;,\r\n\t  _description: \&quot;DBM Reviewer User Config\&quot;,\r\n\t  _userType: \&quot;ipa-dt\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;DBM Solution Admin\&quot;,\r\n\t  _shortName: \&quot;iaf_dbm_solman_uc\&quot;,\r\n\t  _description: \&quot;DBM Solution Admin User Config\&quot;,\r\n\t  _userType: \&quot;ipa-dt\&quot;\r\n\t}\r\n  ]\r\n  \r\n  //Map between UserConfig and UserGroups\r\n  let userConfigToUserGroupMap =\r\n\t[\r\n\t  { userConfig: \&quot;iaf_dbm_contrib_uc\&quot;, userGroup: \&quot;file_contrib\&quot; },\r\n\t  { userConfig: \&quot;iaf_dbm_review_uc\&quot;, userGroup: \&quot;file_reviewer\&quot; },\r\n\t  { userConfig: \&quot;iaf_dbm_solman_uc\&quot;, userGroup: \&quot;sol_man\&quot; }\r\n\t]\r\n  \r\n  //Info for creating scripts\r\n  let scriptsDescriptors = [\r\n\t{\r\n\t  _name: \&quot;Load Project Collection Data\&quot;,\r\n\t  _shortName: \&quot;iaf_dt_proj_colls\&quot;,\r\n\t  _description: \&quot;Load All Project Collections\&quot;,\r\n\t  _userType: \&quot;iaf_dt_proj_colls\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;Type Map Interactions\&quot;,\r\n\t  _shortName: \&quot;iaf_dt_types\&quot;,\r\n\t  _description: \&quot;Scripts for interacting with the type map\&quot;,\r\n\t  _userType: \&quot;iaf_dt_types\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;BIMPK Upload\&quot;,\r\n\t  _shortName: \&quot;iaf_bimpk_upload\&quot;,\r\n\t  _description: \&quot;Load, Transform and Write Model from BIMPK\&quot;,\r\n\t  _userType: \&quot;iaf_bimpk_upload\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;SGPK Upload\&quot;,\r\n\t  _shortName: \&quot;iaf_sgpk_upload\&quot;,\r\n\t  _description: \&quot;Load, Transform and Write Model from BIMPK\&quot;,\r\n\t  _userType: \&quot;iaf_sgpk_upload\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;BIMPK Post Import - Copy Inverse Relations\&quot;,\r\n\t  _shortName: \&quot;iaf_bimpk_post_imp\&quot;,\r\n\t  _description: \&quot;BIMPK Post Import - Copy Inverse Relations from Prev Version\&quot;,\r\n\t  _userType: \&quot;iaf_bimpk_post_imp\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;Re-mapping type elements\&quot;,\r\n\t  _shortName: \&quot;iaf_map_elms_type\&quot;,\r\n\t  _description: \&quot;Update model type elements, after BIMtypes updated\&quot;,\r\n\t  _userType: \&quot;iaf_map_elms_type\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;Dashboard Scripts\&quot;,\r\n\t  _shortName: \&quot;iaf_dashboard\&quot;,\r\n\t  _description: \&quot;Scripts to provide data for dashboard development\&quot;,\r\n\t  _userType: \&quot;iaf_dashboard\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;Files As Entities All Users\&quot;,\r\n\t  _shortName: \&quot;iaf_files_allusers\&quot;,\r\n\t  _description: \&quot;Files for Entity View\&quot;,\r\n\t  _userType: \&quot;iaf_files_allusers\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;Entity Collection All Users Scripts\&quot;,\r\n\t  _shortName: \&quot;iaf_collect_allusers\&quot;,\r\n\t  _description: \&quot;Scripts to interact with collections\&quot;,\r\n\t  _userType: \&quot;iaf_collect_allusers\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;Entity Asset All Users Logic\&quot;,\r\n\t  _shortName: \&quot;iaf_entass_allusers\&quot;,\r\n\t  _description: \&quot;Common Entity Asset Business Logic\&quot;,\r\n\t  _userType: \&quot;iaf_entass_allusers\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;Entity Space All Users Logic\&quot;,\r\n\t  _shortName: \&quot;iaf_entspa_allusers\&quot;,\r\n\t  _description: \&quot;Common Entity Space Business Logic\&quot;,\r\n\t  _userType: \&quot;iaf_entspa_allusers\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;Object Model API Scripts\&quot;,\r\n\t  _shortName: \&quot;iaf_obj_model_api\&quot;,\r\n\t  _description: \&quot;Object Model API Asset Script\&quot;,\r\n\t  _userType: \&quot;iaf_obj_model_api\&quot;\r\n\t},\r\n\t{\r\n\t  _name: \&quot;Asset Sync up Scripts\&quot;,\r\n\t  _shortName: \&quot;iaf_assets_j2\&quot;,\r\n\t  _description: \&quot;Sisense Asset Sync scripts\&quot;,\r\n\t  _userType: \&quot;iaf_assets_j2\&quot;,\r\n\t},\r\n\t{\r\n\t  _name: \&quot;J2 FIN5 SYNC scripts\&quot;,\r\n\t  _shortName: \&quot;iaf_create_J2Assets\&quot;,\r\n\t  _description: \&quot;Scripts to sync J2 data\&quot;,\r\n\t  _userType: \&quot;iaf_create_J2Assets\&quot;,\r\n\t},\r\n  \r\n\t{   _name: \&quot;Entity Relations Scripts\&quot;,\r\n\t\t_shortName: \&quot;iaf_relations_scripts\&quot;,\r\n\t\t_description: \&quot;Scripts to manage (CRUD) parent-child relations between entities\&quot;,\r\n\t\t_userType: \&quot;iaf_relations_scripts\&quot;\r\n\t},\r\n  \r\n\t{   _name: \&quot;Import Asset Scripts\&quot;,\r\n\t\t_shortName: \&quot;iaf_import_data_sheets\&quot;,\r\n\t\t_description: \&quot;Scripts to import assets/spaces on server side\&quot;,\r\n\t\t_userType: \&quot;iaf_import_data_sheets\&quot;\r\n\t},\r\n\r\n\t{   _name: \&quot;Validation Scripts\&quot;,\r\n\t\t_shortName: \&quot;iaf_validation\&quot;,\r\n\t\t_description: \&quot;Scripts to validate to model and platform data\&quot;,\r\n\t\t_userType: \&quot;iaf_validation\&quot;\r\n\t},\r\n\r\n\t{ _name: \&quot;BMS Equipment Entity scripts\&quot;,\r\n      _shortName: \&quot;iaf_bms_allusers\&quot;,\r\n      _description: \&quot;BMS data as entities\&quot;,\r\n      _userType: \&quot;iaf_bms_allusers\&quot;,\r\n    },\r\n\r\n\t{ _name: \&quot;Asset SYNC scripts\&quot;,\r\n      _shortName: \&quot;iaf_assets_postgres\&quot;,\r\n      _description: \&quot;Scripts to add assets in postgress\&quot;,\r\n      _userType: \&quot;iaf_assets_postgres\&quot;,\r\n    },\r\n\r\n\t{ _name: \&quot;Create BMS Equipments\&quot;,\r\n      _shortName: \&quot;iaf_bms_equipments\&quot;,\r\n      _description: \&quot;Scripts to create BMS equipment collections\&quot;,\r\n      _userType: \&quot;iaf_bms_equipments\&quot;,\r\n    },\r\n\r\n\t{ _name: \&quot;System Scripts\&quot;,\r\n      _shortName: \&quot;iaf_systems_scripts\&quot;,\r\n      _description: \&quot;Scripts to System builder\&quot;,\r\n      _userType: \&quot;iaf_systems_scripts\&quot;,\r\n    },\r\n\r\n\t{ _name: \&quot;Schema Scripts\&quot;,\r\n      _shortName: \&quot;iaf_schemas_scripts\&quot;,\r\n      _description: \&quot;Scripts to Create System Schemas\&quot;,\r\n      _userType: \&quot;iaf_schemas_scripts\&quot;,\r\n    },\r\n\r\n\t{ _name: \&quot;Pick Lists\&quot;,\r\n      _shortName: \&quot;iaf_pick_lists\&quot;,\r\n      _description: \&quot;Scripts to Create pick lists\&quot;,\r\n      _userType: \&quot;iaf_pick_lists\&quot;,\r\n    },\r\n\r\n  ]\r\n  \r\n  let ProjSetup = {\r\n  \r\n\t//Exposes the runnable steps to script execution tools like the vscode extension\r\n\tgetRunnableScripts() {\r\n\t  return RunnableScripts\r\n\t},\r\n  \r\n\t//Create the use groups as described in the userGroupDescriptors\r\n\t//This can be run multiple times if new user groups are added to userGroupDescriptors\r\n\t//Duplicate user grousp will nto be created\r\n\t//However, you cannot edit existing usergroups by this script\r\n\tasync createUserGroups(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, IafScriptEngine } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  let res\r\n\t  try {\r\n\t\tres = await PlatformApi.IafProj.addUserGroups(proj, userGroupDescriptors, ctx);\r\n\t  } catch (e) {\r\n\t\tres = undefined;\r\n\t\tthrow e;\r\n\t  }\r\n  \r\n\t  return res\r\n\t},\r\n  \r\n\t//Create user configs as described in the userConfigDescriptors\r\n\t//Do not re-run this script it will create duplicate user configs\r\n\t//Instead update the user config using the vscode extension\r\n\tasync userConfigsLoader(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, UiUtils } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  let configFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: true, accept: \&quot;.exp\&quot; })\r\n  \r\n\t  let configNames = _.map(configFiles, (f) =&gt; {\r\n\t\t//get the first part of the file name without extensions\r\n\t\treturn _.split(f.name, &apos;.&apos;)[0]\r\n\t  })\r\n  \r\n\t  let userGroups = await PlatformApi.IafProj.getUserGroups(proj, ctx)\r\n  \r\n\t  //load content of the user configs\r\n\t  let configContents = await UiUtils.IafLocalFile.loadEXPFiles(configFiles)\r\n  \r\n\t  let configs = _.zip(configNames, configContents)\r\n  \r\n\t  let configDefs = _.map(configs, (c) =&gt; {\r\n\t\treturn { configName: c[0], configContent: c[1] }\r\n\t  })\r\n  \r\n\t  //create configItems\r\n\t  let configItems = []\r\n\t  configDefs.forEach((c) =&gt; {\r\n\t\tlet item = _.find(userConfigDescriptors, { _shortName: c.configName })\r\n\t\tif (item) {\r\n\t\t  item._version = { _userData: JSON.stringify(c.configContent, null, 2) }\r\n\t\t  configItems.push(item)\r\n\t\t}\r\n\t  })\r\n  \r\n\t  //Look up the UserGroup mapped to each UserConfig\r\n\t  let groupItems = []\r\n\t  configDefs.forEach((c) =&gt; {\r\n\t\tlet group = _.find(userConfigToUserGroupMap, { userConfig: c.configName })\r\n\t\tlet item = _.find(userGroups, { _shortName: group.userGroup })\r\n\t\tif (item) {\r\n\t\t  groupItems.push(item)\r\n\t\t}\r\n\t  })\r\n  \r\n\t  let configsAndGroups = _.zip(configItems, groupItems)\r\n  \r\n\t  let configsAndGroupDefs = _.map(configsAndGroups, (c) =&gt; {\r\n\t\treturn { userConfig: c[0], userGroup: c[1] }\r\n\t  })\r\n  \r\n\t  let results = []\r\n  \r\n\t  //Do not use forEach as it is not Promise aware!\r\n\t  for (let i = 0; i &lt; configsAndGroupDefs.length; i++) {\r\n\t\tlet result = await PlatformApi.IafUserGroup.addUserConfigs(configsAndGroupDefs[i].userGroup, [configsAndGroupDefs[i].userConfig], ctx);\r\n\t\tif (result &amp;&amp; result._list) {\r\n\t\t  result = result._list;\r\n\t\t}\r\n\t\tresults.push(result);\r\n\t  }\r\n  \r\n\t  return results\r\n\t},\r\n  \r\n\t//Create scripts in the project based on scriptsDescriptors\r\n\t//This version only handles js scripts\r\n\t//Do not re-run as it will create duplicate scripts\r\n\t//Instead update the scripts using the vscode extension\r\n\tasync scriptsLoader(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, UiUtils } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  let scriptFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: true, accept: \&quot;.js\&quot; })\r\n  \r\n\t  let scriptNames = _.map(scriptFiles, (f) =&gt; {\r\n\t\treturn _.split(f.name, &apos;.&apos;)[0]\r\n\t  })\r\n  \r\n\t  let scriptContents = await UiUtils.IafLocalFile.loadFiles(scriptFiles)\r\n  \r\n\t  let scripts = _.zip(scriptNames, scriptContents)\r\n  \r\n\t  let scriptDefs = _.map(scripts, (s) =&gt; {\r\n\t\treturn { scriptName: s[0], scriptContent: s[1] }\r\n\t  })\r\n\t  console.log(scriptDefs)\r\n  \r\n\t  let scriptItems = []\r\n\t  scriptDefs.forEach((c) =&gt; {\r\n\t\tlet item = _.find(scriptsDescriptors, { _shortName: c.scriptName })\r\n\t\tif (item) {\r\n\t\t  item._version = { _userData: c.scriptContent };\r\n\t\t  item._namespaces = proj._namespaces\r\n\t\t  scriptItems.push(item)\r\n\t\t}\r\n\t  })\r\n  \r\n\t  let results = await PlatformApi.IafScripts.create(scriptItems, ctx);\r\n\t  if (results &amp;&amp; results._list) {\r\n\t\tresults = results._list;\r\n\t  }\r\n\t  return results\r\n\t},\r\n  \r\n\t//Creates or recreates the bimpk uploader datasource orchestrator to the project\r\n\t//If it is already added to the project it will be removed then readded\r\n\t//If you need to make changes to the datasource then  make the changes here\r\n\t//and run this script again\r\n\tasync createOrRecreateBIMPKDatasource(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, IafScriptEngine } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  const query = {\r\n\t\t_namespaces: proj._namespaces,\r\n\t\t_userType: \&quot;bimpk_uploader\&quot;\r\n\t  };\r\n  \r\n\t  const datasources = await PlatformApi.IafPassSvc.getDatasources(query, ctx);\r\n  \r\n\t  const filteredDatasources = _.filter(datasources, d =&gt; d._userType === \&quot;bimpk_uploader\&quot;\r\n\t\t&amp;&amp; d._name === \&quot;BIMPK Uploader\&quot;);\r\n  \r\n\t  _.each(filteredDatasources, async datasource =&gt; await PlatformApi.IafPassSvc.removeDatasource({ orchId: datasource.id }, ctx));\r\n  \r\n\t  let datasourceResult = await PlatformApi.IafPassSvc.addDatasource(\r\n\t\t{\r\n\t\t  _name: \&quot;BIMPK Uploader\&quot;,\r\n\t\t  _description: \&quot;Orchestrator to upload model from BIMPK file\&quot;,\r\n\t\t  _namespaces: proj._namespaces,\r\n\t\t  _userType: \&quot;bimpk_uploader\&quot;,\r\n\t\t  _params: {\r\n\t\t\ttasks: [\r\n\t\t\t  {\r\n\t\t\t\t_orchcomp: \&quot;default_script_target\&quot;,\r\n\t\t\t\t_name: \&quot;Copy space relationships from previous version\&quot;,\r\n\t\t\t\t_sequenceno: 8,\r\n\t\t\t\t\&quot;_actualparams\&quot;: {\r\n\t\t\t\t  \&quot;userType\&quot;: \&quot;iaf_bimpk_post_imp\&quot;,\r\n\t\t\t\t  \&quot;relatedUserType\&quot;: \&quot;iaf_ext_space_coll\&quot;,\r\n\t\t\t\t  \&quot;_scriptName\&quot;: \&quot;bimpkPostUpload\&quot;\r\n\t\t\t\t}\r\n\t\t\t  },\r\n\t\t\t  {\r\n\t\t\t\t_orchcomp: \&quot;default_script_target\&quot;,\r\n\t\t\t\t_name: \&quot;Copy assets relationships from previous version\&quot;,\r\n\t\t\t\t_sequenceno: 7,\r\n\t\t\t\t\&quot;_actualparams\&quot;: {\r\n\t\t\t\t  \&quot;userType\&quot;: \&quot;iaf_bimpk_post_imp\&quot;,\r\n\t\t\t\t  \&quot;relatedUserType\&quot;: \&quot;iaf_ext_asset_coll\&quot;,\r\n\t\t\t\t  \&quot;_scriptName\&quot;: \&quot;bimpkPostUpload\&quot;\r\n\t\t\t\t}\r\n\t\t\t  },\r\n\t\t\t  {\r\n\t\t\t\tname: \&quot;folder_cleaner_target\&quot;,\r\n\t\t\t\t_sequenceno: 6\r\n\t\t\t  },\r\n\t\t\t  {\r\n\t\t\t\tname: \&quot;scz_relations_target\&quot;,\r\n\t\t\t\t_sequenceno: 5\r\n\t\t\t  },\r\n        {\r\n          name: \&quot;default_script_target\&quot;,\r\n          \&quot;_actualparams\&quot;: {\r\n            \&quot;userType\&quot;: \&quot;iaf_bimpk_upload\&quot;,\r\n            \&quot;_scriptName\&quot;: \&quot;createModelDataCache\&quot;\r\n          },\r\n          _sequenceno: 4\r\n        },\r\n\t\t\t  {\r\n\t\t\t\tname: \&quot;default_script_target\&quot;,\r\n\t\t\t\t\&quot;_actualparams\&quot;: {\r\n\t\t\t\t  \&quot;userType\&quot;: \&quot;iaf_bimpk_upload\&quot;,\r\n\t\t\t\t  \&quot;_scriptName\&quot;: \&quot;uploadBimpk\&quot;\r\n\t\t\t\t},\r\n\t\t\t\t_sequenceno: 3\r\n\t\t\t  },\r\n\t\t\t  {\r\n\t\t\t\tname: \&quot;bimpk_element_extractor\&quot;,\r\n\t\t\t\t_sequenceno: 2\r\n\t\t\t  },\r\n\t\t\t  {\r\n\t\t\t\tname: \&quot;bimpk_file_extractor\&quot;,\r\n\t\t\t\t_sequenceno: 1\r\n\t\t\t  }\r\n  \r\n\t\t\t]\r\n\t\t  }\r\n\t\t}, ctx\r\n\t  )\r\n\t  return datasourceResult;\r\n\t},\r\n  \r\n\t//Creates or recreates the sgpk uploader datasource orchestrator to the project\r\n\t//If it is already added to the project it will be removed then readded\r\n\t//If you need to make changes to the datasource then  make the changes here\r\n\t//and run this script again\r\n\tasync createOrRecreateSGPKDatasource(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, IafScriptEngine } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  const query = {\r\n\t\t_namespaces: proj._namespaces,\r\n\t\t_userType: \&quot;sgpk_uploader\&quot;\r\n\t  };\r\n  \r\n\t  const datasources = await PlatformApi.IafPassSvc.getDatasources(query, ctx);\r\n  \r\n\t  const filteredDatasources = _.filter(datasources, d =&gt; d._userType === \&quot;sgpk_uploader\&quot;\r\n\t\t&amp;&amp; d._name === \&quot;SGPK Uploader\&quot;);\r\n  \r\n\t  _.each(filteredDatasources, async datasource =&gt; await PlatformApi.IafPassSvc.removeDatasource({ orchId: datasource.id }, ctx));\r\n  \r\n\t  let datasourceResult = await PlatformApi.IafPassSvc.addDatasource(\r\n\t\t{\r\n\t\t  _name: \&quot;SGPK Uploader\&quot;,\r\n\t\t  _description: \&quot;Orchestrator to upload model from SGPK file\&quot;,\r\n\t\t  _namespaces: proj._namespaces,\r\n\t\t  _userType: \&quot;sgpk_uploader\&quot;,\r\n\t\t  _params: {\r\n\t\t\ttasks: [\r\n\t\t\t  {\r\n\t\t\t\tname: \&quot;scz_relations_target\&quot;,\r\n\t\t\t\t_sequenceno: 3\r\n\t\t\t  },\r\n\t\t\t  {\r\n\t\t\t\tname: \&quot;default_script_target\&quot;,\r\n\t\t\t\t\&quot;_actualparams\&quot;: {\r\n\t\t\t\t  \&quot;userType\&quot;: \&quot;iaf_sgpk_upload\&quot;,\r\n\t\t\t\t  \&quot;_scriptName\&quot;: \&quot;uploadSGPK\&quot;\r\n\t\t\t\t},\r\n\t\t\t\t_sequenceno: 2\r\n\t\t\t  },\r\n\t\t\t  {\r\n\t\t\t\tname: \&quot;generic_compressed_file_extractor\&quot;,\r\n\t\t\t\t_sequenceno: 1\r\n\t\t\t  }\r\n\t\t\t]\r\n\t\t  }\r\n\t\t}, ctx\r\n\t  )\r\n\t  return datasourceResult;\r\n\t},\r\n  \r\n\t//Creates or recreates the remap model and assets datasource orchestrator to the project\r\n\t//If it is already added to the project it will be removed then readded\r\n\t//If you need to make changes to the datasource then  make the changes here\r\n\t//and run this script again\r\n\tasync createOrRecreateRemapElementsTypeDatasource(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, IafScriptEngine } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  const query = {\r\n\t\t_namespaces: proj._namespaces,\r\n\t\t_userType: \&quot;map_elements_type\&quot;\r\n\t  };\r\n  \r\n\t  const datasources = await PlatformApi.IafPassSvc.getDatasources(query, ctx);\r\n  \r\n\t  const filteredDatasources = _.filter(datasources, d =&gt; d._userType === \&quot;map_elements_type\&quot;\r\n\t\t&amp;&amp; d._name === \&quot;Map Elements type\&quot;);\r\n  \r\n\t  _.each(filteredDatasources, async datasource =&gt; await PlatformApi.IafPassSvc.removeDatasource({ orchId: datasource.id }, ctx));\r\n  \r\n\t  let datasourceResult = await PlatformApi.IafPassSvc.addDatasource(\r\n\t\t{\r\n\t\t  _name: \&quot;Map Elements type\&quot;,\r\n\t\t  _description: \&quot;Orchestrator to map elements to dtCategory and dtType from type map coll\&quot;,\r\n\t\t  _namespaces: proj._namespaces,\r\n\t\t  _userType: \&quot;map_elements_type\&quot;,\r\n\t\t  _params: {\r\n\t\t\ttasks: [\r\n\t\t\t  {\r\n\t\t\t\t_orchcomp: \&quot;default_script_target\&quot;,\r\n\t\t\t\t_name: \&quot;Map type map to elements\&quot;,\r\n\t\t\t\t_sequenceno: 1,\r\n\t\t\t\t\&quot;_actualparams\&quot;: {\r\n\t\t\t\t  \&quot;userType\&quot;: \&quot;iaf_map_elms_type\&quot;,\r\n\t\t\t\t  \&quot;_scriptName\&quot;: \&quot;mapAssetCollection\&quot;\r\n\t\t\t\t}\r\n\t\t\t  }\r\n\t\t\t]\r\n\t\t  }\r\n\t\t}, ctx\r\n\t  )\r\n\t  return datasourceResult;\r\n\t},\r\n  \r\n\t//Creates or recreates the dtCategory/dtType def collection\r\n\tasync typeMapLoader(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, UiUtils } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  let xlsxFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; })\r\n\t  let typeWorkbook = await UiUtils.IafDataPlugin.readXLSXFiles(xlsxFiles)\r\n\t  let wbJSON = UiUtils.IafDataPlugin.workbookToJSON(typeWorkbook[0])\r\n\t  let iaf_dt_grid_data = wbJSON.Sheet1\r\n\t  let iaf_dt_grid_as_objects = UiUtils.IafDataPlugin.parseGridData({ gridData: iaf_dt_grid_data })\r\n  \r\n\t  let atm_defs_coll = await PlatformApi.IafPassSvc.createOrRecreateCollection(\r\n\t\t{\r\n\t\t  _name: &apos;ATM Def Collection&apos;,\r\n\t\t  _shortName: &apos;typemap_defs&apos;,\r\n\t\t  _namespaces: proj._namespaces,\r\n\t\t  _description: &apos;Asset Type Map Collection&apos;,\r\n\t\t  _userType: &apos;iaf_dt_type_map_defs_coll&apos;\r\n\t\t}, ctx)\r\n\r\n\t\tconsole.log(\&quot;Type Map Collection\&quot;, atm_defs_coll)\r\n  \r\n\t  let atm_defs_items_res = await PlatformApi.IafPassSvc.createItemsBulk({\r\n\t\t_userItemId: atm_defs_coll._userItemId,\r\n\t\t_namespaces: proj._namespaces,\r\n\t\titems: iaf_dt_grid_as_objects\r\n\t  }, ctx)\r\n  \r\n\t  return atm_defs_items_res\r\n\t},\r\n  \r\n\t//Creates or recreates the file attribute collection and populates it with items from an xlsx\r\n\t//You can run this multiple times to continue to update file attributes\r\n\tasync fileAttributeLoader(input, libraries, ctx) {\r\n  \r\n\t\tlet { PlatformApi, UiUtils } = libraries\r\n\t\r\n\t\tlet proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n\t\r\n\t\tlet xlsxFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; })\r\n\t\tlet typeWorkbook = await UiUtils.IafDataPlugin.readXLSXFiles(xlsxFiles)\r\n\t\tconsole.log(typeWorkbook)\r\n\t\tlet wbJSON = UiUtils.IafDataPlugin.workbookToJSON(typeWorkbook[0])\r\n\t\tconsole.log(wbJSON)\r\n\t\tlet iaf_dt_grid_data = wbJSON[&apos;Document Attributes&apos;]\r\n\t\tconsole.log(iaf_dt_grid_data)\r\n\r\n\t\tlet iaf_dt_grid_as_objects = UiUtils.IafDataPlugin.parseGridData(\r\n\t\t  { gridData: iaf_dt_grid_data, options: { asColumns: true } })\r\n\r\n\t\t  console.log(\&quot;iaf_dt_grid_as_objects\&quot;,iaf_dt_grid_as_objects)\r\n\t\r\n\t\tlet file_attrib_coll = await PlatformApi.IafPassSvc.createOrRecreateCollection(\r\n\t\t  {\r\n\t\t\t_name: \&quot;FDM File Attrib Collection\&quot;,\r\n\t\t\t_shortName: \&quot;devConfigfileattrib\&quot;,\r\n\t\t\t_namespaces: proj._namespaces,\r\n\t\t\t_description: \&quot;FDM File Attribute Collection\&quot;,\r\n\t\t\t_userType: \&quot;iaf_cde_file_attrib_coll\&quot;\r\n\t\t  }, ctx)\r\n  \r\n\t\t  console.log(\&quot;file_attrib_coll\&quot;,file_attrib_coll)\r\n\t\r\n\t\tlet file_attribs = await PlatformApi.IafPassSvc.createItems({\r\n\t\t  _userItemId: file_attrib_coll._userItemId,\r\n\t\t  _namespaces: proj._namespaces,\r\n\t\t  items: iaf_dt_grid_as_objects\r\n\t\t}, ctx)\r\n\t   \r\n\t\treturn file_attribs\r\n\t},\r\n  \r\n\t//Creates or recreates the text search index for file containers\r\n\t//if more file containers are created, add them here\r\n\tasync createOrRecreateFileItemIndex(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, IafScriptEngine } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  let root_file_cont = await PlatformApi.IafPassSvc.getFileCollection({\r\n\t\t_userType: \&quot;file_container\&quot;,\r\n\t\t_shortName: \&quot;Root Container\&quot;\r\n\t  }, ctx)\r\n  \r\n\t  let index = await PlatformApi.IafPassSvc.createOrRecreateIndex({\r\n\t\t_id: root_file_cont._id,\r\n\t\tindexDefs: [\r\n\t\t  {\r\n\t\t\tkey: {\r\n\t\t\t  name: \&quot;text\&quot;,\r\n\t\t\t  \&quot;fileAttributes.Document Type\&quot;: \&quot;text\&quot;,\r\n\t\t\t  \&quot;fileAttributes.Originator\&quot;: \&quot;text\&quot;,\r\n\t\t\t  \&quot;fileAttributes.dtCategory\&quot;: \&quot;text\&quot;,\r\n\t\t\t  \&quot;fileAttributes.dtType\&quot;: \&quot;text\&quot;\r\n\t\t\t},\r\n\t\t\toptions: {\r\n\t\t\t  name: \&quot;devConfig_ts_index\&quot;,\r\n\t\t\t  default_language: \&quot;english\&quot;\r\n\t\t\t}\r\n\t\t  }\r\n\t\t]\r\n\t  }, ctx)\r\n  \r\n\t  return index\r\n\t},\r\n  \r\n\t//Uploads a BIMPKFile to the File Service in the project&apos;s root folder\r\n\t//TO DO: hopefully be able to give custom onProgress and onSuccess callbacks to uploadFile\r\n\tasync uploadBIMPKFile(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, UiUtils } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  let selectFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.bimpk\&quot; })\r\n\t  if (!ctx._namespaces) {\r\n\t\tctx._namespaces = proj._namespaces\r\n\t  }\r\n  \r\n\t  let uploadedFile = await PlatformApi.IafPassSvc.uploadFile(selectFiles[0], ctx)\r\n  \r\n\t},\r\n  \r\n\t//Uploads a SGPKFile to the File Service in the project&apos;s root folder\r\n\t//TO DO: hopefully be able to give custom onProgress and onSuccess callbacks to uploadFile\r\n\tasync uploadSGPKFile(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, UiUtils } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  let selectFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.sgpk\&quot; })\r\n\t  if (!ctx._namespaces) {\r\n\t\tctx._namespaces = proj._namespaces\r\n\t  }\r\n  \r\n\t  let uploadedFile = await PlatformApi.IafPassSvc.uploadFile(selectFiles[0], ctx)\r\n  \r\n\t},\r\n  \r\n\t//Uploads project data sheet to the File Service in the project&apos;s root folder\r\n\t//TO DO: hopefully be able to give custom onProgress and onSuccess callbacks to uploadFile\r\n\tasync uploadDataSheet(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, UiUtils } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  let selectFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; })\r\n\t  if (!ctx._namespaces) {\r\n\t\tctx._namespaces = proj._namespaces\r\n\t  }\r\n  \r\n\t  let uploadedFile = await PlatformApi.IafPassSvc.uploadFile(selectFiles[0], ctx)\r\n  \r\n\t},\r\n  \r\n\t//Imports the latest version of the first bimpk found in the project\r\n\t//Will not work if mroe than one bimpk (with different names) are in the project\\\r\n\t//Will error if that version has already been imported\r\n\tasync importBimpkFile(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, IafScriptEngine } = libraries\r\n  \r\n\t  //get bimpks files from file svc\r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx);\r\n\t  let bimpkCriteria = {\r\n\t\t_namespaces: proj._namespaces,\r\n\t\t_parents: &apos;root&apos;,\r\n\t\t_name: &apos;.*bimpk&apos;\r\n\t  }\r\n  \r\n\t  let getBimpks = await PlatformApi.IafFileSvc.getFiles(bimpkCriteria, ctx, { _pageSize: 100 });\r\n\t  let bimpk = getBimpks._list[0];\r\n  \r\n\t  console.log(`bimpk`, bimpk)\r\n  \r\n\t  let getVersions = await PlatformApi.IafFileSvc.getFileVersions(bimpk._id, ctx);\r\n\t  let version = _.find(getVersions._list, { _version: bimpk._tipVersion })\r\n\t  console.log(`version`, version)\r\n  \r\n\t  //get the bimpk import orchestrator\r\n\t  let bimpkOrch;\r\n\t  let datasources = await PlatformApi.IafDataSource.getOrchestrators(null, ctx);\r\n  \r\n\t  if (datasources) {\r\n\t\tbimpkOrch = _.find(datasources._list, { _userType: &apos;bimpk_uploader&apos; });\r\n\t  } else {\r\n\t\tbimpkOrch = null;\r\n\t  }\r\n  \r\n\t  console.log(`bimpkOrch`, bimpkOrch);\r\n  \r\n\t  //get the orchestrator step to pass parameters\r\n\t  let task = _.find(bimpkOrch.orchsteps, { _name: &apos;bimpk_file_extractor&apos; });\r\n\t  let seqTypeId = task._compid;\r\n  \r\n\t  //add params for the step\r\n\t  let req = {\r\n\t\torchestratorId: bimpkOrch.id,\r\n\t\t_actualparams: [\r\n\t\t  {\r\n\t\t\tsequence_type_id: seqTypeId,\r\n\t\t\tparams: {\r\n\t\t\t  _fileId: bimpk._id,\r\n\t\t\t  _fileVersionId: version._id\r\n\t\t\t}\r\n\t\t  }\r\n\t\t]\r\n\t  };\r\n\t  console.log(req)\r\n\t  //run orchestrator\r\n\t  let result = await PlatformApi.IafDataSource.runOrchestrator(bimpkOrch.id, req, ctx);\r\n  \r\n\t  let orchRunResult = await PlatformApi.IafDataSource.getOrchRunStatus(result.id, ctx);\r\n\t  console.log(`orchRunResult`, orchRunResult[0].orchrunsteps)\r\n  \r\n\t  let orchStepRunStatus = orchRunResult[0].orchrunsteps;\r\n  \r\n\t  //poll based on in run id until finished\r\n\t  let interval = setInterval(async () =&gt; {\r\n\t\tlet errStatus = _.filter(orchStepRunStatus, run_status =&gt; {\r\n\t\t  return run_status._status === \&quot;ERROR\&quot;;\r\n\t\t});\r\n\t\tlet queuedStatus = _.filter(orchStepRunStatus, run_status =&gt; {\r\n\t\t  return run_status._status === \&quot;QUEUED\&quot;;\r\n\t\t});\r\n\t\tlet runningStatus = _.filter(orchStepRunStatus, run_status =&gt; {\r\n\t\t  return run_status._status === \&quot;RUNNING\&quot;;\r\n\t\t});\r\n  \r\n\t\tconsole.log(`errStatus`, errStatus)\r\n\t\tconsole.log(`queuedStatus`, queuedStatus)\r\n\t\tconsole.log(`runningStatus`, runningStatus)\r\n  \r\n\t\tif (!_.isEmpty(errStatus) || (_.isEmpty(queuedStatus) &amp;&amp; _.isEmpty(runningStatus))) {\r\n  \r\n\t\t  if (_.isEmpty(errStatus)) {\r\n\t\t\torchStepRunStatus.forEach((step) =&gt; step.status = &apos;COMPLETED&apos;);\r\n\t\t  }\r\n  \r\n\t\t  //when import is complete kill the polling\r\n\t\t  clearInterval(interval);\r\n  \r\n\t\t  //reset the currently selected model to the one we just imported\r\n\t\t  //note: this is kept on the app itself - thus the setSelectedItems\r\n\t\t  //not on the local state of the page\r\n\t\t}\r\n\t\torchRunResult = await PlatformApi.IafDataSource.getOrchRunStatus(result.id, ctx);\r\n\t\torchStepRunStatus = orchRunResult[0].orchrunsteps;\r\n\t  }, 10000);\r\n  \r\n\t  console.log(`orchRunResult`, orchStepRunStatus)\r\n\t},\r\n  \r\n\t//Imports a spreadsheet of assets to create and relates assets to model elements (if model exists)\r\n\t//Can be rerun to delete and recreate asset collection and reimport assets\r\n\tasync importModeledAssets(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, UiUtils } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  let xlsxFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; })\r\n  \r\n\t  let typeWorkbook = await UiUtils.IafDataPlugin.readXLSXFiles(xlsxFiles)\r\n\t  let wbJSON = UiUtils.IafDataPlugin.workbookToJSON(typeWorkbook[0])\r\n\t  const iaf_dt_grid_data = wbJSON[\&quot;Property Info\&quot;];\r\n\t  if (!iaf_dt_grid_data) {\r\n\t\tconsole.log(\&quot;Property Info Tab Missing\&quot;);\r\n\t  }\r\n\r\n\t  let iaf_dt_grid_data_value = wbJSON.Assets\r\n\r\n\t  let iaf_dt_grid_as_objects = UiUtils.IafDataPlugin.parseGridData({ gridData: iaf_dt_grid_data_value });\r\n\t  console.log(iaf_dt_grid_as_objects,\&quot;iaf_dt_grid_as_objects\&quot;)\r\n\t  \r\n\t  let data_as_objects = UiUtils.IafDataPlugin.parseGridData({ gridData: iaf_dt_grid_data });\r\n\t  console.log(data_as_objects,\&quot;data_as_objects\&quot;)\r\n\r\n\t  //filter out those rows with no Asset Name\r\n\t  let assetRows = _.filter(iaf_dt_grid_as_objects, (row) =&gt; _.size(row[&apos;Asset Name&apos;]) &gt; 0)\r\n  \r\n\t  let assetObjects = _.map(iaf_dt_grid_as_objects,row=&gt;{\r\n\t\tlet props = {} \r\n\t\tdata_as_objects.forEach (info =&gt; {\r\n\t\t\tprops[info.Property] = { \r\n\t\t\t\tdName: info.Property,\r\n\t\t\t\tsrcPropName: info.Property,\r\n\t\t\t\tval: row[info.Property],\r\n\t\t\t\tuom: info.uom,\r\n\t\t\t\ttype: info.Type,\r\n\t\t\t\tepoch: info.Type === \&quot;date\&quot; ? UiUtils.IafDataPlugin.convertToEpoch(row[info.Property]) : undefined\r\n\t\t\t}\r\n\t\t})\r\n\t\t\r\n        return {\r\n            \&quot;Asset Name\&quot;: row[\&quot;Asset Name\&quot;],\r\n            properties:Object.assign({}, props)\r\n        }\r\n      })\r\n      console.log(assetObjects,\&quot;assetObjects\&quot;)\r\n  \r\n\t  let asset_coll = await PlatformApi.IafPassSvc.createOrRecreateCollection({\r\n\t\t_name: &apos;Asset Collection&apos;,\r\n\t\t_shortName: &apos;asset_coll&apos;,\r\n\t\t_namespaces: proj._namespaces,\r\n\t\t_description: &apos;Physical Asset Collection&apos;,\r\n\t\t_userType: &apos;iaf_ext_asset_coll&apos;\r\n\t  }, ctx)\r\n  \r\n\t  console.log(\&quot;asset_coll\&quot;, asset_coll)\r\n  \r\n\t  let asset_items_res = await PlatformApi.IafPassSvc.createItemsBulk(\r\n\t\t{\r\n\t\t  _userItemId: asset_coll._userItemId,\r\n\t\t  _namespaces: proj._namespaces,\r\n\t\t  items: assetObjects\r\n\t\t}, ctx\r\n\t  )\r\n\r\n\t  console.log(\&quot;asset_items_res\&quot;, asset_items_res)\r\n  \r\n\t  let asset_query = {\r\n\t\tquery: {},\r\n\t\t_userItemId: asset_coll._userItemId,\r\n\t\toptions: {\r\n\t\t  project: { \&quot;Asset Name\&quot;: 1, _id: 1 },\r\n\t\t  page: { getAllItems: true },\r\n\t\t  sort: { \&quot;_id\&quot;: 1 }\r\n\t\t}\r\n\t  }\r\n  \r\n\t  let all_assets = await PlatformApi.IafPassSvc.getItems(\r\n\t\tasset_query, ctx\r\n\t  )\r\n  \r\n\t  //Find revitGuid and store in sourceIds array for each asset.\r\n\t  //Because revitGuid is under asset.property, it&apos;s probably easier to fill them from\r\n\t  //assetRows by finding matching \&quot;Asset Name\&quot;\r\n\t  let assetsWithSourceIds = _.map(all_assets, (asset) =&gt; {\r\n\t\tlet sourceIds = []\r\n\t\tlet row = _.find(assetRows, [\&quot;Asset Name\&quot;, asset[\&quot;Asset Name\&quot;]])\r\n\t\tif (row) {\r\n\t\t  sourceIds.push(row.revitGuid)\r\n\t\t}\r\n\t\tasset.sourceIds = sourceIds\r\n\t\treturn asset\r\n\t  })\r\n  \r\n\t  console.log(\&quot;assetsWithSourceIds\&quot;)\r\n\t  console.log(assetsWithSourceIds)\r\n  \r\n\t  let nfallSourceIds = _.map(assetsWithSourceIds, &apos;sourceIds&apos;)\r\n  \r\n\t  console.log(\&quot;nfallSourceIds\&quot;)\r\n\t  console.log(nfallSourceIds)\r\n  \r\n\t  let allSourceIds = _.flatten(nfallSourceIds)\r\n  \r\n\t  console.log(\&quot;allSourceIds\&quot;)\r\n\t  console.log(allSourceIds)\r\n\r\n\t\tlet currentModel = await PlatformApi.IafPassSvc.getCompositeCollection(\r\n\t\t\t{ query: { \&quot;_userType\&quot;: \&quot;bim_model_version\&quot;, \&quot;_namespaces\&quot;: { \&quot;$in\&quot;: proj._namespaces }, \&quot;_itemClass\&quot;: \&quot;NamedCompositeItem\&quot; } }, ctx, { getLatestVersion: true }\r\n\t\t)\r\n\r\n\t\tconsole.log(\&quot;currentModel\&quot;,JSON.stringify(currentModel))\r\n\r\n\t\tif (!currentModel) return \&quot;Created Assets. No Model Present\&quot;\r\n\t\t\r\n\t\tlet model_els_coll = await PlatformApi.IafPassSvc.getCollectionInComposite(\r\n\t\t\tcurrentModel._userItemId, { _userType: \&quot;rvt_elements\&quot;},\r\n\t\tctx\r\n\t\t)\r\n\r\n\t\tconsole.log(\&quot;model_els_coll\&quot;,model_els_coll)\r\n      \r\n\t\tlet platformIdList = await PlatformApi.IafPassSvc.findInCollectionsByPropValuesBulk(\r\n\t\t\t{\r\n\t\t\tqueryProp: { prop: \&quot;source_id\&quot;, values: allSourceIds },\r\n\t\t\tcollectionDesc: {\r\n\t\t\t\t_userType: model_els_coll._userType,\r\n\t\t\t\t_userItemId: model_els_coll._userItemId\r\n\t\t\t},\r\n\t\t\toptions: {\r\n\t\t\t\tproject: { platformId: 1, source_id: 1 },\r\n\t\t\t\tpage: { getAllItems: true, getPageInfo: true },\r\n\t\t\t\tchunkSize: 50\r\n\t\t\t}\r\n\t\t\t}, ctx\r\n\t\t)\r\n  \r\n\t\tconsole.log(\&quot;platformIdList\&quot;)\r\n\t\tconsole.log(platformIdList)\r\n  \r\n\t  \tassetsWithSourceIds = assetsWithSourceIds.filter(a =&gt; a.sourceIds.length &gt; 0)\r\n  \r\n\t\tlet assetsWithPlatformIds = _.map(assetsWithSourceIds, (asset) =&gt; {\r\n\t\t\tlet platformIds = []\r\n\t\t\t//let ids = _.find(platformIdList._list, _.get([\&quot;source_id\&quot;, asset.sourceIds.length &gt; 0 ? asset.sourceIds[0], undefined]))\r\n\t\t\tlet ids = _.find(platformIdList._list, {source_id: asset.sourceIds[0]})\r\n\t\t\tplatformIds.push({ _id: ids ? ids._id : undefined })\r\n\t\t\tasset.platformIds = platformIds\r\n\t\t\treturn asset\r\n\t\t})\r\n  \r\n\t\tconsole.log(\&quot;assetsWithPlatformIds\&quot;)\r\n\t\tconsole.log(assetsWithPlatformIds)\r\n  \r\n\t\t//assetsWithPlatformIdArray is not needed as it produces the same array\r\n\t\t//since platformIds is already an array\r\n  \r\n\t\tlet relatedItems = _.map(assetsWithPlatformIds, (related) =&gt; {\r\n\t\t\tlet obj = {\r\n\t\t\tparentItem: { _id: related._id },\r\n\t\t\trelatedItems: related.platformIds\r\n\t\t\t}\r\n\t\t\treturn obj\r\n\t\t})\r\n  \r\n\t  console.log(\&quot;relatedItems\&quot;)\r\n\t  console.log(relatedItems)\r\n  \r\n\t\tlet result = await PlatformApi.IafPassSvc.createRelations(\r\n\t\t\t{\r\n\t\t\tparentUserItemId: asset_coll._userItemId,\r\n\t\t\t_userItemId: model_els_coll._userItemId,\r\n\t\t\t_namespaces: proj._namespaces,\r\n\t\t\trelations: relatedItems\r\n\t\t\t}, ctx\r\n\t\t)\r\n  \r\n\t\tconsole.log(&apos;Import of Model Assets Complete&apos;)\r\n\t\tconsole.log(result)\r\n  \r\n\t  \treturn result\r\n\t},\r\n\r\n\t\r\n  \r\n\t//Creates or recreates the index on the asset collection\r\n\t//Can be rerun many times with changes ot the index\r\n\tasync createOrRecreateAssetIndex(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, IafScriptEngine } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  let asset_coll = await PlatformApi.IafPassSvc.getCollection(\r\n\t\t{\r\n\t\t  _userType: \&quot;iaf_ext_asset_coll\&quot;,\r\n\t\t  _shortName: \&quot;asset_coll\&quot;,\r\n\t\t  _itemClass: \&quot;NamedUserCollection\&quot;,\r\n\t\t}, ctx\r\n\t  )\r\n  \r\n\t  let indexRes = await PlatformApi.IafPassSvc.createOrRecreateIndex(\r\n\t\t{\r\n\t\t  _id: asset_coll._id,\r\n\t\t  indexDefs: [\r\n\t\t\t{\r\n\t\t\t  key: {\r\n\t\t\t\t\&quot;Asset Name\&quot;: \&quot;text\&quot;,\r\n\t\t\t\t\&quot;properties.Mark.val\&quot;: \&quot;text\&quot;,\r\n\t\t\t\t\&quot;properties.Manufacturer.val\&quot;: \&quot;text\&quot;,\r\n\t\t\t\t\&quot;properties.Model.val\&quot;: \&quot;text\&quot;,\r\n\t\t\t\t\&quot;properties.dtCategory.val\&quot;: \&quot;text\&quot;,\r\n\t\t\t\t\&quot;properties.dtType.val\&quot;: \&quot;text\&quot;\r\n\t\t\t  },\r\n\t\t\t  options: {\r\n\t\t\t\t\&quot;name\&quot;: \&quot;text_search_index\&quot;,\r\n\t\t\t\t\&quot;default_language\&quot;: \&quot;english\&quot;\r\n\t\t\t  }\r\n\t\t\t}\r\n\t\t  ]\r\n\t\t}, ctx\r\n\t  )\r\n\t  return indexRes\r\n\t},\r\n  \r\n\t//Imports a spreadsheet of spaces to create and relates spaces to model elements (if model exists)\r\n\t//Can be rerun to delete and recreate space collection and reimport spaces\r\n\tasync importModeledSpaces(input, libraries, ctx) {\r\n  \r\n\t\tlet { PlatformApi, UiUtils } = libraries\r\n\t\r\n\t\tlet proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n\t\r\n\t\tlet xlsxFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; })\r\n\t\tlet typeWorkbook = await UiUtils.IafDataPlugin.readXLSXFiles(xlsxFiles)\r\n\t\tlet wbJSON = UiUtils.IafDataPlugin.workbookToJSON(typeWorkbook[0])\r\n\t\tlet iaf_dt_grid_data = wbJSON.Spaces\r\n\t\tlet iaf_dt_grid_as_objects = UiUtils.IafDataPlugin.parseGridData({ gridData: iaf_dt_grid_data })\r\n\t\r\n\t\t//filter out those rows with no space Name\r\n\t\tlet spaceRows = _.filter(iaf_dt_grid_as_objects, (row) =&gt; _.size(row[&apos;Space Name&apos;]) &gt; 0)\r\n\t\r\n\t\tlet spaceObjects = _.map(spaceRows, (space) =&gt; {\r\n\t\t  const spaceName = space[\&quot;Space Name\&quot;]\r\n\t\t  let spaceObj = {\r\n\t\t\t\&quot;Space Name\&quot;: spaceName,\r\n\t\t\tproperties: {\r\n\t\t\t  revitGuid: { val: _.trim(space[\&quot;revitGuid\&quot;]), dName: \&quot;revitGuid\&quot;, type: \&quot;text\&quot; },\r\n\t\t\t  \&quot;Revit Category\&quot;: { val: _.trim(space[\&quot;Revit Category\&quot;]), dName: \&quot;Revit Category\&quot;, type: \&quot;text\&quot; },\r\n\t\t\t  Area: { val: _.trim(space[\&quot;Area\&quot;]), dName: \&quot;Area\&quot;, type: \&quot;number\&quot;, uom: _.get(_.find(iaf_dt_grid_as_objects, obj =&gt; obj[\&quot;Space Name\&quot;] == spaceName), \&quot;Area_uom\&quot;) },\r\n\t\t\t  Perimeter: { val: _.trim(space[\&quot;Perimeter\&quot;]), dName: \&quot;Perimeter\&quot;, type: \&quot;number\&quot;, uom: _.get(_.find(iaf_dt_grid_as_objects, obj =&gt; obj[\&quot;Space Name\&quot;] == spaceName), \&quot;Perimeter_uom\&quot;) },\r\n\t\t\t  Type: { val: _.trim(space[\&quot;Type\&quot;]), dName: \&quot;Type\&quot;, type: \&quot;text\&quot; },\r\n\t\t\t  name: { val: _.trim(space[\&quot;name\&quot;]), dName: \&quot;Name\&quot;, type: \&quot;text\&quot; },\r\n\t\t\t  Floor: { val: _.trim(space[\&quot;level\&quot;]), dName: \&quot;Level\&quot;, type: \&quot;text\&quot; },\r\n\t\t\t  Number: { val: _.trim(space[\&quot;number\&quot;]), dName: \&quot;Number\&quot;, type: \&quot;text\&quot; },\r\n\t\t\t}\r\n\t\t  }\r\n\t\t  return spaceObj\r\n\t\t})\r\n\t\r\n\t\tlet space_coll = await PlatformApi.IafPassSvc.createOrRecreateCollection({\r\n\t\t  _name: &apos;Space Collection&apos;,\r\n\t\t  _shortName: &apos;space_coll&apos;,\r\n\t\t  _namespaces: proj._namespaces,\r\n\t\t  _description: &apos;Physical Space Collection&apos;,\r\n\t\t  _userType: &apos;iaf_ext_space_coll&apos;\r\n\t\t}, ctx)\r\n\r\n\t\tconsole.log(\&quot;space_coll\&quot;, space_coll)\r\n\t\r\n\t\tawait PlatformApi.IafPassSvc.createItemsBulk(\r\n\t\t\t{\r\n\t\t\t_userItemId: space_coll._userItemId,\r\n\t\t\t_namespaces: proj._namespaces,\r\n\t\t\titems: spaceObjects\r\n\t\t\t}, ctx\r\n\t\t)\r\n\r\n\t\tlet space_query = {\r\n\t\t  query: {},\r\n\t\t  _userItemId: space_coll._userItemId,\r\n\t\t  options: {\r\n\t\t\tproject: { \&quot;Space Name\&quot;: 1, _id: 1 },\r\n\t\t\tpage: { getAllItems: true },\r\n\t\t\tsort: { \&quot;_id\&quot;: 1 }\r\n\t\t  }\r\n\t\t}\r\n\t\r\n\t\tlet all_spaces = await PlatformApi.IafPassSvc.getItems(space_query, ctx)\r\n\t\r\n\t\tconsole.log(\&quot;all_spaces\&quot;, all_spaces)\r\n\t\r\n\t\t//Find revitGuid and store in sourceIds array for each space.\r\n\t\tlet spacesWithSourceIds = _.map(all_spaces, (space) =&gt; {\r\n\t\t  let sourceIds = []\r\n\t\t  let row = _.find(spaceRows, [\&quot;Space Name\&quot;, space[\&quot;Space Name\&quot;]])\r\n\t\t  if (row) {\r\n\t\t\tsourceIds.push(row.revitGuid)\r\n\t\t  }\r\n\t\t  space.sourceIds = sourceIds\r\n\t\t  return space\r\n\t\r\n\t\t})\r\n\t\r\n\t\tconsole.log(\&quot;spacesWithSourceIds\&quot;, spacesWithSourceIds)\r\n\t\r\n\t\tlet nfallSourceIds = _.map(spacesWithSourceIds, &apos;sourceIds&apos;)\r\n\t\r\n\t\tconsole.log(\&quot;nfallSourceIds\&quot;, nfallSourceIds)\r\n\t\r\n\t\tlet allSourceIds = _.flatten(nfallSourceIds)\r\n\t\r\n\t\tconsole.log(\&quot;allSourceIds\&quot;, allSourceIds)\r\n\r\n\t\tlet currentModel = await PlatformApi.IafPassSvc.getCompositeCollection(\r\n\t\t\t{ query: { \&quot;_userType\&quot;: \&quot;bim_model_version\&quot;, \&quot;_namespaces\&quot;: { \&quot;$in\&quot;: proj._namespaces }, \&quot;_itemClass\&quot;: \&quot;NamedCompositeItem\&quot; } }, ctx, { getLatestVersion: true })\r\n\t\t\tconsole.log(\&quot;currentModel\&quot;,JSON.stringify(currentModel))\r\n\t\t\tif (!currentModel) return \&quot;Created Spaces. No Model Present\&quot;\r\n\t\t\tlet model_els_coll = await PlatformApi.IafPassSvc.getCollectionInComposite(\r\n\t\t\tcurrentModel._userItemId, { _userType: \&quot;rvt_elements\&quot; },\r\n\t\t\tctx\r\n\t\t)\r\n\t\t  console.log(\&quot;model_els_coll\&quot;,model_els_coll)\r\n\t\r\n\t\tlet platformIdList = await PlatformApi.IafPassSvc.findInCollectionsByPropValuesBulk(\r\n\t\t  {\r\n\t\t\tqueryProp: { prop: \&quot;source_id\&quot;, values: allSourceIds },\r\n\t\t\tcollectionDesc: {\r\n\t\t\t  _userType: model_els_coll._userType,\r\n\t\t\t  _userItemId: model_els_coll._userItemId\r\n\t\t\t},\r\n\t\t\toptions: {\r\n\t\t\t  project: { platformId: 1, source_id: 1 },\r\n\t\t\t  page: { getAllItems: true, getPageInfo: true },\r\n\t\t\t  chunkSize: 50\r\n\t\t\t}\r\n\t\t  }, ctx\r\n\t\t)\r\n\t\r\n\t\tconsole.log(\&quot;platformIdList\&quot;, platformIdList)\r\n  \r\n\t\tspacesWithSourceIds = spacesWithSourceIds.filter(a =&gt; a.sourceIds.length &gt; 0)\r\n\t\r\n\t\tlet spacesWithPlatformIds = _.map(spacesWithSourceIds, (space) =&gt; {\r\n\t\t  let platformIds = []\r\n\t\t  let ids = _.find(platformIdList._list, {source_id: space.sourceIds[0]})\r\n\t\t  platformIds.push({ _id: ids ? ids._id : undefined })\r\n\t\t  space.platformIds = platformIds\r\n\t\t  return space\r\n\t\t})\r\n\t\r\n\t\tconsole.log(\&quot;spacesWithPlatformIds\&quot;, spacesWithPlatformIds)\r\n\t\r\n\t\tlet relatedItems = _.map(spacesWithPlatformIds, (related) =&gt; {\r\n\t\t  let obj = {\r\n\t\t\tparentItem: { _id: related._id },\r\n\t\t\trelatedItems: related.platformIds\r\n\t\t  }\r\n\t\t  return obj\r\n\t\t})\r\n\t\r\n\t\tconsole.log(\&quot;relatedItems\&quot;, relatedItems)\r\n  \r\n\t\tlet result = await PlatformApi.IafPassSvc.createRelations(\r\n\t\t  {\r\n\t\t\tparentUserItemId: space_coll._userItemId,\r\n\t\t\t_userItemId: model_els_coll._userItemId,\r\n\t\t\t_namespaces: proj._namespaces,\r\n\t\t\trelations: relatedItems\r\n\t\t  }, ctx\r\n\t\t)\r\n\t\r\n\t\tconsole.log(&apos;Import of Model Spaces Complete. result:&apos;)\r\n\t\tconsole.log(result)\r\n\t},\r\n  \r\n\t//Creates or recreates the index on the space collection\r\n\t//Can be rerun many times with changes to the index\r\n\tasync createOrRecreateSpacesIndex(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, IafScriptEngine } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  let space_coll = await PlatformApi.IafPassSvc.getCollection(\r\n\t\t{\r\n\t\t  _userType: \&quot;iaf_ext_space_coll\&quot;,\r\n\t\t  _shortName: \&quot;space_coll\&quot;,\r\n\t\t  _itemClass: \&quot;NamedUserCollection\&quot;,\r\n\t\t}, ctx\r\n\t  )\r\n  \r\n\t  let indexRes = await PlatformApi.IafPassSvc.createOrRecreateIndex(\r\n\t\t{\r\n\t\t  _id: space_coll._id,\r\n\t\t  indexDefs: [\r\n\t\t\t{\r\n\t\t\t  key: {\r\n\t\t\t\t\&quot;Space Name\&quot;: \&quot;text\&quot;,\r\n\t\t\t\t\&quot;properties.Name.val\&quot;: \&quot;text\&quot;\r\n\t\t\t  },\r\n\t\t\t  options: {\r\n\t\t\t\t\&quot;name\&quot;: \&quot;text_search_index\&quot;,\r\n\t\t\t\t\&quot;default_language\&quot;: \&quot;english\&quot;\r\n\t\t\t  }\r\n\t\t\t}\r\n\t\t  ]\r\n\t\t}, ctx\r\n\t  )\r\n\t  return indexRes\r\n\t},\r\n  \r\n\t//Imports extended data that will be matched to Assets by Type Mark, Mark, or Both\r\n\t//Can be rerun to wholesale replace a type of extended data\r\n\tasync importExtendedData(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, UiUtils } = libraries\r\n  \r\n\t  const proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  const xlsxFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; });\r\n\t  console.log(\&quot;xlsxFiles\&quot;, xlsxFiles);\r\n\t  const typeWorkbook = await UiUtils.IafDataPlugin.readXLSXFiles(xlsxFiles);\r\n\t  const wbJSON = UiUtils.IafDataPlugin.workbookToJSON(typeWorkbook[0]);\r\n  \r\n\t  const coll_data = _.get(wbJSON, \&quot;Collection Info\&quot;);\r\n\t  if (!coll_data) {\r\n\t\tconsole.log(\&quot;Collection Info Tab Missing\&quot;);\r\n\t  }\r\n  \r\n\t  const coll_data_objects = UiUtils.IafDataPlugin.parseGridData({ gridData: coll_data });\r\n\t  const collInfo = _.get(coll_data_objects, \&quot;0\&quot;);\r\n\t  console.log(\&quot;Collection Info\&quot;);\r\n\t  console.log(collInfo);\r\n  \r\n\t  const iaf_dt_grid_property_info_data = _.get(wbJSON, \&quot;Property Info\&quot;);\r\n\t  if (!iaf_dt_grid_property_info_data) {\r\n\t\tconsole.log(\&quot;Property Info Tab Missing\&quot;);\r\n\t  }\r\n\t  const iaf_dt_grid_property_info_data_objects = UiUtils.IafDataPlugin.parseGridData(\r\n\t\t{ gridData: iaf_dt_grid_property_info_data });\r\n\t  console.log(iaf_dt_grid_property_info_data_objects);\r\n  \r\n\t  const dataBySheet = _.map(_.groupBy(iaf_dt_grid_property_info_data_objects, dataObj =&gt; {\r\n\t\treturn dataObj[\&quot;sheet id\&quot;];\r\n\t  }), data =&gt; {\r\n\t\tlet res = { _id: _.get(data, \&quot;0.sheet id\&quot;), props: [] };\r\n\t\t_.forEach(data, v =&gt; {\r\n\t\t  let property = { prop: v.Property, type: v.Type };\r\n\t\t  if (v.uom) {\r\n\t\t\tproperty.uom = v.uom;\r\n\t\t  }\r\n\t\t  res.props.push(property);\r\n\t\t});\r\n\t\treturn res;\r\n\t  });\r\n\t  console.log(&apos;dataBySheet&apos;, dataBySheet);\r\n  \r\n\t  const dataWithWorkbookData = _.map(dataBySheet, sheetData =&gt; {\r\n\t\tconst wbJSONSheetDataById = _.get(wbJSON, sheetData._id);\r\n\t\tlet headers = _.take(wbJSONSheetDataById);\r\n\t\tsheetData.workbook = _.map(_.drop(wbJSONSheetDataById), d =&gt; {\r\n\t\t  return _.fromPairs(_.zip(headers[0], d));\r\n\t\t});\r\n\t\treturn sheetData;\r\n\t  });\r\n\t  console.log(&apos;dataWithWorkbookData&apos;, dataWithWorkbookData);\r\n  \r\n\t  const rowsWithPropData = _.map(dataWithWorkbookData, dataObj =&gt; {\r\n\t\treturn _.map(dataObj.workbook, d =&gt; {\r\n\t\t  return { _id: dataObj._id, props: dataObj.props, row: d };\r\n\t\t});\r\n\t  });\r\n\t  console.log(&apos;rowsWithPropData&apos;, rowsWithPropData);\r\n  \r\n\t  const rowsWithPropDataFlat = _.flatten(rowsWithPropData);\r\n\t  console.log(&apos;rowsWithPropDataFlat&apos;, rowsWithPropDataFlat);\r\n  \r\n\t  //Add the type of linking criteria to each row\r\n\t  //BOTH, TYPE for Type Mark, and MARK for Mark\r\n\t  //undefined if no conditions match\r\n\t  const withCriteria = _.map(rowsWithPropDataFlat, r =&gt; {\r\n\t\tconst row = r.row;\r\n\t\tconst mark = row.Mark;\r\n\t\tconst typeMark = row[\&quot;Type Mark\&quot;];\r\n\t\tconst criteria = mark &amp;&amp; typeMark ? \&quot;BOTH\&quot; : (mark ? \&quot;MARK\&quot; : (typeMark ? \&quot;TYPE\&quot; : undefined));\r\n\t\tr.criteria = criteria;\r\n\t\treturn r;\r\n\t  });\r\n\t  console.log(&apos;withCriteria&apos;, withCriteria);\r\n  \r\n\t  //FILTER OUT ANY ERRORS JUST IN CASE\r\n\t  const withCriteriaNoErrors = _.filter(withCriteria, wc =&gt; wc.criteria);\r\n\t  console.log(&apos;withCriteriaNoErrors - &apos;, withCriteriaNoErrors);\r\n  \r\n\t  const iaf_asset_collection = await PlatformApi.IafPassSvc.getCollection(\r\n\t\t{\r\n\t\t  _userType: \&quot;iaf_ext_asset_coll\&quot;,\r\n\t\t  _shortName: \&quot;asset_coll\&quot;,\r\n\t\t  _itemClass: \&quot;NamedUserCollection\&quot;,\r\n\t\t}, ctx\r\n\t  );\r\n\t  console.log(&apos;iaf_asset_collection&apos;, iaf_asset_collection);\r\n  \r\n\t  const assetQueries = _.map(withCriteriaNoErrors, data =&gt; {\r\n\t\tconst query = {};\r\n\t\tconst criteria = data.criteria;\r\n\t\tif (criteria === \&quot;MARK\&quot; || criteria === \&quot;BOTH\&quot;) {\r\n\t\t  query[\&quot;properties.Mark.val\&quot;] = _.get(data, \&quot;row.Mark\&quot;);\r\n\t\t}\r\n\t\tif (criteria === \&quot;TYPE\&quot; || criteria === \&quot;BOTH\&quot;) {\r\n\t\t  query[\&quot;properties.Type Mark.val\&quot;] = _.get(data, \&quot;row.Type Mark\&quot;);\r\n\t\t}\r\n\t\treturn {\r\n\t\t  query,\r\n\t\t  collectionDesc: {\r\n\t\t\t_itemClass: \&quot;NamedUserCollection\&quot;,\r\n\t\t\t_userType: iaf_asset_collection._userType,\r\n\t\t\t_userItemId: iaf_asset_collection._userItemId\r\n\t\t  },\r\n\t\t  options: { page: { getAllItems: true } }\r\n\t\t};\r\n\t  });\r\n\t  console.log(&apos;assetQueries&apos;, assetQueries);\r\n  \r\n\t  const assets = await PlatformApi.IafPassSvc.getItemsMulti(assetQueries, ctx);\r\n\t  console.log(&apos;assets&apos;, assets);\r\n  \r\n\t  //JUST REORGANIZE THINGS FOR EASIER USE\r\n\t  const rowsWithAssetsProcessed = _.map(withCriteriaNoErrors, (criObj, index) =&gt; {\r\n\t\tcriObj.rowAssets = assets[index];\r\n\t\treturn criObj;\r\n\t  });\r\n\t  console.log(&apos;rowsWithAssetsProcessed&apos;, rowsWithAssetsProcessed);\r\n  \r\n\t  //CREATE A NEW DATA OBJECT FOR EACH ASSET\r\n\t  const assetDataPairs = _.map(rowsWithAssetsProcessed, rec =&gt; {\r\n\t\trec.dataObjects = _.map(rec.rowAssets, ra =&gt; {\r\n\t\t  const data = {};\r\n\t\t  _.each(rec.props, prop =&gt; {\r\n\t\t\tconst dName = prop.prop;\r\n\t\t\tconst type = prop.type;\r\n\t\t\tconst val = _.get(rec, \&quot;row.\&quot; + dName);\r\n\t\t\tconst epoch = type === \&quot;date\&quot; ? UiUtils.IafDataPlugin.convertToEpoch(val) : undefined;\r\n\t\t\tdata[dName] = { dName, val, uom: prop.uom, type, epoch }\r\n\t\t  });\r\n\t\t  return { properties: data }\r\n\t\t});\r\n\t\treturn rec;\r\n\t  });\r\n\t  console.log(&apos;assetDataPairs&apos;, assetDataPairs);\r\n  \r\n\t  //GET THE FLAT LISTS OF THE DATA OBJECTS AND ASSETS\r\n\t  //IN THE SAME ORDER!\r\n\t  const flatAllAssets = _.flatten(_.map(assetDataPairs, adp =&gt; adp.rowAssets));\r\n\t  console.log(&apos;flatAllAssets&apos;, flatAllAssets);\r\n\t  const flatAllDataObjs = _.flatten(_.map(assetDataPairs, adp =&gt; adp.dataObjects));\r\n\t  console.log(&apos;flatAllDataObjs&apos;, flatAllDataObjs);\r\n  \r\n\t  //CREATE THE COLLECTION AND THE DATA OBJECTS\r\n\t  let data_obj_coll = await PlatformApi.IafPassSvc.createOrRecreateCollection(\r\n\t\t{\r\n\t\t  _name: collInfo.Name,\r\n\t\t  _shortName: collInfo.ShortName,\r\n\t\t  _namespaces: proj._namespaces,\r\n\t\t  _description: collInfo.Description,\r\n\t\t  _userType: collInfo.userType\r\n\t\t}, ctx\r\n\t  );\r\n\t  console.log(&apos;data_obj_coll&apos;, data_obj_coll);\r\n  \r\n\t  let data_obj_res = await PlatformApi.IafPassSvc.createItemsBulk({\r\n\t\t_userItemId: data_obj_coll._userItemId,\r\n\t\t_namespaces: proj._namespaces,\r\n\t\titems: flatAllDataObjs\r\n\t  }, ctx);\r\n\t  console.log(&apos;data_obj_res&apos;, data_obj_res);\r\n  \r\n\t  //CREATE ITEMS BULK DOESNT RETURN THE CREATED OBJECTS\r\n\t  //IT RETURNS URIS FOR THE OBJECTS\r\n\t  //SO GET ALL THOSE IN ONE LIST WHICH WE WILL USE\r\n\t  //TO GET THE NEW OBJECT IDS OFF THE END\r\n\t  const allURIs = _.flatten(_.map(data_obj_res[0], d =&gt; d._uris));\r\n\t  console.log(&apos;allURIs&apos;, allURIs);\r\n  \r\n\t  const dataObjIds = _.map(allURIs, u =&gt; _.last(_.split(u, &apos;/&apos;)));\r\n\t  console.log(&apos;dataObjIds&apos;, dataObjIds);\r\n  \r\n\t  //ZIP THE NEW DATA IDS WITH THE ASSETS\r\n\t  //THIS SHOULD BE IN THE CORRECT ORDER\r\n\t  const assetsWithDataIds = _.zip(flatAllAssets, dataObjIds);\r\n\t  console.log(&apos;assetsWithDataIds&apos;, assetsWithDataIds);\r\n  \r\n\t  //CREATE RELATIONS\r\n\t  const relatedItems = _.map(assetsWithDataIds, d =&gt; {\r\n\t\treturn {\r\n\t\t  parentItem: d[0],\r\n\t\t  relatedItems: [{ _id: d[1] }]\r\n\t\t}\r\n\t  });\r\n\t  console.log(&apos;relatedItems&apos;, relatedItems);\r\n  \r\n\t  const relations = await PlatformApi.IafPassSvc.createRelations(\r\n\t\t{\r\n\t\t  parentUserItemId: iaf_asset_collection._userItemId,\r\n\t\t  _userItemId: data_obj_coll._userItemId,\r\n\t\t  _namespaces: proj._namespaces,\r\n\t\t  relations: relatedItems\r\n\t\t}, ctx\r\n\t  );\r\n\t  console.log(&apos;relations&apos;, relations);\r\n  \r\n\t  //GET AN ASSET WITH THE RELATED DATA AS A TEST\r\n\t  const testAsset = await PlatformApi.IafPassSvc.findWithRelated(\r\n\t\t{\r\n\t\t  parent: {\r\n\t\t\tquery: { _id: flatAllAssets[0]._id },\r\n\t\t\tcollectionDesc: { _userItemId: iaf_asset_collection._userItemId },\r\n\t\t\toptions: { page: { getAllItems: true } }\r\n\t\t  },\r\n\t\t  related: [\r\n\t\t\t{\r\n\t\t\t  relatedDesc: { _relatedUserType: data_obj_coll._userType },\r\n\t\t\t  as: &apos;Related Data Object&apos;\r\n\t\t\t}\r\n\t\t  ]\r\n\t\t}, ctx\r\n\t  );\r\n  \r\n\t  return {\r\n\t\tfile: xlsxFiles[0].name + \&quot; file imported!\&quot;,\r\n\t\textendedDataCollection: data_obj_coll,\r\n\t\ttestAsset: testAsset._list[0]\r\n\t  };\r\n  \r\n  \r\n\t},\r\n  \r\n\t//Creates or recreates the collection collections and the simple index on it\r\n\t//Cen be rerun but will delete all existing collections\r\n\tasync createOrRecreateCollectionsCollection(inpout, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, IafScriptEngine } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  let collections = await PlatformApi.IafPassSvc.createOrRecreateCollection(\r\n\t\t{\r\n\t\t  _name: &apos;Collections Collection&apos;,\r\n\t\t  _shortName: &apos;Collections&apos;,\r\n\t\t  _namespaces: proj._namespaces,\r\n\t\t  _description: &apos;Collections of Entities&apos;,\r\n\t\t  _userType: &apos;iaf_ext_coll_coll&apos;\r\n\t\t}, ctx\r\n\t  )\r\n  \r\n\t  PlatformApi.IafPassSvc.createOrRecreateIndex({\r\n\t\t_id: collections._id,\r\n\t\tindexDefs: [\r\n\t\t  {\r\n\t\t\tkey: {\r\n\t\t\t  \&quot;Collection Name\&quot;: \&quot;text\&quot;,\r\n\t\t\t  \&quot;properties.Type.val\&quot;: \&quot;text\&quot;\r\n\t\t\t},\r\n\t\t\toptions: {\r\n\t\t\t  name: \&quot;text_search_index\&quot;,\r\n\t\t\t  default_language: \&quot;english\&quot;\r\n\t\t\t}\r\n\t\t  }\r\n\t\t]\r\n\t  }, ctx)\r\n  \r\n\t  return collections\r\n\t},\r\n  \r\n\t//Adds an object model api config to the project\r\n\tasync addApiGatewayConfig(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, UiUtils } = libraries\r\n  \r\n\t  const proj = await PlatformApi.IafProj.getCurrent(ctx);\r\n  \r\n\t  const configFile = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.json\&quot; });\r\n\t  const configFileData = await UiUtils.IafLocalFile.loadFiles(configFile);\r\n\t  const configData = [JSON.parse(configFileData[0])];\r\n  \r\n\t  const configFileItem = await PlatformApi.IafItemSvc.createNamedUserItems([{\r\n\t\t_name: \&quot;API config\&quot;,\r\n\t\t_shortName: \&quot;api_config\&quot;,\r\n\t\t_description: \&quot;API configuration with the REST API endpoints\&quot;,\r\n\t\t_namespaces: proj._namespaces,\r\n\t\t_userType: \&quot;api_config\&quot;,\r\n\t\t_version: { _userData: JSON.stringify(configData) }\r\n\t  }], \&quot;UserConfig\&quot;, ctx);\r\n  \r\n\t  const configFileItemId = configFileItem &amp;&amp; configFileItem._list &amp;&amp; configFileItem._list[0] &amp;&amp; configFileItem._list[0]._id\r\n\t\t? configFileItem._list[0]._id : undefined;\r\n  \r\n\t  if (configFileItemId) {\r\n\t\tconst addApiConfigResponse = await PlatformApi.IafObjectModelAPISvc.addApiConfig(configFileItemId, ctx);\r\n\t\treturn addApiConfigResponse;\r\n\t  } else {\r\n\t\treturn \&quot;Failed to add apiConfig\&quot;;\r\n\t  }\r\n\t},\r\n  \r\n\tasync createObjectSchemas(input, libraries, ctx) {\r\n\t  let { PlatformApi, UiUtils } = libraries\r\n\t  let objectSchemas = await UiUtils.IafLocalFile.selectFiles({ multiple: true, accept: \&quot;.json\&quot; })\r\n\t  const schemaContents = await UiUtils.IafLocalFile.loadJSONFiles(objectSchemas)\r\n\t  let iaf_dt_current_proj = await PlatformApi.IafProj.getCurrent(ctx);\r\n\t  let iaf_schema_col = await PlatformApi.IafPassSvc.createOrRecreateCollection(\r\n\t\t{\r\n\t\t  _name: &apos;IAF Schemas&apos;,\r\n\t\t  _shortName: &apos;schemas&apos;,\r\n\t\t  _namespaces: iaf_dt_current_proj._namespaces,\r\n\t\t  _description: &apos;IAF Schema Store Collection&apos;,\r\n\t\t  _userType: &apos;iaf_schema_collection&apos;\r\n\t\t}, ctx)\r\n\t  const iaf_schemas = await PlatformApi.IafPassSvc.createItems({\r\n\t\t_userItemId: iaf_schema_col._userItemId,\r\n\t\t_namespaces: iaf_dt_current_proj._namespaces,\r\n\t\titems: schemaContents\r\n\t  }, ctx)\r\n\t  return iaf_schemas\r\n\t},\r\n  \r\n\tasync createSystemsAndElementsCollections(input, libraries, ctx) {\r\n\t  let { PlatformApi, UiUtils } = libraries\r\n\t  let iaf_dt_current_proj = await PlatformApi.IafProj.getCurrent(ctx);\r\n\t  let systems = await PlatformApi.IafPassSvc.createOrRecreateCollection(\r\n\t\t{\r\n\t\t  _name: &apos;Systems Collection&apos;,\r\n\t\t  _shortName: &apos;systems&apos;,\r\n\t\t  _namespaces: iaf_dt_current_proj._namespaces,\r\n\t\t  _description: &apos;Systems are groups of related entities&apos;,\r\n\t\t  _userType: &apos;iaf_ext_sys_coll&apos;\r\n\t\t}, ctx)\r\n\t  let index = await PlatformApi.IafPassSvc.createOrRecreateIndex({\r\n\t\t_id: systems._id,\r\n\t\tindexDefs: [\r\n\t\t  {\r\n\t\t\tkey: { \&quot;System Name\&quot;: \&quot;text\&quot; },\r\n\t\t\toptions: {\r\n\t\t\t  name: \&quot;text_search_index\&quot;,\r\n\t\t\t  default_language: \&quot;english\&quot;\r\n\t\t\t}\r\n\t\t  }\r\n\t\t]\r\n\t  }, ctx)\r\n\t  let systemElements = await PlatformApi.IafPassSvc.createOrRecreateCollection(\r\n\t\t{\r\n\t\t  _name: &apos;System Elements Collection&apos;,\r\n\t\t  _shortName: &apos;system-elements&apos;,\r\n\t\t  _namespaces: iaf_dt_current_proj._namespaces,\r\n\t\t  _description: &apos;Systems Elements are entities grouped under a System&apos;,\r\n\t\t  _userType: &apos;iaf_ext_sysel_coll&apos;\r\n\t\t}, ctx)\r\n\t  let index2 = await PlatformApi.IafPassSvc.createOrRecreateIndex({\r\n\t\t_id: systemElements._id,\r\n\t\tindexDefs: [\r\n\t\t  {\r\n\t\t\tkey: { \&quot;Element Name\&quot;: \&quot;text\&quot; },\r\n\t\t\toptions: {\r\n\t\t\t  name: \&quot;text_search_index\&quot;,\r\n\t\t\t  default_language: \&quot;english\&quot;\r\n\t\t\t}\r\n\t\t  }\r\n\t\t]\r\n\t  }, ctx)\r\n\t  return { systems, systemElements }\r\n\t},\r\n  \r\n\tasync createPickListCollections(input, libraries, ctx) {\r\n\t  let { PlatformApi, UiUtils } = libraries\r\n\t  let iaf_dt_current_proj = await PlatformApi.IafProj.getCurrent(ctx);\r\n\t  let iaf_pick_list_col = await PlatformApi.IafPassSvc.createOrRecreateCollection(\r\n\t\t{\r\n\t\t  _name: &apos;IAF Pick List&apos;,\r\n\t\t  _shortName: &apos;pick_list&apos;,\r\n\t\t  _namespaces: iaf_dt_current_proj._namespaces,\r\n\t\t  _description: &apos;IAF Pick List Collection&apos;,\r\n\t\t  _userType: &apos;iaf_pick_list_collection&apos;\r\n\t\t}, ctx)\r\n\t  let array_of_default_pick_list_items = [\r\n\t\t{ type: \&quot;SystemsCategories\&quot;, values: [{ display: &apos;Mechanical&apos;, value: &apos;MechanicalSystemsCategories&apos; }, { display: &apos;Piping&apos;, value: &apos;PipingSystemsCategories&apos; }, { display: &apos;Electrical&apos;, value: &apos;ElectricalSystemsCategories&apos; }] },\r\n\t\t{ type: \&quot;MechanicalSystemsCategories\&quot;, values: [{ display: &apos;Exhaust Air&apos;, value: &apos;Exhaust Air&apos; }, { display: &apos;Return Air&apos;, value: &apos;Return Air&apos; }, { display: &apos;Supply Air&apos;, value: &apos;Supply Air&apos; }] },\r\n\t\t{\r\n\t\t  type: \&quot;PipingSystemsCategories\&quot;, values: [\r\n\t\t\t{ display: &apos;Hydronic Supply&apos;, value: &apos;Hydronic Supply&apos; },\r\n\t\t\t{ display: &apos;Hydronic Return&apos;, value: &apos;Hydronic Return&apos; },\r\n\t\t\t{ display: &apos;Chilled Water Supply&apos;, value: &apos;Chilled Water Supply&apos; },\r\n\t\t\t{ display: &apos;Chilled Water Return&apos;, value: &apos;Chilled Water Return&apos; },\r\n\t\t\t{ display: &apos;Hot Water Supply&apos;, value: &apos;Hot Water Supply&apos; },\r\n\t\t\t{ display: &apos;Hot Water Return&apos;, value: &apos;Hot Water Return&apos; },\r\n\t\t\t{ display: &apos;Sanitary&apos;, value: &apos;Sanitary&apos; },\r\n\t\t\t{ display: &apos;Condensate Drain&apos;, value: &apos;Condensate Drain&apos; },\r\n\t\t\t{ display: &apos;Natural Gas&apos;, value: &apos;Natural Gas&apos; }]\r\n\t\t},\r\n\t\t{ type: \&quot;ElectricalSystemsCategories\&quot;, values: [{ display: &apos;Low Voltage&apos;, value: &apos;Low Voltage&apos; }, { display: &apos;High Voltage&apos;, value: &apos;High Voltage&apos; }] }\r\n\t  ]\r\n\t  const default_pick_list_collection_result = await PlatformApi.IafPassSvc.createItems({\r\n\t\t_userItemId: iaf_pick_list_col._userItemId,\r\n\t\t_namespaces: iaf_dt_current_proj._namespaces,\r\n\t\titems: array_of_default_pick_list_items\r\n\t  }, ctx)\r\n\t  return default_pick_list_collection_result\r\n\t},\r\n\tasync loadProjectAndCollections(input, libraries, ctx, callback) {\r\n  \r\n\t  const { IafProj, IafScriptEngine, IafDataSource } = libraries.PlatformApi\r\n  \r\n\t  let currentProj = await IafProj.getCurrent(ctx)\r\n  \r\n\t  let collections = await PlatformApi.IafPassSvc.getCollections(null, ctx)\r\n\t  collections = collections._list\r\n  \r\n\t  let latestModelComposite = await PlatformApi.IafPassSvc.getCompositeCollection({\r\n\t\tquery:\r\n\t\t{\r\n\t\t  \&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\r\n\t\t  \&quot;_namespaces\&quot;: { \&quot;$in\&quot;: currentProj._namespaces },\r\n\t\t  \&quot;_itemClass\&quot;: \&quot;NamedCompositeItem\&quot;\r\n\t\t}\r\n\t  }, ctx, { getLatestVersion: true })\r\n  \r\n\t  let latestElementCollection\r\n\t  if (latestModelComposite)\r\n\t\tlatestElementCollection = await PlatformApi.IafPassSvc.getCollectionInComposite(latestModelComposite._id, {\r\n\t\t  _userType: \&quot;rvt_elements\&quot;\r\n\t\t}, ctx)\r\n  \r\n\t  let datasources = await IafDataSource.getOrchestrators(null, ctx)\r\n\t  datasources = datasources._list\r\n  \r\n\t  let iaf_collections = _.find(collections, { _userType: \&quot;iaf_ext_coll_coll\&quot; })\r\n\t  let iaf_asset_collection = _.find(collections, { _userType: \&quot;iaf_ext_asset_coll\&quot; })\r\n\t  let iaf_space_collection = _.find(collections, { _userType: \&quot;iaf_ext_space_coll\&quot; })\r\n\t  let iaf_bms_collection = _.find(collections, { _userType: \&quot;bms_assets\&quot; })\r\n\t  let iaf_schema_collection = _.find(collections, { _userType: \&quot;iaf_schema_collection\&quot; })\r\n\t  let iaf_pick_list_collection = _.find(collections, { _userType: \&quot;iaf_pick_list_collection\&quot; })\r\n\t  let iaf_systems_collection = _.find(collections, { _userType: \&quot;iaf_ext_sys_coll\&quot; })\r\n\t  let iaf_system_elements_collection = _.find(collections, { _userType: \&quot;iaf_ext_sysel_coll\&quot; })\r\n\t  let iaf_ext_files_coll = _.find(collections, { _userType: \&quot;file_container\&quot; })\r\n\t  let iaf_dt_contractor_coll = _.find(collections, { _userType: \&quot;iaf_dt_contractor_coll\&quot; })\r\n\t  let iaf_dt_installer_coll = _.find(collections, { _userType: \&quot;iaf_dt_installer_coll\&quot; })\r\n\t  let iaf_dt_iron_data_coll = _.find(collections, { _userType: \&quot;iaf_dt_iron_data_coll\&quot; })\r\n\t  let iaf_dt_spec_data_coll = _.find(collections, { _userType: \&quot;iaf_dt_spec_data_coll\&quot; })\r\n\t  let iaf_dt_sup_data_coll = _.find(collections, { _userType: \&quot;iaf_dt_sup_data_coll\&quot; })\r\n\t  let iaf_dt_trace_coll = _.find(collections, { _userType: \&quot;iaf_dt_trace_coll\&quot; })\r\n\t  let iaf_dt_warranty_coll = _.find(collections, { _userType: \&quot;iaf_dt_warranty_coll\&quot; })\r\n\t  let iaf_dt_commtest_coll = _.find(collections, { _userType: \&quot;iaf_dt_commtest_coll\&quot; })\r\n  \r\n\t  IafScriptEngine.setVar(&apos;iaf_collections&apos;, iaf_collections)\r\n\t  IafScriptEngine.setVar(&apos;iaf_space_collection&apos;, iaf_space_collection)\r\n\t  IafScriptEngine.setVar(&apos;iaf_bms_collection&apos;, iaf_bms_collection)\r\n\t  IafScriptEngine.setVar(&apos;iaf_schema_collection&apos;, iaf_schema_collection)\r\n\t  IafScriptEngine.setVar(&apos;iaf_pick_list_collection&apos;, iaf_pick_list_collection)\r\n\t  IafScriptEngine.setVar(&apos;iaf_systems_collection&apos;, iaf_systems_collection)\r\n\t  IafScriptEngine.setVar(&apos;iaf_system_elements_collection&apos;, iaf_system_elements_collection)\r\n\t  IafScriptEngine.setVar(&apos;iaf_ext_files_coll&apos;, iaf_ext_files_coll)\r\n\t  IafScriptEngine.setVar(&apos;iaf_dt_contractor_coll&apos;, iaf_dt_contractor_coll)\r\n\t  IafScriptEngine.setVar(&apos;iaf_dt_spec_data_coll&apos;, iaf_dt_spec_data_coll)\r\n\t  IafScriptEngine.setVar(&apos;iaf_dt_installer_coll&apos;, iaf_dt_installer_coll)\r\n\t  IafScriptEngine.setVar(&apos;iaf_dt_iron_data_coll&apos;, iaf_dt_iron_data_coll)\r\n\t  IafScriptEngine.setVar(&apos;iaf_dt_sup_data_coll&apos;, iaf_dt_sup_data_coll)\r\n\t  IafScriptEngine.setVar(&apos;iaf_dt_trace_coll&apos;, iaf_dt_trace_coll)\r\n\t  IafScriptEngine.setVar(&apos;iaf_dt_warranty_coll&apos;, iaf_dt_warranty_coll)\r\n\t  IafScriptEngine.setVar(&apos;iaf_dt_commtest_coll&apos;, iaf_dt_commtest_coll)\r\n\t  IafScriptEngine.setVar(&apos;iaf_entityCollectionMap&apos;, {\r\n\t\tAsset: iaf_asset_collection,\r\n\t\tAssets: iaf_asset_collection,\r\n\t\tSpace: iaf_space_collection,\r\n\t\tSpaces: iaf_space_collection,\r\n\t\tFile: iaf_ext_files_coll,\r\n\t\tFiles: iaf_ext_files_coll,\r\n\t\tCollection: iaf_collections,\r\n\t\tCollections: iaf_collections,\r\n\t\t\&quot;BMS Equipment\&quot;: iaf_bms_collection,\r\n\t\tSystem: iaf_systems_collection,\r\n\t\tSystems: iaf_systems_collection,\r\n\t\tSystemElement: iaf_system_elements_collection,\r\n\t\tSystemElements: iaf_system_elements_collection\r\n\t  })\r\n\t  IafScriptEngine.setVar(&apos;iaf_entityNamePropMap&apos;, {\r\n\t\tAsset: \&quot;Asset Name\&quot;,\r\n\t\tAssets: \&quot;Asset Name\&quot;,\r\n\t\tSpace: \&quot;Space Name\&quot;,\r\n\t\tSpaces: \&quot;Space Name\&quot;,\r\n\t\tFile: \&quot;name\&quot;,\r\n\t\tFiles: \&quot;name\&quot;,\r\n\t\tCollection: \&quot;Collection Name\&quot;,\r\n\t\tCollections: \&quot;Collection Name\&quot;,\r\n\t\t\&quot;BMS Equipment\&quot;: \&quot;id.display\&quot;,\r\n\t\tSystem: \&quot;Systems Name\&quot;,\r\n\t\tSystems: \&quot;Systems Name\&quot;,\r\n\t\tSystemElement: \&quot;Element Name\&quot;,\r\n\t\tSystemElements: \&quot;Element Name\&quot;,\r\n\t  })\r\n\t  IafScriptEngine.setVar(&apos;iaf_typedef_collection&apos;, _.find(collections, { _userType: \&quot;iaf_dt_type_map_defs_coll\&quot; }))\r\n\t  IafScriptEngine.setVar(&apos;iaf_asset_collection&apos;, iaf_asset_collection)\r\n  \r\n\t  if (latestModelComposite) {\r\n\t\tIafScriptEngine.setVar(&apos;iaf_ext_current_bim_model&apos;, latestModelComposite)\r\n\t\tIafScriptEngine.setVar(&apos;iaf_ext_elements_collection&apos;, latestElementCollection)\r\n\t  }\r\n  \r\n\t  IafScriptEngine.setVar(&apos;datasources&apos;, datasources)\r\n\t  IafScriptEngine.setVar(&apos;IAF_workspace&apos;, currentProj)\r\n\t  return {\r\n\t\tcurrentProj,\r\n\t\tiaf_typedef_collection: IafScriptEngine.getVar(&apos;iaf_typedef_collection&apos;),\r\n\t\tiaf_asset_collection: IafScriptEngine.getVar(&apos;iaf_asset_collection&apos;),\r\n\t\tlatestModelComposite,\r\n\t\tlatestElementCollection,\r\n\t\tdatasources,\r\n\t\tiaf_entityNamePropMap: IafScriptEngine.getVar(&apos;iaf_entityNamePropMap&apos;),\r\n\t\tiaf_entityCollectionMap: IafScriptEngine.getVar(&apos;iaf_entityCollectionMap&apos;),\r\n\t\tcollections,\r\n\t\tiaf_collections: IafScriptEngine.getVar(&apos;iaf_collections&apos;),\r\n\t\tiaf_space_collection: IafScriptEngine.getVar(&apos;iaf_space_collection&apos;),\r\n\t\tiaf_bms_collection: IafScriptEngine.getVar(&apos;iaf_bms_collection&apos;),\r\n\t\tiaf_schema_collection: IafScriptEngine.getVar(&apos;iaf_schema_collection&apos;),\r\n\t\tiaf_pick_list_collection: IafScriptEngine.getVar(&apos;iaf_pick_list_collection&apos;),\r\n\t\tiaf_systems_collection: IafScriptEngine.getVar(&apos;iaf_systems_collection&apos;),\r\n\t\tiaf_system_elements_collection: IafScriptEngine.getVar(&apos;iaf_system_elements_collection&apos;),\r\n\t\tiaf_ext_files_coll: IafScriptEngine.getVar(&apos;iaf_ext_files_coll&apos;),\r\n\t\tiaf_dt_contractor_coll: IafScriptEngine.getVar(&apos;iaf_dt_contractor_coll&apos;),\r\n\t\tiaf_dt_installer_coll: IafScriptEngine.getVar(&apos;iaf_dt_installer_coll&apos;),\r\n\t\tiaf_dt_iron_data_coll: IafScriptEngine.getVar(&apos;iaf_dt_iron_data_coll&apos;),\r\n\t\tiaf_dt_spec_data_coll: IafScriptEngine.getVar(&apos;iaf_dt_spec_data_coll&apos;),\r\n\t\tiaf_dt_sup_data_coll: IafScriptEngine.getVar(&apos;iaf_dt_sup_data_coll&apos;),\r\n\t\tiaf_dt_trace_coll: IafScriptEngine.getVar(&apos;iaf_dt_trace_coll&apos;),\r\n\t\tiaf_dt_warranty_coll: IafScriptEngine.getVar(&apos;iaf_dt_warranty_coll&apos;),\r\n\t\tiaf_dt_commtest_coll: IafScriptEngine.getVar(&apos;iaf_dt_commtest_coll&apos;)\r\n\t  }\r\n\t},\r\n  \r\n  \r\n\tasync createOrRecreateExcelImportOrchestrator(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, IafScriptEngine } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  const query = {\r\n\t\t_namespaces: proj._namespaces,\r\n\t\t_userType: \&quot;xlsx_import\&quot;\r\n\t  };\r\n  \r\n\t  const datasources = await PlatformApi.IafPassSvc.getDatasources(query, ctx);\r\n  \r\n\t  const filteredDatasources = _.filter(datasources, d =&gt; d._userType === \&quot;xlsx_import\&quot;\r\n\t\t&amp;&amp; d._name === \&quot;xlsx_import\&quot;);\r\n  \r\n\t  _.each(filteredDatasources, async datasource =&gt; await PlatformApi.IafPassSvc.removeDatasource({ orchId: datasource.id }, ctx));\r\n  \r\n\t  let datasourceResult = await PlatformApi.IafPassSvc.addDatasource(\r\n\t\t{\r\n\t\t  _name:\&quot;xlsx_import\&quot;,\r\n\t\t  _description: \&quot;Orchestrator to Import XLSX File\&quot;,\r\n\t\t  _namespaces: proj._namespaces,\r\n\t\t  _userType: \&quot;xlsx_import\&quot;,\r\n\t\t  _params:{\r\n\t\t\ttasks:[\r\n\t\t\t\t{\r\n\t\t\t\t  _orchcomp:\&quot;default_script_target\&quot;,\r\n\t\t\t\t  _name: \&quot;Import excel sheets\&quot;,\r\n\t\t\t\t  _sequenceno: 1,\r\n\t\t\t\t  \&quot;_actualparams\&quot;: {\r\n\t\t\t\t\t\&quot;userType\&quot;: \&quot;iaf_import_data_sheets\&quot;,\r\n\t\t\t\t\t\&quot;_scriptName\&quot;: \&quot;importModeledAssets\&quot;\r\n\t\t\t\t  }\r\n\t\t\t\t}\r\n  \r\n\t\t\t]\r\n\t\t  }\r\n\t\t}, ctx\r\n\t  )\r\n\t  return datasourceResult;\r\n\t},\r\n  \r\n\tasync runAssetImport(input, libraries, ctx) {\r\n  \r\n\t  let { PlatformApi, IafScriptEngine } = libraries\r\n  \r\n\t  let proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  const query = {\r\n\t\t_namespaces: proj._namespaces,\r\n\t\t_userType: \&quot;xlsx_import\&quot;\r\n\t  };\r\n  \r\n\t  const datasources = await PlatformApi.IafPassSvc.getDatasources(query, ctx);\r\n  \r\n\t  const filteredDatasources = _.filter(datasources, d =&gt; d._userType === \&quot;xlsx_import\&quot; &amp;&amp; d._name === \&quot;xlsx_import\&quot;);\r\n  \r\n\t  console.log(\&quot;filteredDatasources\&quot;, JSON.stringify(filteredDatasources))\r\n\r\n\t  const orchReq= {\r\n\t\t_namespaces: proj._namespaces,\r\n\t\torchestratorId: filteredDatasources[0].id\r\n\t  };\r\n  \r\n\t  const orchRes = await PlatformApi.IafPassSvc.runDatasource(orchReq, ctx);\r\n\t  \r\n\t  console.log(\&quot;orchRes\&quot;, JSON.stringify(orchRes))\r\n  \r\n\t},\r\n\r\n\tasync enableSkysparkIntegration(input, libraries, ctx) {\r\n  \r\n\t\tlet { PlatformApi, UiUtils } = libraries\r\n\t\r\n\t\tlet proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n  \r\n\t  \tlet jsonFile = await UiUtils.IafLocalFile.selectFiles({ multiple: true, accept: \&quot;.json\&quot; })\r\n\r\n\t\tlet jsonContent = await UiUtils.IafLocalFile.loadJSONFiles(jsonFile)\r\n\r\n\t\tlet kingspanSBG = jsonContent[0]\r\n\r\n\t\tconsole.log(\&quot;kingspanSBG\&quot;, JSON.stringify(kingspanSBG))\r\n\r\n\t\tlet bms_coll = await PlatformApi.IafPassSvc.createOrRecreateCollection(\r\n\t\t\t{\r\n\t\t\t  _name: &apos;bms_assets&apos;,\r\n\t\t\t  _shortName: &apos;bms_assets&apos;,\r\n\t\t\t  _namespaces: proj._namespaces,\r\n\t\t\t  _description: &apos;BMS assets from skyspark&apos;,\r\n\t\t\t  _userType: &apos;bms_assets&apos;\r\n\t\t}, ctx)\r\n\r\n\t\tconsole.log(\&quot;bms_coll\&quot;, JSON.stringify(bms_coll))\r\n\r\n\t\tlet index = await PlatformApi.IafPassSvc.createOrRecreateIndex({\r\n\t\t_id: bms_coll._id,\r\n\t\tindexDefs: [\r\n\t\t\t{\r\n\t\t\tkey: {\r\n\t\t\t\t\&quot;siteRef.display\&quot;: \&quot;text\&quot;,\r\n\t\t\t\t\&quot;floorRef.display\&quot;: \&quot;text\&quot;,\r\n\t\t\t\t\&quot;navName\&quot;: \&quot;text\&quot;,\r\n\t\t\t\t\&quot;id.display\&quot;: \&quot;text\&quot;,\r\n\t\t\t\t\&quot;ipa_data.Haystack Tags\&quot;: \&quot;text\&quot;\r\n\t\t\t},\r\n\t\t\toptions: {\r\n\t\t\t\tname: \&quot;bms_search_index\&quot;,\r\n\t\t\t\tdefault_language: \&quot;english\&quot;\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t\t}, ctx)\r\n\r\n\t\tconsole.log(\&quot;bms index\&quot;, JSON.stringify(index))\r\n\r\n\t\tconst query = {\r\n\t\t\t_namespaces: proj._namespaces,\r\n\t\t\t_userType: \&quot;skyspark\&quot;\r\n\t\t  };\r\n\r\n\t\tconst datasources = await PlatformApi.IafPassSvc.getDatasources(query, ctx);\r\n\r\n\t\tconsole.log(\&quot;datasources\&quot;, JSON.stringify(datasources))\r\n  \r\n\t\tconst skysparkOrch = _.filter(datasources, d =&gt; d._userType === \&quot;skyspark\&quot;\r\n\t\t&amp;&amp; d._name === \&quot;skyspark SYNC\&quot;);\r\n\r\n\t\tconsole.log(\&quot;skysparkOrch\&quot;, JSON.stringify(skysparkOrch))\r\n\r\n\t\tif (!_.isEmpty(skysparkOrch)) \r\n\t\t\tawait PlatformApi.IafPassSvc.removeDatasource({ orchId: skysparkOrch[0].id }, ctx)\r\n\r\n\t\tlet skysparkSync = await PlatformApi.IafPassSvc.addDatasource(\r\n\t\t\t{\r\n\t\t\t  _name: \&quot;skyspark SYNC\&quot;,\r\n\t\t\t  _description: \&quot;Skyspark Integration SYNC\&quot;,\r\n\t\t\t  _namespaces: proj._namespaces,\r\n\t\t\t  _userType: \&quot;skyspark\&quot;,\r\n\t\t\t  _params: {\r\n\t\t\t\ttasks: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname:\&quot;J2_connector\&quot;,\r\n\t\t\t\t\t\t_sequenceno: 1,\r\n\t\t\t\t\t\t_actualparams: {\r\n\t\t\t\t\t\t\taction: \&quot;config\&quot;,\r\n\t\t\t\t\t\t\tproject:\&quot;ikonkingspan\&quot;,\r\n\t\t\t\t\t\t\turl:\&quot;https://sbg.invicara.com/api\&quot;,\r\n\t\t\t\t\t\t\tuname:kingspanSBG.username,\r\n\t\t\t\t\t\t\tpwd:kingspanSBG.pwd\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname:\&quot;default_script_target\&quot;,\r\n\t\t\t\t\t\t_sequenceno: 2,\r\n\t\t\t\t\t\t_actualparams: {\r\n\t\t\t\t\t\t  \tuserType: \&quot;iaf_bms_equipments\&quot;,\r\n\t\t\t\t\t\t\t_scriptName: \&quot;uploadBMSAssets\&quot;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t  }\r\n\t\t\t}, ctx\r\n\t\t)\r\n\r\n\t\tconsole.log(\&quot;skysparkSync\&quot;, JSON.stringify(skysparkSync))\r\n  \r\n\t\tconst realtimeOrch = _.filter(datasources, d =&gt; d._userType === \&quot;skyspark\&quot;\r\n\t\t&amp;&amp; d._name === \&quot;skyspark REALTIME\&quot;);\r\n\r\n\t\tconsole.log(\&quot;realtimeOrch\&quot;, JSON.stringify(realtimeOrch))\r\n\r\n\t\tif (!_.isEmpty(realtimeOrch)) \r\n\t\t\tawait PlatformApi.IafPassSvc.removeDatasource({ orchId: realtimeOrch[0].id }, ctx)\r\n\t\t\r\n\t\tlet realtimeSync = await PlatformApi.IafPassSvc.addDatasource(\r\n\t\t\t{\r\n\t\t\t  _name: \&quot;skyspark REALTIME\&quot;,\r\n\t\t\t  _description: \&quot;Skyspark Integration REALTIME\&quot;,\r\n\t\t\t  _namespaces: proj._namespaces,\r\n\t\t\t  _userType: \&quot;skyspark\&quot;,\r\n\t\t\t  _instant: true,\r\n\t\t\t  _params: {\r\n\t\t\t\ttasks: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname:\&quot;J2_connector\&quot;,\r\n\t\t\t\t\t\t_sequenceno: 1,\r\n\t\t\t\t\t\t_actualparams: {\r\n\t\t\t\t\t\t\tproject:\&quot;ikonkingspan\&quot;,\r\n\t\t\t\t\t\t\turl:\&quot;http://sbg.invicara.com/api\&quot;,\r\n\t\t\t\t\t\t\tuname:kingspanSBG.username,\r\n\t\t\t\t\t\t\tpwd:kingspanSBG.pwd\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t  }\r\n\t\t\t}, ctx\r\n\t\t)\r\n\t\tconsole.log(\&quot;realtimeSync\&quot;, JSON.stringify(realtimeSync))\r\n    },\r\n\r\n\tasync runIntialSkysparkSync(input, libraries, ctx) {\r\n  \r\n\t\tlet { PlatformApi, UiUtils } = libraries\r\n\t\r\n\t\tlet proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n\r\n\t\tconst query = {\r\n\t\t\t_namespaces: proj._namespaces,\r\n\t\t\t_userType: \&quot;skyspark SYNC\&quot;\r\n\t\t  };\r\n\r\n\t\tconst datasources = await PlatformApi.IafPassSvc.getDatasources(query, ctx);\r\n\r\n\t\tconsole.log(\&quot;datasources\&quot;, JSON.stringify(datasources))\r\n  \r\n\t\tconst skysparkSyncOrch = _.filter(datasources, d =&gt; d._userType === \&quot;skyspark\&quot;\r\n\t\t&amp;&amp; d._name === \&quot;skyspark SYNC\&quot;);\r\n\r\n\t\tconsole.log(\&quot;skysparkSyncOrch\&quot;, JSON.stringify(skysparkSyncOrch))\r\n\r\n\t\tconst orchReq= {\r\n\t\t\t_namespaces: proj._namespaces,\r\n\t\t\torchestratorId: skysparkSyncOrch[0].id\r\n\t\t};\r\n\t  \r\n\t\tconst orchRes = await PlatformApi.IafPassSvc.runDatasource(orchReq, ctx)\r\n\t\t  \r\n\t\tconsole.log(\&quot;orchRes\&quot;, JSON.stringify(orchRes))\r\n    },\r\n\r\n\tasync importAssetsSkysparkRelations(input, libraries, ctx) {\r\n  \r\n\t\tlet { PlatformApi, UiUtils } = libraries\r\n\t\r\n\t\tlet proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n\r\n\t\tlet bms_coll = await PlatformApi.IafPassSvc.getCollection(\r\n\t\t\t{\r\n\t\t\t\t_shortName: &apos;bms_assets&apos;,\r\n\t\t\t\t_userType: &apos;bms_assets&apos;,\r\n\t\t\t\t_itemClass: \&quot;NamedUserCollection\&quot;,\r\n\t\t\t}, ctx\r\n\t\t)\r\n\r\n\t\tconsole.log(\&quot;bms_coll\&quot;, bms_coll)\r\n\r\n\t\tlet asset_coll = await PlatformApi.IafPassSvc.getCollection(\r\n\t\t\t{\r\n\t\t\t\t_userType: \&quot;iaf_ext_asset_coll\&quot;,\r\n\t\t\t\t_shortName: \&quot;asset_coll\&quot;,\r\n\t\t\t\t_itemClass: \&quot;NamedUserCollection\&quot;,\r\n\t\t\t}, ctx\r\n\t\t)\r\n\r\n\t\tconsole.log(\&quot;asset_coll\&quot;, asset_coll)\r\n\r\n\t\tlet xlsxFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; })\r\n\t\tlet typeWorkbook = await UiUtils.IafDataPlugin.readXLSXFiles(xlsxFiles)\r\n\t\tlet wbJSON = UiUtils.IafDataPlugin.workbookToJSON(typeWorkbook[0])\r\n\t\tlet iaf_dt_grid_data = wbJSON.Sheet1\r\n\t\tlet data_as_objects = UiUtils.IafDataPlugin.parseGridData({ gridData: iaf_dt_grid_data })\r\n\r\n\t\tconsole.log(\&quot;data_as_objects\&quot;, data_as_objects)\r\n\r\n\t\tlet assetQueries = _.map(data_as_objects, data =&gt; {\r\n\t\t\tconst query = {}\r\n\t\t  \tquery[\&quot;Asset Name\&quot;] = _.get(data, \&quot;Asset Name\&quot;);\r\n\t\t\treturn {\r\n\t\t\t  query,\r\n\t\t\t  collectionDesc: {\r\n\t\t\t\t_itemClass: \&quot;NamedUserCollection\&quot;,\r\n\t\t\t\t_userType: asset_coll._userType,\r\n\t\t\t\t_userItemId: asset_coll._userItemId\r\n\t\t\t  },\r\n\t\t\t  options: { page: { getAllItems: true } }\r\n\t\t\t};\r\n\t\t  });\r\n\t\t  console.log(&apos;assetQueries&apos;, assetQueries);\r\n\t  \r\n\t\t  let assets = await PlatformApi.IafPassSvc.getItemsMulti(assetQueries, ctx);\r\n\t\t  console.log(&apos;assets&apos;, JSON.stringify(assets));\r\n\r\n\t\t  assets = _.flatten(assets)\r\n\r\n\t\t  console.log(&apos;flatten assets&apos;, JSON.stringify(assets));\r\n\r\n\t\t  let bmsQueries = _.map(data_as_objects, data =&gt; {\r\n\t\t\tconst query = {};\r\n\t\t\tquery[\&quot;id.value\&quot;] = _.get(data, \&quot;BMS id value\&quot;);\r\n\t\t\treturn {\r\n\t\t\t  query,\r\n\t\t\t  collectionDesc: {\r\n\t\t\t\t_itemClass: \&quot;NamedUserCollection\&quot;,\r\n\t\t\t\t_userType: bms_coll._userType,\r\n\t\t\t\t_userItemId: bms_coll._userItemId\r\n\t\t\t  },\r\n\t\t\t  options: { page: { getAllItems: true } }\r\n\t\t\t};\r\n\t\t  });\r\n\t\t  console.log(&apos;bmsQueries&apos;, bmsQueries);\r\n\t  \r\n\t\t  let bms = await PlatformApi.IafPassSvc.getItemsMulti(bmsQueries, ctx);\r\n\t\t  console.log(&apos;bms&apos;, JSON.stringify(bms));\r\n\r\n\t\t  bms = _.flatten(bms)\r\n\r\n\t\t  console.log(&apos;flatten BMS&apos;, JSON.stringify(bms));\r\n\t\t\r\n\t\t \tlet relatedObjects = _.map(data_as_objects, data =&gt;{\r\n\t\t\t\tlet parentItem = (_.find(assets, (a) =&gt; a[&apos;Asset Name&apos;] == data[&apos;Asset Name&apos;]))\r\n\t\t\t\tlet relatedItems = [(_.find(bms, (b) =&gt; b[&apos;id&apos;][&apos;value&apos;] == data[&apos;BMS id value&apos;]))]\r\n\t\t\t\treturn {parentItem, relatedItems}\r\n\t\t\t})\r\n\r\n\t\t\tconsole.log(\&quot;relatedObjects\&quot;, relatedObjects)\r\n\t\t\t\r\n\t\tlet result = await PlatformApi.IafPassSvc.createRelations(\r\n\t\t\t{\r\n\t\t\t\tparentUserItemId: asset_coll._userItemId,\r\n\t\t\t\t_userItemId: bms_coll._userItemId,\r\n\t\t\t\t_namespaces: proj._namespaces,\r\n\t\t\t\trelations: relatedObjects\r\n\t\t\t}, ctx\r\n\t\t)\r\n\t\tconsole.log(\&quot;Related Items Created\&quot;, result)\r\n\t},\r\n\r\n\tasync enableSisenseIntegration(input, libraries, ctx) {\r\n\r\n\t\tconsole.log(\&quot;libraries\&quot;, libraries)\r\n  \r\n\t\tlet { PlatformApi, UiUtils } = libraries\r\n\r\n\t\tconsole.log(\&quot;PlatformApi\&quot;, PlatformApi)\r\n\r\n\t\tconsole.log(\&quot;UiUtils\&quot;, UiUtils)\r\n\r\n\t\t// await LocalFileSaver.save(JSON.stringify({test: \&quot;test\&quot;}), \r\n\t\t// \t{opts: {filename: \&quot;postgres connection info.json\&quot;}\r\n\t\t// })\r\n\t\r\n\t\tlet proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n\r\n\t\tconsole.log(\&quot;proj\&quot;, proj)\r\n  \r\n\t  \tlet jsonFile = await UiUtils.IafLocalFile.selectFiles({ multiple: true, accept: \&quot;.json\&quot; })\r\n\r\n\t\tlet jsonContent = await UiUtils.IafLocalFile.loadJSONFiles(jsonFile)\r\n\r\n\t\tlet devConfigSBG = jsonContent[0]\r\n\r\n\t\tconsole.log(\&quot;devConfigSBG\&quot;, devConfigSBG)\r\n\r\n\r\n\t\tlet rwpassword = &apos;&apos;\r\n\t\tlet rwusername = &apos;&apos;\r\n        let str = &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos; + &apos;abcdefghijklmnopqrstuvwxyz0123456789@#$!#%&amp;*-&apos;;\r\n\r\n\t\tfor (let i = 1; i &lt;= 10; i++) {\r\n\t\t\tvar char = Math.floor(Math.random()\r\n\t\t\t* str.length + 1);\r\n\t\t\trwpassword += str.charAt(char)\r\n\t\t}\r\n\r\n\t\tfor (let i = 1; i &lt;= 5; i++) {\r\n\t\t\tvar char = Math.floor(Math.random()\r\n\t\t\t* str.length + 1);\r\n\t\t\trwusername += str.charAt(char)\r\n\t\t}\r\n\r\n\t\tconsole.log(\&quot;read write username\&quot;, rwusername)\r\n\t\tconsole.log(\&quot;read write password\&quot;, rwpassword)\r\n\r\n\t\t// await LocalFileSaver.save(JSON.stringify({rwpassword: password, rwuser: username}), \r\n\t\t// \t{opts: {filename: \&quot;postgres connection info.json\&quot;}\r\n\t\t// })\r\n\r\n\t\tconst query = {\r\n\t\t\t_namespaces: proj._namespaces,\r\n\t\t\t_userType: \&quot;skyspark\&quot;\r\n\t\t  };\r\n\r\n\t\tconst datasources = await PlatformApi.IafPassSvc.getDatasources(query, ctx);\r\n\r\n\t\tconsole.log(\&quot;datasources\&quot;, JSON.stringify(datasources))\r\n  \r\n\t\tlet dtSisenseOrch = _.filter(datasources, d =&gt; d._userType === \&quot;DTAssetSisense SYNC\&quot;\r\n\t\t&amp;&amp; d._name === \&quot;dtassets2Sisense\&quot;);\r\n\r\n\t\tconsole.log(\&quot;dtSisenseOrch\&quot;, JSON.stringify(dtSisenseOrch))\r\n\r\n\t\tif (!_.isEmpty(dtSisenseOrch)) \r\n\t\t\tawait PlatformApi.IafPassSvc.removeDatasource({ orchId: dtSisenseOrch[0].id }, ctx)\r\n\r\n\t\tlet dtSync = await PlatformApi.IafPassSvc.addDatasource(\r\n\t\t\t{\r\n\t\t\t  _name: \&quot;DTAssetSisense SYNC\&quot;,\r\n\t\t\t  _description: \&quot;DT Asset and Sisense SYNC\&quot;,\r\n\t\t\t  _namespaces: proj._namespaces,\r\n\t\t\t  _userType: \&quot;dtassets2Sisense\&quot;,\r\n\t\t\t  _instant: true,\r\n\t\t\t  _params: {\r\n\t\t\t\ttasks: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname:\&quot;default_script_target\&quot;,\r\n\t\t\t\t\t\t_sequenceno: 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname:\&quot;dtassets_to_sisense_target\&quot;,\r\n\t\t\t\t\t\t_sequenceno: 2,\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t  }\r\n\t\t\t}, ctx\r\n\t\t)\r\n\t\tconsole.log(\&quot;DTAssetSisense\&quot;, dtSync)\r\n\r\n\t\tlet historyOrch = _.filter(datasources, d =&gt; d._userType === \&quot;SkysparkSisensePointHis\&quot;\r\n\t\t&amp;&amp; d._name === \&quot;SkysparkSisensePointHis SYNC\&quot;);\r\n\r\n\t\tconsole.log(\&quot;historyOrch\&quot;, JSON.stringify(historyOrch))\r\n\r\n\t\tif (!_.isEmpty(historyOrch)) \r\n\t\t\tawait PlatformApi.IafPassSvc.removeDatasource({ orchId: historyOrch[0].id }, ctx)\r\n\r\n\t\tlet hisOrch = await PlatformApi.IafPassSvc.addDatasource(\r\n\t\t\t{\r\n\t\t\t  _name: \&quot;SkysparkSisensePointHis SYNC\&quot;,\r\n\t\t\t  _description: \&quot;History from Skyspark and Sisense SYNC\&quot;,\r\n\t\t\t  _namespaces: proj._namespaces,\r\n\t\t\t  _userType: \&quot;SkysparkSisensePointHis\&quot;,\r\n\t\t\t  _orchschedule:{\r\n\t\t\t\truninterval:\&quot;* * 3600\&quot;\r\n\t\t\t  },\r\n\t\t\t  _params: {\r\n\t\t\t\ttasks: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname:\&quot;J2_Sisense_HisPoint_Connector\&quot;,\r\n\t\t\t\t\t\t_sequenceno: 1,\r\n\t\t\t\t\t\t_actualparams: {\r\n\t\t\t\t\t\t\tproject:\&quot;ikonkingspan\&quot;,\r\n\t\t\t\t\t\t\turl:\&quot;https://sbg.invicara.com/api\&quot;,\r\n\t\t\t\t\t\t\tuname:\&quot;$devConfigSBG.username\&quot;,\r\n\t\t\t\t\t\t\tpwd:\&quot;$devConfigSBG.pwd\&quot;,\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t  }\r\n\t\t\t}, ctx\r\n\t\t)\r\n\t\tconsole.log(\&quot;hisOrch\&quot;, hisOrch)\r\n\r\n\t\tlet schemaOrch = _.filter(datasources, d =&gt; d._userType === \&quot;analyticsschema_creater\&quot;\r\n\t\t&amp;&amp; d._name === \&quot;Analytic_Schema_Create\&quot;);\r\n\r\n\t\tconsole.log(\&quot;schemaOrch\&quot;, JSON.stringify(schemaOrch))\r\n\r\n\t\tif (!_.isEmpty(schemaOrch)) \r\n\t\t\tawait PlatformApi.IafPassSvc.removeDatasource({ orchId: schemaOrch[0].id }, ctx)\r\n\r\n\t\tlet analyticsOrch = await PlatformApi.IafPassSvc.addDatasource(\r\n\t\t\t{\r\n\t\t\t  _name: \&quot;Analytic_Schema_Create\&quot;,\r\n\t\t\t  _description: \&quot;Create a new Schema\&quot;,\r\n\t\t\t  _namespaces: proj._namespaces,\r\n\t\t\t  _userType: \&quot;analyticsschema_creater\&quot;,\r\n\t\t\t  _instant: true,\r\n\t\t\t  _params: {\r\n\t\t\t\ttasks: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname:\&quot;create_analytics_db\&quot;,\r\n\t\t\t\t\t\t_sequenceno: 1,\r\n\t\t\t\t\t\t_actualparams: {\r\n\t\t\t\t\t\t\tpassword:rwpassword\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t  }\r\n\t\t\t}, ctx\r\n\t\t)\r\n\t\tconsole.log(\&quot;analyticsOrch\&quot;, analyticsOrch)\r\n\t},\r\n\r\n\tasync runAnalyticSchemaCreate(input, libraries, ctx) {\r\n  \r\n\t\tlet { PlatformApi, UiUtils } = libraries\r\n\t\r\n\t\tlet proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n\r\n\t\tconst query = {\r\n\t\t\t_namespaces: proj._namespaces,\r\n\t\t\t_userType: \&quot;analyticsschema_creater\&quot;\r\n\t\t  };\r\n\r\n\t\tconst datasources = await PlatformApi.IafPassSvc.getDatasources(query, ctx);\r\n\r\n\t\tconsole.log(\&quot;datasources\&quot;, JSON.stringify(datasources))\r\n  \r\n\t\tlet analyticsOrch = _.filter(datasources, d =&gt; d._userType === \&quot;analyticsschema_creater\&quot;\r\n\t\t&amp;&amp; d._name === \&quot;Analytic_Schema_Create\&quot;);\r\n\r\n\t\tconsole.log(\&quot;analyticsOrch\&quot;, JSON.stringify(analyticsOrch))\r\n\r\n\t\tconst orchReq= {\r\n\t\t\t_namespaces: proj._namespaces,\r\n\t\t\torchestratorId: analyticsOrch[0].id\r\n\t\t};\r\n\t  \r\n\t\tconst orchRes = await PlatformApi.IafPassSvc.runDatasource(orchReq, ctx)\r\n\t\t  \r\n\t\tconsole.log(\&quot;orchRes\&quot;, JSON.stringify(orchRes))\r\n    },\r\n\r\n\tasync runIntialDTSisenseAssetSync(input, libraries, ctx) {\r\n  \r\n\t\tlet { PlatformApi, UiUtils } = libraries\r\n\t\r\n\t\tlet proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n\r\n\t\tconst query = {\r\n\t\t\t_namespaces: proj._namespaces,\r\n\t\t\t_userType: \&quot;dtassets2Sisense\&quot;\r\n\t\t  };\r\n\r\n\t\tconst datasources = await PlatformApi.IafPassSvc.getDatasources(query, ctx);\r\n\r\n\t\tconsole.log(\&quot;datasources\&quot;, JSON.stringify(datasources))\r\n  \r\n\t\tlet dtSisenseOrch = _.filter(datasources, d =&gt; d._userType === \&quot;dtassets2Sisense\&quot;\r\n\t\t&amp;&amp; d._name === \&quot;DTAssetSisense SYNC\&quot;);\r\n\r\n\t\tconsole.log(\&quot;dtSisenseOrch\&quot;, JSON.stringify(dtSisenseOrch))\r\n\r\n\t\tconst orchReq= {\r\n\t\t\t_namespaces: proj._namespaces,\r\n\t\t\torchestratorId: dtSisenseOrch[0].id\r\n\t\t};\r\n\t  \r\n\t\tconst orchRes = await PlatformApi.IafPassSvc.runDatasource(orchReq, ctx)\r\n\t\t  \r\n\t\tconsole.log(\&quot;orchRes\&quot;, JSON.stringify(orchRes))\r\n    },\r\n\r\n\tasync updateFileTags(input, libraries, ctx) {\r\n        let { PlatformApi, UiUtils } = libraries\r\n        const proj = await PlatformApi.IafProj.getCurrent(ctx)\r\n        let fileCollection = await PlatformApi.IafPassSvc.getFileCollection({\r\n            _userType: \&quot;file_container\&quot;,\r\n            _shortName: \&quot;Root Container\&quot;\r\n        }, ctx)\r\n        console.log(fileCollection, \&quot;fileCollection\&quot;)\r\n        const xlsxFiles = await UiUtils.IafLocalFile.selectFiles({ multiple: false, accept: \&quot;.xlsx\&quot; });\r\n        console.log(\&quot;xlsxFiles\&quot;, xlsxFiles);\r\n        const typeWorkbook = await UiUtils.IafDataPlugin.readXLSXFiles(xlsxFiles);\r\n        const wbJSON = UiUtils.IafDataPlugin.workbookToJSON(typeWorkbook[0]);\r\n        let iaf_dt_grid_data = wbJSON[\&quot;Property Info\&quot;]\r\n        let data_as_objects = UiUtils.IafDataPlugin.parseGridData({ gridData: iaf_dt_grid_data })\r\n        console.log(data_as_objects,\&quot;data_as_objects\&quot;)\r\n        let dataBySheet = _.map(_.groupBy(data_as_objects, dataObj =&gt; {\r\n            return dataObj[\&quot;sheet id\&quot;];\r\n        }), data =&gt; {\r\n            let res = { _id: _.get(data, \&quot;0.sheet id\&quot;), props: [] };\r\n            _.forEach(data, v =&gt; {\r\n                let property = { prop: v.Property, type: v.Type };\r\n                if (v.uom) {\r\n                    property.uom = v.uom;\r\n                }\r\n                res.props.push(property);\r\n            });\r\n            return res;\r\n        });\r\n        console.log(dataBySheet, \&quot;dataBySheet\&quot;)\r\n        let dataWithWorkbookData = _.map(dataBySheet, sheet =&gt; {\r\n            let workbook = UiUtils.IafDataPlugin.parseGridData({ gridData: wbJSON[sheet._id] });\r\n            return Object.assign(sheet, { workbook })\r\n        });\r\n        console.log(dataWithWorkbookData, \&quot;dataWithWorkbookData\&quot;)\r\n        let withCriteria = _.map(dataWithWorkbookData[0].workbook, row =&gt; {\r\n            const criteria = row.Name ? \&quot;File\&quot; : \&quot;Error\&quot;\r\n            row.criteria = criteria;\r\n            return row;\r\n        });\r\n        console.log(withCriteria,\&quot;withCriteria\&quot;)\r\n        let groupedRowsByCriteria = _.map(_.groupBy(withCriteria, dataObj =&gt; {\r\n            return dataObj[\&quot;criteria\&quot;];\r\n        }), data =&gt; {\r\n            let res = { _id: _.get(data, \&quot;0.criteria\&quot;), rows: [] };\r\n            _.forEach(data, v =&gt; {\r\n                res.rows.push(v);\r\n            });\r\n            return res;\r\n        });\r\n        console.log(groupedRowsByCriteria)\r\n        let fileRows = _.find(groupedRowsByCriteria, { _id: \&quot;File\&quot; })\r\n        if(fileRows == {}){\r\n            fileRows = { \&quot;_id\&quot;: \&quot;File\&quot;, \&quot;rows\&quot;: [] }\r\n        }\r\n        console.log(\&quot;fileRows\&quot;,fileRows)\r\n        let allDocs = await PlatformApi.IafPassSvc.getFileItems({\r\n            collectionDesc: {\r\n                _userItemId: fileCollection._userItemId,\r\n                _namespaces: proj._namespaces\r\n            },\r\n            query: { \&quot;fileAttributes.dtType\&quot;: { $exists: false } },\r\n            options: { page: { getAllItems: true } }\r\n        }, ctx)\r\n        console.log(allDocs,\&quot;allDocs\&quot;)\r\n        let docsRowPairs = _.map(allDocs,doc=&gt;{\r\n            let getDoc = _.find(fileRows.rows, {\&quot;Name\&quot;: doc.name })\r\n            if(getDoc){\r\n                return {\r\n                    \&quot;criteria\&quot;: \&quot;File\&quot;,\r\n                    \&quot;file\&quot;: doc,\r\n                    \&quot;row\&quot;: _.mapKeys(getDoc, (v, k) =&gt; _.camelCase(k))\r\n                  }\r\n                }else{\r\n                return {\r\n                    \&quot;criteria\&quot;: \&quot;NONE\&quot;,\r\n                    \&quot;file\&quot;: doc,\r\n                    \&quot;row\&quot;: null\r\n                  }\r\n            }\r\n        })\r\n        console.log(docsRowPairs,\&quot;docsRowPairs\&quot;)\r\n        let filteredPairs = _.filter(docsRowPairs, pair=&gt;{\r\n            return pair.row &amp;&amp; pair.row.criteria\r\n        })\r\n        console.log(filteredPairs,\&quot;filteredPairs\&quot;)\r\n        filteredPairs = _.filter(filteredPairs,pair=&gt;{\r\n            return  delete pair.row.Name\r\n        })\r\n        let updatedDocuments = _.map(filteredPairs,pair=&gt;{\r\n            return Object.assign(pair.file,{\r\n                \&quot;fileAttributes\&quot;: Object.assign(pair.file.fileAttributes,pair.row)\r\n              })\r\n        })\r\n        await PlatformApi.IafPassSvc.updateItemsBulk(\r\n            {\r\n                \&quot;_userItemId\&quot;: fileCollection._userItemId,\r\n                \&quot;_namespaces\&quot;: proj._namespaces,\r\n                \&quot;items\&quot;: updatedDocuments,\r\n                \&quot;chunkSize\&quot;: 100\r\n            }, ctx\r\n        );\r\n    }\r\n\r\n  }\r\n  \r\n  export default ProjSetup&quot;},&quot;_itemClass&quot;:&quot;Script&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">itemsvc/api/v1/nameduseritems?nsfilter=DEMOUSER0601_NQj1K6Fn</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_T001_LOAD PROJECT SETUP" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;_name&quot;:&quot;BIMPK Upload&quot;,&quot;_shortName&quot;:&quot;iaf_ext_bimpk_upload&quot;,&quot;_description&quot;:&quot;Load, Transform and Write Model from BIMPK&quot;,&quot;_userType&quot;:&quot;iaf_ext_bimpk_upload&quot;,&quot;_version&quot;:{&quot;_userData&quot;:&quot;const groupBy = (objectArray, property) =&gt; {\n  return objectArray.reduce((acc, obj) =&gt; {\n      let key = obj[property];\n      key = key.replace(/[.]+/g, \&quot;\&quot;);\n      if (!acc[key]) {\n          acc[key] = {};\n      }\n      // Add object to list for given key&apos;s value\n      acc[key] = obj;\n      return acc;\n  }, {});\n}\n\nconst _mapItemsAsRelated = (parentItems, relatedItems, fromField, relatedField) =&gt; {\n  let res = [];\n  for (let i = 0, l = parentItems.length; i &lt; l; i++) {\n      let relatedRecs = [];\n\n      let parentItem = parentItems[i];\n      let fromValues = [];\n\n      if (!(parentItem[fromField]) &amp;&amp; fromField.indexOf(\&quot;.\&quot;) &gt; 1) {\n          fromValues = fromField.split(\&quot;.\&quot;).reduce((o, i) =&gt; o[i] || [], parentItem);\n      } else {\n          fromValues = Array.isArray(parentItem[fromField]) ? parentItem[fromField] : [parentItem[fromField]];\n      }\n\n      if (fromValues &amp;&amp; fromValues.length &gt; 0)\n          relatedRecs = relatedItems.filter((r) =&gt; fromValues.includes(r[relatedField]));\n\n      if (relatedRecs.length &gt; 0) {\n          res.push({\n              parentItem: parentItems[i],\n              relatedItems: relatedRecs\n          });\n      }\n  }\n  return res;\n}\n\nconst createBIMCollections = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Collections\&quot;}));\n\n  let packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\n  let packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\n  console.log(\&quot;Create BIM Collection\&quot;);\n  //create Elements Collection\n  const elementsCol = {\n      \&quot;_name\&quot;: packagename + \&quot;_elements\&quot;,\n      \&quot;_shortName\&quot;: packagenameShort + \&quot;_ba_elem\&quot;,\n      \&quot;_description\&quot;: \&quot;Elements in BA model\&quot;,\n      \&quot;_userType\&quot;: \&quot;rvt_elements\&quot;,\n      \&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_coll = await IafScriptEngine.createCollection(elementsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Collection\&quot;}));\n\n  console.log(\&quot;model element collection\&quot;, model_els_coll)\n  let elemCollIndex = {\n      \&quot;_id\&quot;: model_els_coll._userItemId,\n      indexDefs: [\n          {\n              key: {\n                  \&quot;id\&quot;:1,\n              },\n              options: {\n                  name: \&quot;model_els_coll_id\&quot;,\n                  default_language: \&quot;english\&quot;\n              }\n          },\n          {\n              key: {\n                  \&quot;source_id\&quot;:1,\n              },\n              options: {\n                  name: \&quot;model_els_coll_source_id\&quot;,\n                  default_language: \&quot;english\&quot;\n              }\n          }\n      ]\n  };\n  let elemIndex = await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  //create Element Properties Collection\n  const modelElemPropsCol = {\n      \&quot;_name\&quot;: packagename + \&quot;_elem_props\&quot;,\n      \&quot;_shortName\&quot;: packagenameShort + \&quot;_elprops\&quot;,\n      \&quot;_description\&quot;: \&quot;Element Props in BA model\&quot;,\n      \&quot;_userType\&quot;: \&quot;rvt_element_props\&quot;,\n      \&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_props_coll = await IafScriptEngine.createCollection(modelElemPropsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Props Collection\&quot;}));\n\n  //create Type Elements Collection\n  const typeElemsCol = {\n      \&quot;_name\&quot;: packagename + \&quot;_type_el\&quot;,\n      \&quot;_shortName\&quot;: packagenameShort + \&quot;_type_el\&quot;,\n      \&quot;_description\&quot;: \&quot;Type Elements in BA Check model\&quot;,\n      \&quot;_userType\&quot;: \&quot;rvt_type_elements\&quot;,\n      \&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_type_el_coll = await IafScriptEngine.createCollection(typeElemsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Type Element Collection\&quot;}));\n\n  console.log(\&quot;model type collection\&quot;, model_type_el_coll)\n\n  let typeElemCollIndex = {\n      \&quot;_id\&quot;: model_type_el_coll._userItemId,\n      indexDefs: [\n          {\n              key: {\n                  \&quot;id\&quot;:1,\n              },\n              options: {\n                  name: \&quot;typeElemsCol_id\&quot;,\n                  default_language: \&quot;english\&quot;\n              }\n          },\n          {\n              key: {\n                  \&quot;source_id\&quot;:1,\n              },\n              options: {\n                  name: \&quot;typeElemsCol_source_id\&quot;,\n                  default_language: \&quot;english\&quot;\n              }\n          }\n      ]\n  }\n  let typeindex = await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  //create Geometry File Collection\n  const geometryFilesCol = {\n      \&quot;_name\&quot;: packagename + \&quot;_geom_file\&quot;,\n      \&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_file\&quot;,\n      \&quot;_description\&quot;: \&quot;File Collection for Geometry Files\&quot;,\n      \&quot;_userType\&quot;: \&quot;bim_model_geomresources\&quot;,\n      \&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_file_coll = await IafScriptEngine.createCollection(geometryFilesCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry File Collection\&quot;}));\n\n  //create Geometry View Collection\n  const geometryViewsCol = {\n      \&quot;_name\&quot;: packagename + \&quot;_geom_view\&quot;,\n      \&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_view\&quot;,\n      \&quot;_description\&quot;: \&quot;Geometry Views in Model\&quot;,\n      \&quot;_userType\&quot;: \&quot;bim_model_geomviews\&quot;,\n      \&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_views_coll = await IafScriptEngine.createCollection(geometryViewsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry View Collection\&quot;}));\n\n  //create Model Data Cache Collection\n  const dataCacheCol = {\n    \&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n    \&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n    \&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n    \&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n    \&quot;_namespaces\&quot;: ctx._namespaces\n}\nconst data_cache_coll = await IafScriptEngine.createCollection(dataCacheCol, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n\nlet bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\nlet bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\nconsole.log(\&quot;fileid: \&quot; + bimpkFileId + \&quot;, bimpkFileVersionid: \&quot; + bimpkFileVersionId);\n\n  //create Model Composite Item\n  const modelCompItem = {\n    \&quot;_name\&quot;: packagename,\n    \&quot;_shortName\&quot;: packagenameShort + \&quot;_modelver\&quot;,\n    \&quot;_description\&quot;: \&quot;BIM model version by transform\&quot;,\n    \&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n    \&quot;_namespaces\&quot;: ctx._namespaces,\n    \&quot;_version\&quot;: {\n      \&quot;_userAttributes\&quot;: {\n        \&quot;bimpk\&quot;: {\n          \&quot;fileId\&quot;: bimpkFileId,\n          \&quot;fileVersionId\&quot;: bimpkFileVersionId\n        }\n      }\n    }\n  }\n  let model = await IafScriptEngine.createNamedCompositeItem(modelCompItem, ctx)\n  await IafScriptEngine.setVar(\&quot;bim_model\&quot;, model);\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Model Composite Item\&quot;}));\n  console.log(JSON.stringify(model, null, 3))\n\n  let _myCollections = {\n      \&quot;model_els_coll\&quot;: model_els_coll,\n      \&quot;model_els_props_coll\&quot;: model_els_props_coll,\n      \&quot;model_type_el_coll\&quot;: model_type_el_coll,\n      \&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n      \&quot;model_geom_views_coll\&quot;: model_geom_views_coll,\n      \&quot;data_cache_coll\&quot;: data_cache_coll\n\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createBIMCollectionVersion = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Found Previous Model Creating Versions\&quot;}));\n\n  let bimModel = await IafScriptEngine.getVar(\&quot;bim_model\&quot;)\n  const modelRelatedCollection = await IafScriptEngine.getCollectionsInComposite(bimModel._id,null, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version - bim_model\&quot;}));\n\n  console.log(\&quot;bimModel\&quot;, JSON.stringify(bimModel))\n\n  let bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\n  let bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\n  console.log(\&quot;bimpkFileId\&quot;, JSON.stringify(bimpkFileId))\n\n  console.log(\&quot;bimpkFileVersionId\&quot;, JSON.stringify(bimpkFileVersionId))\n\n  let newModelVer = {\&quot;namedUserItemId\&quot;:bimModel._id}\n\n  newModelVer._userAttributes = {\n      bimpk: {\n        fileId: bimpkFileId,\n        fileVersionId: bimpkFileVersionId\n      }\n  }\n\n  let version = await IafScriptEngine.createNamedUserItemVersion(newModelVer,ctx);\n  console.log(\&quot;Create BIM Collection Version bim_model version\&quot;);\n  console.log(JSON.stringify(version, null, 3))\n\n  console.log(\&quot;newModversionelVer\&quot;, JSON.stringify(version))\n\n  const model_els_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_elements&apos;);\n  const model_els_props_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_element_props&apos;);\n  const model_type_el_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_type_elements&apos;);\n  const model_geom_file_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomresources&apos;);\n  const model_geom_views_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomviews&apos;);\n\n  let data_cache_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;data_cache&apos;);\n  if (!data_cache_coll) {\n    let packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\n    let packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n    \n    let data_cache_coll_def = {\n      \&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n      \&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n      \&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n      \&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n      \&quot;_namespaces\&quot;: ctx._namespaces\n    }\n    data_cache_coll = await IafScriptEngine.createCollection(data_cache_coll_def, ctx);\n    console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n  }\n\n  // create the versions\n\n  const model_els_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n    \&quot;namedUserItemId\&quot;: model_els_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_coll\&quot;}));\n\n  const model_els_props_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n    \&quot;namedUserItemId\&quot;: model_els_props_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_props_coll\&quot;}));\n\n  const model_type_el_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n    \&quot;namedUserItemId\&quot;: model_type_el_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_type_el_coll\&quot;}));\n\n  const data_cache_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n    \&quot;namedUserItemId\&quot;: data_cache_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Data Cache Version data_cache\&quot;}));\n\n  const model_geom_file_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n    \&quot;namedUserItemId\&quot;: model_geom_file_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_file_coll\&quot;}));\n\n  const model_geom_views_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n    \&quot;namedUserItemId\&quot;: model_geom_views_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_views_coll\&quot;}));\n\n  let elemCollIndex = {\n    \&quot;_id\&quot;: model_els_coll._userItemId,\n    indexDefs: [\n      {\n        key: {\n          \&quot;id\&quot;:1,\n        },\n        options: {\n          name: \&quot;model_els_coll_id\&quot;,\n          default_language: \&quot;english\&quot;\n        }\n      },\n      {\n        key: {\n          \&quot;source_id\&quot;:1,\n        },\n        options: {\n          name: \&quot;model_els_coll_source_id\&quot;,\n          default_language: \&quot;english\&quot;\n        }\n      }\n    ]\n  };\n  await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  let typeElemCollIndex = {\n      \&quot;_id\&quot;: model_type_el_coll._userItemId,\n      indexDefs: [\n          {\n              key: {\n                  \&quot;id\&quot;:1,\n              },\n              options: {\n                  name: \&quot;typeElemsCol_id\&quot;,\n                  default_language: \&quot;english\&quot;\n              }\n          },\n          {\n              key: {\n                  \&quot;source_id\&quot;:1,\n              },\n              options: {\n                  name: \&quot;typeElemsCol_source_id\&quot;,\n                  default_language: \&quot;english\&quot;\n              }\n          }\n      ]\n  }\n  await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  // set them in global variables\n  IafScriptEngine.setVar(\&quot;model_els_coll\&quot;, model_els_coll);\n  IafScriptEngine.setVar(\&quot;model_els_props_coll\&quot;, model_els_props_coll);\n  IafScriptEngine.setVar(\&quot;model_type_el_coll\&quot;, model_type_el_coll);\n  IafScriptEngine.setVar(\&quot;data_cache_coll\&quot;, data_cache_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_file_coll\&quot;, model_geom_file_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_views_coll\&quot;, model_geom_views_coll);\n\n  let _myCollections = {\n    \&quot;model_els_coll\&quot;: model_els_coll,\n    \&quot;model_els_props_coll\&quot;: model_els_props_coll,\n    \&quot;model_type_el_coll\&quot;: model_type_el_coll,\n    \&quot;data_cache_coll\&quot;: data_cache_coll,\n    \&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n    \&quot;model_geom_views_coll\&quot;: model_geom_views_coll\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createRelatedItemsAndRelationships = async (_colls, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Relations and Related Items\&quot;}));\n\n  await IafScriptEngine.addRelatedCollections({\n    \&quot;namedCompositeItemId\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n    \&quot;relatedCollections\&quot;: [\n      _colls.model_els_coll._userItemId,\n      _colls.model_els_props_coll._userItemId,\n      _colls.model_type_el_coll._userItemId,\n      _colls.data_cache_coll._userItemId,\n      _colls.model_geom_file_coll._userItemId,\n      _colls.model_geom_views_coll._userItemId\n  ]}, ctx);\n  console.log(\&quot;Create Related Collection\&quot;);\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n    \&quot;_userItemId\&quot;: _colls.model_els_coll._userItemId,\n    \&quot;_namespaces\&quot;: ctx._namespaces,\n    \&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_els\&quot;);\n\n  const type_els = await IafScriptEngine.createItemsBulk({\n    \&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n    \&quot;_namespaces\&quot;: ctx._namespaces,\n    \&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_type_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_type_els\&quot;);\n\n  await IafScriptEngine.createItemsAsRelatedBulk({\n    \&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n    \&quot;_userItemId\&quot;: _colls.model_els_props_coll._userItemId,\n    \&quot;_namespaces\&quot;: ctx._namespaces,\n    \&quot;items\&quot;: IafScriptEngine.getVar(\&quot;properties\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection properties\&quot;);\n\n  const el_to_type_relations = await IafScriptEngine.createRelations({\n    \&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n    \&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n    \&quot;_namespaces\&quot;: ctx._namespaces,\n    \&quot;relations\&quot;: IafScriptEngine.getVar(\&quot;manage_el_to_type_relations\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection Relations\&quot;);\n\n  await IafScriptEngine.setVar(\&quot;outparams\&quot;, {\n    \&quot;filecolid\&quot;: _colls.model_geom_file_coll._userItemId,\n    \&quot;viewcolid\&quot;: _colls.model_geom_views_coll._userItemId,\n    \&quot;compositeitemid\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n    \&quot;myCollections\&quot;: _colls\n  });\n  return await IafScriptEngine.getVar(\&quot;outparams\&quot;);\n}\n\nconst extractBimpk = async (param, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  try {\n      //\n\n      // Extract data \n      let _objectsArray = {\n          \&quot;objects\&quot;: [],\n          \&quot;properties\&quot;: [],\n          \&quot;types\&quot;: []\n      }\n      param.files.forEach((file) =&gt; {\n          file.occurences.forEach((occ) =&gt; {\n              occ.objects.objects.forEach((obj) =&gt; {\n                  let _myObj = {\n                      \&quot;package_id\&quot;: obj.id,\n                      \&quot;type_id\&quot;: obj.type,\n                      \&quot;relationships\&quot;: obj.relationships,\n                      \&quot;source_id\&quot;: obj.sourceId,\n                      \&quot;properties\&quot;: obj.properties,\n                      \&quot;source_filename\&quot;:file.name\n                  }\n                  _objectsArray.objects.push(_myObj);\n\n              });\n              occ.objects.properties.forEach((prop) =&gt; {\n                  _objectsArray.properties.push(prop);\n              })\n\n              occ.objects.types.forEach((type) =&gt; {\n                  let _type = {\n                      \&quot;id\&quot;: type.id,\n                      \&quot;name\&quot;: type.name,\n                      \&quot;source_id\&quot;: type.sourceId,\n                      \&quot;properties\&quot;: type.properties\n\n                  }\n                  _objectsArray.types.push(_type);\n              });\n\n          });\n\n      });\n      console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Data Extraction is complete\&quot;}));\n      // Data Extraction Completed\n      //--------------------------------\n      // load the typemap\n      let assetTypeMap = null\n      try {\n          assetTypeMap = await IafScriptEngine.getItems({\n                  \&quot;collectionDesc\&quot;: {\n                      \&quot;_userType\&quot;: \&quot;iaf_dt_type_map_defs_coll\&quot;,\n                      \&quot;_namespaces\&quot;: IafScriptEngine.getVar(\&quot;namespaces\&quot;)\n                  },\n                  \&quot;options\&quot;: {\n                      \&quot;page\&quot;: {\n                          \&quot;getAllItems\&quot;: true\n                      }\n                  }\n              }, ctx);\n      } catch (err) {\n          console.log(&apos;{\&quot;level\&quot;: \&quot;info\&quot;, \&quot;message\&quot;: \&quot;Type Map collection does not exist\&quot;}&apos;)\n      }\n\n      for (let type of _objectsArray.types) {\n          for (let prop of type.properties) {\n              let _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\n              prop.dName = _myProp.dName;\n              if (_myProp.hasOwnProperty(\&quot;Asset Category\&quot;)) {\n                  prop.baType = _myProp[\&quot;Asset Category\&quot;]\n              }\n\n          }\n          type._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n                  \&quot;format\&quot;: \&quot;hex\&quot;\n              });\n          type.properties = groupBy(type.properties, \&quot;dName\&quot;);\n          if (assetTypeMap &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Family\&quot;) &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Type\&quot;)) {\n              let _myRow = assetTypeMap.find(x =&gt; x[\&quot;Revit Family\&quot;] == type.properties[\&quot;Revit Family\&quot;].val &amp;&amp; x[\&quot;Revit Type\&quot;] == type.properties[\&quot;Revit Type\&quot;].val);\n              if (_myRow) {\n                  type.dtCategory = _myRow.dtCategory;\n                  type.dtType = _myRow.dtType;\n              }\n          };\n      };\n      console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Type Extraction is complete\&quot;}));\n      // do the same for properties in the object\n      for (let obj of _objectsArray.objects) {\n          obj.properties.forEach((prop) =&gt; {\n              let _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\n              prop.dName = _myProp.dName;\n\n          });\n\n          obj._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n                  \&quot;format\&quot;: \&quot;hex\&quot;\n              });\n          obj.properties = groupBy(obj.properties, \&quot;dName\&quot;);\n          let _myVal = _objectsArray.types.find(x =&gt; x.id == obj.type_id);\n          obj.dtCategory = _myVal.dtCategory;\n          obj.dtType = _myVal.dtType;\n          if (_myVal.hasOwnProperty(\&quot;baType\&quot;)) {\n              obj.baType = _myVal.baType;\n          }\n\n      };\n      console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Property Extraction is complete\&quot;}));\n      let _myProperties =[];\n      _objectsArray.objects.forEach((object) =&gt;{\n          let _myProp = {\n              _id:object._id,\n              properties:object.properties\n          }\n          _myProperties.push(_myProp);\n\n      });\n      await IafScriptEngine.setVar(\&quot;properties\&quot;, _myProperties);\n      _objectsArray.objects.forEach(e =&gt; { delete e.properties });\n      await IafScriptEngine.setVar(\&quot;manage_els\&quot;, _objectsArray.objects);\n      await IafScriptEngine.setVar(\&quot;manage_type_els\&quot;, _objectsArray.types);\n      await IafScriptEngine.setVar(\&quot;manage_el_to_type_relations\&quot;,\n          _mapItemsAsRelated(IafScriptEngine.getVar(\&quot;manage_els\&quot;),\n              IafScriptEngine.getVar(\&quot;manage_type_els\&quot;), \&quot;type_id\&quot;, \&quot;id\&quot;));\n  } catch (err) {\n      console.log(err);\n  }\n}\n\nconst cacheSourceFileGraphicsIds = async(params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n  \n  const { model_els_coll, data_cache_coll } = params.inparams.myCollections\n\n  console.log(&apos;--&gt; cache elems: &apos; + model_els_coll._name)\n  console.log(&apos;--&gt; cache data: &apos; + data_cache_coll._name)\n\n  let sourcefiles = await IafScriptEngine.getDistinct({\n    collectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\n    field: &apos;source_filename&apos;,\n    options: { getCollInfo: true }\n  }, ctx)\n\n  let sourcefileNames = sourcefiles._list[0]._versions[0]._relatedItems.source_filename\n\n  let cacheDataItems = []\n  for (let i = 0; i &lt; sourcefileNames.length; i++) {\n\n    let packageIds = await IafScriptEngine.getDistinct({\n      collectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\n      query: {source_filename: sourcefileNames[i]},\n      field: &apos;package_id&apos;,\n      options: { getCollInfo: true }\n    }, ctx)\n\n    cacheDataItems.push({\n      dataType: &apos;sourcefileToPkgIds&apos;,\n      data: {\n        source_filename: sourcefileNames[i],\n        package_id: packageIds._list[0]._versions[0]._relatedItems.package_id\n      }\n    })\n  }\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n    \&quot;_userItemId\&quot;: data_cache_coll._userItemId,\n    \&quot;_namespaces\&quot;: ctx._namespaces,\n    \&quot;items\&quot;: cacheDataItems\n  }, ctx);\n  console.log(\&quot;Create Cache Data: source filenames to package_ids\&quot;);\n\n}\n\n\nexport default {\n  async uploadBimpk(params, libraries, ctx) {\n\n    const { PlatformApi,  IafScriptEngine} = libraries;\n\n    const {IafItemSvc} = PlatformApi\n\n    let param = params.inparams;\n    // set global variables first\n    await IafScriptEngine.setVar(\&quot;namespaces\&quot;, ctx._namespaces);\n    await IafScriptEngine.setVar(\&quot;package_name\&quot;, param.filename);\n    await IafScriptEngine.setVar(\&quot;package_name_short\&quot;, param.filename.substring(0, 11));\n    await IafScriptEngine.setVar(\&quot;bimpk_fileid\&quot;, param._fileId);\n    await IafScriptEngine.setVar(\&quot;bimpk_fileVersionId\&quot;, param._fileVersionId);\n    debugger;\n\n    let res = await IafItemSvc.getNamedUserItems({\&quot;query\&quot;:{\n        \&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n        \&quot;_versions._userAttributes.bimpk.fileId\&quot;: param._fileId,\n        \&quot;_itemClass\&quot;:\&quot;NamedCompositeItem\&quot;\n    }},ctx,{});\n\n  let bim_model = res._list[0];\n\n  console.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\n\n  if (bim_model) {\n      IafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\n      await extractBimpk(param, libraries, ctx);\n      await createBIMCollectionVersion(param, libraries, ctx);\n\n  } else {\n      await extractBimpk(param, libraries, ctx);\n      await createBIMCollections(param, libraries, ctx);\n\n  }\n  return IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n },\n  async createModelDataCache(params, libraries, ctx) {\n\n    const { PlatformApi,  IafScriptEngine} = libraries;\n\n    await cacheSourceFileGraphicsIds(params, libraries, ctx)\n\n    return IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n  }\n}&quot;},&quot;_namespaces&quot;:[&quot;${CNAMESPACESID}&quot;],&quot;_itemClass&quot;:&quot;Script&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}&amp;nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_T001_LOAD PROJECT SETUP" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;_name&quot;: &quot;BIMPK Upload&quot;,&quot;_shortName&quot;: &quot;iaf_ext_bimpk_upload&quot;,&quot;_description&quot;: &quot;Load, Transform and Write Model from BIMPK&quot;,&quot;_userType&quot;: &quot;iaf_ext_bimpk_upload&quot;,&quot;_version&quot;:{&quot;_userData&quot;:&quot;const groupBy = (objectArray,property) =&gt; {\n  return objectArray.reduce((acc, obj) =&gt; {\nlet key = obj[property];\nkey = key.replace(/[.]+/g, \&quot;\&quot;);\n\nif (!acc[key]) {\n  acc[key] = {};\n}\n// Add object to list for given key&apos;s value\nacc[key] = obj;\nreturn acc;\n  }, {});\n}\n\nconst _mapItemsAsRelated = (parentItems, relatedItems, fromField, relatedField) =&gt; {\n  let res = [];\n  for (let i = 0, l = parentItems.length; i &lt; l; i++) {\nlet relatedRecs = [];\n\nlet parentItem = parentItems[i];\nlet fromValues = [];\n\nif (!(parentItem[fromField]) &amp;&amp; fromField.indexOf(\&quot;.\&quot;) &gt; 1) {\n  fromValues = fromField.split(\&quot;.\&quot;).reduce((o, i) =&gt; o[i] || [], parentItem);\n} else {\n  fromValues = Array.isArray(parentItem[fromField]) ? parentItem[fromField] : [parentItem[fromField]];\n}\n\nif (fromValues &amp;&amp; fromValues.length &gt; 0)\n  relatedRecs = relatedItems.filter((r) =&gt; fromValues.includes(r[relatedField]));\n\nif (relatedRecs.length &gt; 0) {\n  res.push({\nparentItem: parentItems[i],\nrelatedItems: relatedRecs\n  });\n}\n  }\n  return res;\n}\n\nconst createBIMCollections = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Collections\&quot;}));\n\n  let packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\n  let packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\n  console.log(\&quot;Create BIM Collection\&quot;);\n  //create Elements Collection\n  const elementsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_elements\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_ba_elem\&quot;,\n\&quot;_description\&quot;: \&quot;Elements in BA model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_elements\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_coll = await IafScriptEngine.createCollection(elementsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Collection\&quot;}));\n\n  console.log(\&quot;model element collection\&quot;, model_els_coll)\n  let elemCollIndex = {\n\&quot;_id\&quot;: model_els_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  };\n  let elemIndex = await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  //create Element Properties Collection\n  const modelElemPropsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_elem_props\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_elprops\&quot;,\n\&quot;_description\&quot;: \&quot;Element Props in BA model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_element_props\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_props_coll = await IafScriptEngine.createCollection(modelElemPropsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Props Collection\&quot;}));\n\n  //create Type Elements Collection\n  const typeElemsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_type_el\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_type_el\&quot;,\n\&quot;_description\&quot;: \&quot;Type Elements in BA Check model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_type_elements\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_type_el_coll = await IafScriptEngine.createCollection(typeElemsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Type Element Collection\&quot;}));\n\n  console.log(\&quot;model type collection\&quot;, model_type_el_coll)\n\n  let typeElemCollIndex = {\n\&quot;_id\&quot;: model_type_el_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  }\n  let typeindex = await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  //create Geometry File Collection\n  const geometryFilesCol = {\n\&quot;_name\&quot;: packagename + \&quot;_geom_file\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_file\&quot;,\n\&quot;_description\&quot;: \&quot;File Collection for Geometry Files\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_geomresources\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_file_coll = await IafScriptEngine.createCollection(geometryFilesCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry File Collection\&quot;}));\n\n  //create Geometry View Collection\n  const geometryViewsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_geom_view\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_view\&quot;,\n\&quot;_description\&quot;: \&quot;Geometry Views in Model\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_geomviews\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_views_coll = await IafScriptEngine.createCollection(geometryViewsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry View Collection\&quot;}));\n\n  //create Model Data Cache Collection\n  const dataCacheCol = {\n\&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n\&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n\&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n}\nconst data_cache_coll = await IafScriptEngine.createCollection(dataCacheCol, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n\nlet bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\nlet bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\nconsole.log(\&quot;fileid: \&quot; + bimpkFileId + \&quot;, bimpkFileVersionid: \&quot; + bimpkFileVersionId);\n\n  //create Model Composite Item\n  const modelCompItem = {\n\&quot;_name\&quot;: packagename,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_modelver\&quot;,\n\&quot;_description\&quot;: \&quot;BIM model version by transform\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;_version\&quot;: {\n\&quot;_userAttributes\&quot;: {\n\&quot;bimpk\&quot;: {\n  \&quot;fileId\&quot;: bimpkFileId,\n  \&quot;fileVersionId\&quot;: bimpkFileVersionId\n}\n}\n}\n  }\n  let model = await IafScriptEngine.createNamedCompositeItem(modelCompItem, ctx)\n  await IafScriptEngine.setVar(\&quot;bim_model\&quot;, model);\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Model Composite Item\&quot;}));\n  console.log(JSON.stringify(model, null, 3))\n\n  let _myCollections = {\n\&quot;model_els_coll\&quot;: model_els_coll,\n\&quot;model_els_props_coll\&quot;: model_els_props_coll,\n\&quot;model_type_el_coll\&quot;: model_type_el_coll,\n\&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n\&quot;model_geom_views_coll\&quot;: model_geom_views_coll,\n\&quot;data_cache_coll\&quot;: data_cache_coll\n\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createBIMCollectionVersion = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Found Previous Model Creating Versions\&quot;}));\n\n  let bimModel = await IafScriptEngine.getVar(\&quot;bim_model\&quot;)\n  const modelRelatedCollection = await IafScriptEngine.getCollectionsInComposite(bimModel._id,null, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version - bim_model\&quot;}));\n\n  console.log(\&quot;bimModel\&quot;, JSON.stringify(bimModel))\n\n  let bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\n  let bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\n  console.log(\&quot;bimpkFileId\&quot;, JSON.stringify(bimpkFileId))\n\n  console.log(\&quot;bimpkFileVersionId\&quot;, JSON.stringify(bimpkFileVersionId))\n\n  let newModelVer = {\&quot;namedUserItemId\&quot;:bimModel._id}\n\n  newModelVer._userAttributes = {\nbimpk: {\nfileId: bimpkFileId,\nfileVersionId: bimpkFileVersionId\n}\n  }\n\n  let version = await IafScriptEngine.createNamedUserItemVersion(newModelVer,ctx);\n  console.log(\&quot;Create BIM Collection Version bim_model version\&quot;);\n  console.log(JSON.stringify(version, null, 3))\n\n  console.log(\&quot;newModversionelVer\&quot;, JSON.stringify(version))\n\n  const model_els_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_elements&apos;);\n  const model_els_props_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_element_props&apos;);\n  const model_type_el_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_type_elements&apos;);\n  const model_geom_file_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomresources&apos;);\n  const model_geom_views_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomviews&apos;);\n\n  let data_cache_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;data_cache&apos;);\n  if (!data_cache_coll) {\nlet packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\nlet packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\nlet data_cache_coll_def = {\n\&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n\&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n\&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n}\ndata_cache_coll = await IafScriptEngine.createCollection(data_cache_coll_def, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n  }\n\n  // create the versions\n\n  const model_els_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_els_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_coll\&quot;}));\n\n  const model_els_props_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_els_props_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_props_coll\&quot;}));\n\n  const model_type_el_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_type_el_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_type_el_coll\&quot;}));\n\n  const data_cache_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: data_cache_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Data Cache Version data_cache\&quot;}));\n\n  const model_geom_file_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_geom_file_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_file_coll\&quot;}));\n\n  const model_geom_views_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_geom_views_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_views_coll\&quot;}));\n\n  let elemCollIndex = {\n\&quot;_id\&quot;: model_els_coll._userItemId,\nindexDefs: [\n{\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n},\n{\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n}\n]\n  };\n  await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  let typeElemCollIndex = {\n\&quot;_id\&quot;: model_type_el_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  }\n  await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  // set them in global variables\n  IafScriptEngine.setVar(\&quot;model_els_coll\&quot;, model_els_coll);\n  IafScriptEngine.setVar(\&quot;model_els_props_coll\&quot;, model_els_props_coll);\n  IafScriptEngine.setVar(\&quot;model_type_el_coll\&quot;, model_type_el_coll);\n  IafScriptEngine.setVar(\&quot;data_cache_coll\&quot;, data_cache_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_file_coll\&quot;, model_geom_file_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_views_coll\&quot;, model_geom_views_coll);\n\n  let _myCollections = {\n\&quot;model_els_coll\&quot;: model_els_coll,\n\&quot;model_els_props_coll\&quot;: model_els_props_coll,\n\&quot;model_type_el_coll\&quot;: model_type_el_coll,\n\&quot;data_cache_coll\&quot;: data_cache_coll,\n\&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n\&quot;model_geom_views_coll\&quot;: model_geom_views_coll\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createRelatedItemsAndRelationships = async (_colls, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Relations and Related Items\&quot;}));\n\n  await IafScriptEngine.addRelatedCollections({\n\&quot;namedCompositeItemId\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n\&quot;relatedCollections\&quot;: [\n_colls.model_els_coll._userItemId,\n_colls.model_els_props_coll._userItemId,\n_colls.model_type_el_coll._userItemId,\n_colls.data_cache_coll._userItemId,\n_colls.model_geom_file_coll._userItemId,\n_colls.model_geom_views_coll._userItemId\n  ]}, ctx);\n  console.log(\&quot;Create Related Collection\&quot;);\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_els\&quot;);\n\n  const type_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_type_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_type_els\&quot;);\n\n  await IafScriptEngine.createItemsAsRelatedBulk({\n\&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_userItemId\&quot;: _colls.model_els_props_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;properties\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection properties\&quot;);\n\n  const el_to_type_relations = await IafScriptEngine.createRelations({\n\&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;relations\&quot;: IafScriptEngine.getVar(\&quot;manage_el_to_type_relations\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection Relations\&quot;);\n\n  await IafScriptEngine.setVar(\&quot;outparams\&quot;, {\n\&quot;filecolid\&quot;: _colls.model_geom_file_coll._userItemId,\n\&quot;viewcolid\&quot;: _colls.model_geom_views_coll._userItemId,\n\&quot;compositeitemid\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n\&quot;myCollections\&quot;: _colls\n  });\n  return await IafScriptEngine.getVar(\&quot;outparams\&quot;);\n}\n\nconst extractBimpk = async (param, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  try {\n//\n\n// Extract data \nlet _objectsArray = {\n  \&quot;objects\&quot;: [],\n  \&quot;properties\&quot;: [],\n  \&quot;types\&quot;: []\n}\nparam.files.forEach((file) =&gt; {\n  file.occurences.forEach((occ) =&gt; {\nocc.objects.objects.forEach((obj) =&gt; {\n  let _myObj = {\n\&quot;package_id\&quot;: obj.id,\n\&quot;type_id\&quot;: obj.type,\n\&quot;relationships\&quot;: obj.relationships,\n\&quot;source_id\&quot;: obj.sourceId,\n\&quot;properties\&quot;: obj.properties,\n\&quot;source_filename\&quot;:file.name\n  }\n  _objectsArray.objects.push(_myObj);\n\n});\nocc.objects.properties.forEach((prop) =&gt; {\n  _objectsArray.properties.push(prop);\n})\n\nocc.objects.types.forEach((type) =&gt; {\n  let _type = {\n\&quot;id\&quot;: type.id,\n\&quot;name\&quot;: type.name,\n\&quot;source_id\&quot;: type.sourceId,\n\&quot;properties\&quot;: type.properties\n\n  }\n  _objectsArray.types.push(_type);\n});\n\n  });\n\n});\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Data Extraction is complete\&quot;}));\n// Data Extraction Completed\n//--------------------------------\n// load the typemap\nlet assetTypeMap = null\ntry {\n  assetTypeMap = await IafScriptEngine.getItems({\n  \&quot;collectionDesc\&quot;: {\n\&quot;_userType\&quot;: \&quot;iaf_dt_type_map_defs_coll\&quot;,\n\&quot;_namespaces\&quot;: IafScriptEngine.getVar(\&quot;namespaces\&quot;)\n  },\n  \&quot;options\&quot;: {\n\&quot;page\&quot;: {\n  \&quot;getAllItems\&quot;: true\n}\n  }\n}, ctx);\n} catch (err) {\n  console.log(&apos;{\&quot;level\&quot;: \&quot;info\&quot;, \&quot;message\&quot;: \&quot;Type Map collection does not exist\&quot;}&apos;)\n}\n\nfor (let type of _objectsArray.types) {\n  for (let prop of type.properties) {\nlet _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\nprop.dName = _myProp.dName;\nif (_myProp.hasOwnProperty(\&quot;Asset Category\&quot;)) {\n  prop.baType = _myProp[\&quot;Asset Category\&quot;]\n}\n\n  }\n  type._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n  \&quot;format\&quot;: \&quot;hex\&quot;\n});\n  type.properties = groupBy(type.properties, \&quot;dName\&quot;);\n  if (assetTypeMap &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Family\&quot;) &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Type\&quot;)) {\nlet _myRow = assetTypeMap.find(x =&gt; x[\&quot;Revit Family\&quot;] == type.properties[\&quot;Revit Family\&quot;].val &amp;&amp; x[\&quot;Revit Type\&quot;] == type.properties[\&quot;Revit Type\&quot;].val);\nif (_myRow) {\n  type.dtCategory = _myRow.dtCategory;\n  type.dtType = _myRow.dtType;\n}\n  };\n};\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Type Extraction is complete\&quot;}));\n// do the same for properties in the object\nfor (let obj of _objectsArray.objects) {\n  obj.properties.forEach((prop) =&gt; {\nlet _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\nprop.dName = _myProp.dName;\n\n  });\n\n  obj._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n  \&quot;format\&quot;: \&quot;hex\&quot;\n});\n  obj.properties = groupBy(obj.properties, \&quot;dName\&quot;);\n  let _myVal = _objectsArray.types.find(x =&gt; x.id == obj.type_id);\n  obj.dtCategory = _myVal.dtCategory;\n  obj.dtType = _myVal.dtType;\n  if (_myVal.hasOwnProperty(\&quot;baType\&quot;)) {\nobj.baType = _myVal.baType;\n  }\n\n};\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Property Extraction is complete\&quot;}));\nlet _myProperties =[];\n_objectsArray.objects.forEach((object) =&gt;{\n  let _myProp = {\n_id:object._id,\nproperties:object.properties\n  }\n  _myProperties.push(_myProp);\n\n});\nawait IafScriptEngine.setVar(\&quot;properties\&quot;, _myProperties);\n_objectsArray.objects.forEach(e =&gt; { delete e.properties });\nawait IafScriptEngine.setVar(\&quot;manage_els\&quot;, _objectsArray.objects);\nawait IafScriptEngine.setVar(\&quot;manage_type_els\&quot;, _objectsArray.types);\nawait IafScriptEngine.setVar(\&quot;manage_el_to_type_relations\&quot;,\n  _mapItemsAsRelated(IafScriptEngine.getVar(\&quot;manage_els\&quot;),\nIafScriptEngine.getVar(\&quot;manage_type_els\&quot;), \&quot;type_id\&quot;, \&quot;id\&quot;));\n  } catch (err) {\nconsole.log(err);\n  }\n}\n\nconst cacheSourceFileGraphicsIds = async(params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n  \n  const { model_els_coll, data_cache_coll } = params.inparams.myCollections\n\n  console.log(&apos;--&gt; cache elems: &apos; + model_els_coll._name)\n  console.log(&apos;--&gt; cache data: &apos; + data_cache_coll._name)\n\n  let sourcefiles = await IafScriptEngine.getDistinct({\ncollectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\nfield: &apos;source_filename&apos;,\noptions: { getCollInfo: true }\n  }, ctx)\n\n  let sourcefileNames = sourcefiles._list[0]._versions[0]._relatedItems.source_filename\n\n  let cacheDataItems = []\n  for (let i = 0; i &lt; sourcefileNames.length; i++) {\n\nlet packageIds = await IafScriptEngine.getDistinct({\ncollectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\nquery: {source_filename: sourcefileNames[i]},\nfield: &apos;package_id&apos;,\noptions: { getCollInfo: true }\n}, ctx)\n\ncacheDataItems.push({\ndataType: &apos;sourcefileToPkgIds&apos;,\ndata: {\nsource_filename: sourcefileNames[i],\npackage_id: packageIds._list[0]._versions[0]._relatedItems.package_id\n}\n})\n  }\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: data_cache_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: cacheDataItems\n  }, ctx);\n  console.log(\&quot;Create Cache Data: source filenames to package_ids\&quot;);\n\n}\n\n\nexport default {\n  async uploadBimpk(params, libraries, ctx) {\n\nconst { PlatformApi,  IafScriptEngine} = libraries;\n\nconst {IafItemSvc} = PlatformApi\n\nlet param = params.inparams;\n// set global variables first\nawait IafScriptEngine.setVar(\&quot;namespaces\&quot;, ctx._namespaces);\nawait IafScriptEngine.setVar(\&quot;package_name\&quot;, param.filename);\nawait IafScriptEngine.setVar(\&quot;package_name_short\&quot;, param.filename.substring(0, 11));\nawait IafScriptEngine.setVar(\&quot;bimpk_fileid\&quot;, param._fileId);\nawait IafScriptEngine.setVar(\&quot;bimpk_fileVersionId\&quot;, param._fileVersionId);\ndebugger;\n\nlet res = await IafItemSvc.getNamedUserItems({\&quot;query\&quot;:{\n\&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\&quot;_versions._userAttributes.bimpk.fileId\&quot;: param._fileId,\n\&quot;_itemClass\&quot;:\&quot;NamedCompositeItem\&quot;\n}},ctx,{});\n\n  let bim_model = res._list[0];\n\n  console.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\n\n  if (bim_model) {\nIafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollectionVersion(param, libraries, ctx);\n\n  } else {\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollections(param, libraries, ctx);\n\n  }\n\nconsole.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\nif (bim_model) {\nIafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollectionVersion(param, libraries, ctx);\n} else {\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollections(param, libraries, ctx);\n}\n\nreturn IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n  },\n  async createModelDataCache(params, libraries, ctx) {\n\nconst { PlatformApi,  IafScriptEngine} = libraries;\n\nawait cacheSourceFileGraphicsIds(params, libraries, ctx)\n\nreturn IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n}\n}&quot;},&quot;_namespaces&quot;: [&quot;${CNAMESPACESID}&quot;],&quot;_itemClass&quot;: &quot;Script&quot; }]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">itemsvc/api/v1/nameduseritems?nsfilter=DEMOUSER0601_NQj1K6Fn</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_T001_LOAD PROJECT SETUP" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;_id&quot;: &quot;${C_USERTIPID1}&quot;,&#xd;
    &quot;_isTip&quot;: true,&#xd;
    &quot;_metadata&quot;: {&#xd;
        &quot;_createdAt&quot;: &quot;${C_CREATEDATID}&quot;,&#xd;
        &quot;_createdById&quot;: &quot;${C_USERNAMEID}&quot;,&#xd;
        &quot;_updatedAt&quot;: &quot;${C_CREATEDATID}&quot;,&#xd;
        &quot;_updatedById&quot;: &quot;${C_USERNAMEID}&quot;&#xd;
    },&#xd;
    &quot;_userData&quot;: &quot;const groupBy = (objectArray, property) =&gt; {\n  return objectArray.reduce((acc, obj) =&gt; {\n      let key = obj[property];\n      key = key.replace(/[\\.]+/g, \&quot;\&quot;);\n      if (!acc[key]) {\n          acc[key] = {};\n      }\n      // Add object to list for given key&apos;s value\n      acc[key] = obj;\n      return acc;\n  }, {});\n}\n\nconst _mapItemsAsRelated = (parentItems, relatedItems, fromField, relatedField) =&gt; {\n  let res = [];\n  for (let i = 0, l = parentItems.length; i &lt; l; i++) {\n      let relatedRecs = [];\n\n      let parentItem = parentItems[i];\n      let fromValues = [];\n\n      if (!(parentItem[fromField]) &amp;&amp; fromField.indexOf(\&quot;.\&quot;) &gt; 1) {\n          fromValues = fromField.split(\&quot;.\&quot;).reduce((o, i) =&gt; o[i] || [], parentItem);\n      } else {\n          fromValues = Array.isArray(parentItem[fromField]) ? parentItem[fromField] : [parentItem[fromField]];\n      }\n\n      if (fromValues &amp;&amp; fromValues.length &gt; 0)\n          relatedRecs = relatedItems.filter((r) =&gt; fromValues.includes(r[relatedField]));\n\n      if (relatedRecs.length &gt; 0) {\n          res.push({\n              parentItem: parentItems[i],\n              relatedItems: relatedRecs\n          });\n      }\n  }\n  return res;\n}\n\nconst createBIMCollections = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Collections\&quot;}));\n\n  let packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\n  let packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\n  console.log(\&quot;Create BIM Collection\&quot;);\n  //create Elements Collection\n  const elementsCol = {\n      \&quot;_name\&quot;: packagename + \&quot;_elements\&quot;,\n      \&quot;_shortName\&quot;: packagenameShort + \&quot;_ba_elem\&quot;,\n      \&quot;_description\&quot;: \&quot;Elements in BA model\&quot;,\n      \&quot;_userType\&quot;: \&quot;rvt_elements\&quot;,\n      \&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_coll = await IafScriptEngine.createCollection(elementsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Collection\&quot;}));\n\n  console.log(\&quot;model element collection\&quot;, model_els_coll)\n  let elemCollIndex = {\n      \&quot;_id\&quot;: model_els_coll._userItemId,\n      indexDefs: [\n          {\n              key: {\n                  \&quot;id\&quot;:1,\n              },\n              options: {\n                  name: \&quot;model_els_coll_id\&quot;,\n                  default_language: \&quot;english\&quot;\n              }\n          },\n          {\n              key: {\n                  \&quot;source_id\&quot;:1,\n              },\n              options: {\n                  name: \&quot;model_els_coll_source_id\&quot;,\n                  default_language: \&quot;english\&quot;\n              }\n          }\n      ]\n  };\n  let elemIndex = await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  //create Element Properties Collection\n  const modelElemPropsCol = {\n      \&quot;_name\&quot;: packagename + \&quot;_elem_props\&quot;,\n      \&quot;_shortName\&quot;: packagenameShort + \&quot;_elprops\&quot;,\n      \&quot;_description\&quot;: \&quot;Element Props in BA model\&quot;,\n      \&quot;_userType\&quot;: \&quot;rvt_element_props\&quot;,\n      \&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_props_coll = await IafScriptEngine.createCollection(modelElemPropsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Props Collection\&quot;}));\n\n  //create Type Elements Collection\n  const typeElemsCol = {\n      \&quot;_name\&quot;: packagename + \&quot;_type_el\&quot;,\n      \&quot;_shortName\&quot;: packagenameShort + \&quot;_type_el\&quot;,\n      \&quot;_description\&quot;: \&quot;Type Elements in BA Check model\&quot;,\n      \&quot;_userType\&quot;: \&quot;rvt_type_elements\&quot;,\n      \&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_type_el_coll = await IafScriptEngine.createCollection(typeElemsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Type Element Collection\&quot;}));\n\n  console.log(\&quot;model type collection\&quot;, model_type_el_coll)\n\n  let typeElemCollIndex = {\n      \&quot;_id\&quot;: model_type_el_coll._userItemId,\n      indexDefs: [\n          {\n              key: {\n                  \&quot;id\&quot;:1,\n              },\n              options: {\n                  name: \&quot;typeElemsCol_id\&quot;,\n                  default_language: \&quot;english\&quot;\n              }\n          },\n          {\n              key: {\n                  \&quot;source_id\&quot;:1,\n              },\n              options: {\n                  name: \&quot;typeElemsCol_source_id\&quot;,\n                  default_language: \&quot;english\&quot;\n              }\n          }\n      ]\n  }\n  let typeindex = await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  //create Geometry File Collection\n  const geometryFilesCol = {\n      \&quot;_name\&quot;: packagename + \&quot;_geom_file\&quot;,\n      \&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_file\&quot;,\n      \&quot;_description\&quot;: \&quot;File Collection for Geometry Files\&quot;,\n      \&quot;_userType\&quot;: \&quot;bim_model_geomresources\&quot;,\n      \&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_file_coll = await IafScriptEngine.createCollection(geometryFilesCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry File Collection\&quot;}));\n\n  //create Geometry View Collection\n  const geometryViewsCol = {\n      \&quot;_name\&quot;: packagename + \&quot;_geom_view\&quot;,\n      \&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_view\&quot;,\n      \&quot;_description\&quot;: \&quot;Geometry Views in Model\&quot;,\n      \&quot;_userType\&quot;: \&quot;bim_model_geomviews\&quot;,\n      \&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_views_coll = await IafScriptEngine.createCollection(geometryViewsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry View Collection\&quot;}));\n\n  //create Model Data Cache Collection\n  const dataCacheCol = {\n    \&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n    \&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n    \&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n    \&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n    \&quot;_namespaces\&quot;: ctx._namespaces\n}\nconst data_cache_coll = await IafScriptEngine.createCollection(dataCacheCol, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n\nlet bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\nlet bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\nconsole.log(\&quot;fileid: \&quot; + bimpkFileId + \&quot;, bimpkFileVersionid: \&quot; + bimpkFileVersionId);\n\n  //create Model Composite Item\n  const modelCompItem = {\n    \&quot;_name\&quot;: packagename,\n    \&quot;_shortName\&quot;: packagenameShort + \&quot;_modelver\&quot;,\n    \&quot;_description\&quot;: \&quot;BIM model version by transform\&quot;,\n    \&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n    \&quot;_namespaces\&quot;: ctx._namespaces,\n    \&quot;_version\&quot;: {\n      \&quot;_userAttributes\&quot;: {\n        \&quot;bimpk\&quot;: {\n          \&quot;fileId\&quot;: bimpkFileId,\n          \&quot;fileVersionId\&quot;: bimpkFileVersionId\n        }\n      }\n    }\n  }\n  let model = await IafScriptEngine.createNamedCompositeItem(modelCompItem, ctx)\n  await IafScriptEngine.setVar(\&quot;bim_model\&quot;, model);\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Model Composite Item\&quot;}));\n  console.log(JSON.stringify(model, null, 3))\n\n  let _myCollections = {\n      \&quot;model_els_coll\&quot;: model_els_coll,\n      \&quot;model_els_props_coll\&quot;: model_els_props_coll,\n      \&quot;model_type_el_coll\&quot;: model_type_el_coll,\n      \&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n      \&quot;model_geom_views_coll\&quot;: model_geom_views_coll,\n      \&quot;data_cache_coll\&quot;: data_cache_coll\n\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createBIMCollectionVersion = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Found Previous Model Creating Versions\&quot;}));\n\n  let bimModel = await IafScriptEngine.getVar(\&quot;bim_model\&quot;)\n  const modelRelatedCollection = await IafScriptEngine.getCollectionsInComposite(bimModel._id,null, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version - bim_model\&quot;}));\n\n  console.log(\&quot;bimModel\&quot;, JSON.stringify(bimModel))\n\n  let bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\n  let bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\n  console.log(\&quot;bimpkFileId\&quot;, JSON.stringify(bimpkFileId))\n\n  console.log(\&quot;bimpkFileVersionId\&quot;, JSON.stringify(bimpkFileVersionId))\n\n  let newModelVer = {\&quot;namedUserItemId\&quot;:bimModel._id}\n\n  newModelVer._userAttributes = {\n      bimpk: {\n        fileId: bimpkFileId,\n        fileVersionId: bimpkFileVersionId\n      }\n  }\n\n  let version = await IafScriptEngine.createNamedUserItemVersion(newModelVer,ctx);\n  console.log(\&quot;Create BIM Collection Version bim_model version\&quot;);\n  console.log(JSON.stringify(version, null, 3))\n\n  console.log(\&quot;newModversionelVer\&quot;, JSON.stringify(version))\n\n  const model_els_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_elements&apos;);\n  const model_els_props_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_element_props&apos;);\n  const model_type_el_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_type_elements&apos;);\n  const model_geom_file_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomresources&apos;);\n  const model_geom_views_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomviews&apos;);\n\n  let data_cache_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;data_cache&apos;);\n  if (!data_cache_coll) {\n    let packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\n    let packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n    \n    let data_cache_coll_def = {\n      \&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n      \&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n      \&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n      \&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n      \&quot;_namespaces\&quot;: ctx._namespaces\n    }\n    data_cache_coll = await IafScriptEngine.createCollection(data_cache_coll_def, ctx);\n    console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n  }\n\n  // create the versions\n\n  const model_els_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n    \&quot;namedUserItemId\&quot;: model_els_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_coll\&quot;}));\n\n  const model_els_props_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n    \&quot;namedUserItemId\&quot;: model_els_props_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_props_coll\&quot;}));\n\n  const model_type_el_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n    \&quot;namedUserItemId\&quot;: model_type_el_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_type_el_coll\&quot;}));\n\n  const data_cache_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n    \&quot;namedUserItemId\&quot;: data_cache_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Data Cache Version data_cache\&quot;}));\n\n  const model_geom_file_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n    \&quot;namedUserItemId\&quot;: model_geom_file_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_file_coll\&quot;}));\n\n  const model_geom_views_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n    \&quot;namedUserItemId\&quot;: model_geom_views_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_views_coll\&quot;}));\n\n  let elemCollIndex = {\n    \&quot;_id\&quot;: model_els_coll._userItemId,\n    indexDefs: [\n      {\n        key: {\n          \&quot;id\&quot;:1,\n        },\n        options: {\n          name: \&quot;model_els_coll_id\&quot;,\n          default_language: \&quot;english\&quot;\n        }\n      },\n      {\n        key: {\n          \&quot;source_id\&quot;:1,\n        },\n        options: {\n          name: \&quot;model_els_coll_source_id\&quot;,\n          default_language: \&quot;english\&quot;\n        }\n      }\n    ]\n  };\n  await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  let typeElemCollIndex = {\n      \&quot;_id\&quot;: model_type_el_coll._userItemId,\n      indexDefs: [\n          {\n              key: {\n                  \&quot;id\&quot;:1,\n              },\n              options: {\n                  name: \&quot;typeElemsCol_id\&quot;,\n                  default_language: \&quot;english\&quot;\n              }\n          },\n          {\n              key: {\n                  \&quot;source_id\&quot;:1,\n              },\n              options: {\n                  name: \&quot;typeElemsCol_source_id\&quot;,\n                  default_language: \&quot;english\&quot;\n              }\n          }\n      ]\n  }\n  await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  // set them in global variables\n  IafScriptEngine.setVar(\&quot;model_els_coll\&quot;, model_els_coll);\n  IafScriptEngine.setVar(\&quot;model_els_props_coll\&quot;, model_els_props_coll);\n  IafScriptEngine.setVar(\&quot;model_type_el_coll\&quot;, model_type_el_coll);\n  IafScriptEngine.setVar(\&quot;data_cache_coll\&quot;, data_cache_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_file_coll\&quot;, model_geom_file_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_views_coll\&quot;, model_geom_views_coll);\n\n  let _myCollections = {\n    \&quot;model_els_coll\&quot;: model_els_coll,\n    \&quot;model_els_props_coll\&quot;: model_els_props_coll,\n    \&quot;model_type_el_coll\&quot;: model_type_el_coll,\n    \&quot;data_cache_coll\&quot;: data_cache_coll,\n    \&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n    \&quot;model_geom_views_coll\&quot;: model_geom_views_coll\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createRelatedItemsAndRelationships = async (_colls, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Relations and Related Items\&quot;}));\n\n  await IafScriptEngine.addRelatedCollections({\n    \&quot;namedCompositeItemId\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n    \&quot;relatedCollections\&quot;: [\n      _colls.model_els_coll._userItemId,\n      _colls.model_els_props_coll._userItemId,\n      _colls.model_type_el_coll._userItemId,\n      _colls.data_cache_coll._userItemId,\n      _colls.model_geom_file_coll._userItemId,\n      _colls.model_geom_views_coll._userItemId\n  ]}, ctx);\n  console.log(\&quot;Create Related Collection\&quot;);\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n    \&quot;_userItemId\&quot;: _colls.model_els_coll._userItemId,\n    \&quot;_namespaces\&quot;: ctx._namespaces,\n    \&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_els\&quot;);\n\n  const type_els = await IafScriptEngine.createItemsBulk({\n    \&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n    \&quot;_namespaces\&quot;: ctx._namespaces,\n    \&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_type_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_type_els\&quot;);\n\n  await IafScriptEngine.createItemsAsRelatedBulk({\n    \&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n    \&quot;_userItemId\&quot;: _colls.model_els_props_coll._userItemId,\n    \&quot;_namespaces\&quot;: ctx._namespaces,\n    \&quot;items\&quot;: IafScriptEngine.getVar(\&quot;properties\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection properties\&quot;);\n\n  const el_to_type_relations = await IafScriptEngine.createRelations({\n    \&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n    \&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n    \&quot;_namespaces\&quot;: ctx._namespaces,\n    \&quot;relations\&quot;: IafScriptEngine.getVar(\&quot;manage_el_to_type_relations\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection Relations\&quot;);\n\n  await IafScriptEngine.setVar(\&quot;outparams\&quot;, {\n    \&quot;filecolid\&quot;: _colls.model_geom_file_coll._userItemId,\n    \&quot;viewcolid\&quot;: _colls.model_geom_views_coll._userItemId,\n    \&quot;compositeitemid\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n    \&quot;myCollections\&quot;: _colls\n  });\n  return await IafScriptEngine.getVar(\&quot;outparams\&quot;);\n}\n\nconst extractBimpk = async (param, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  try {\n      //\n\n      // Extract data \n      let _objectsArray = {\n          \&quot;objects\&quot;: [],\n          \&quot;properties\&quot;: [],\n          \&quot;types\&quot;: []\n      }\n      param.files.forEach((file) =&gt; {\n          file.occurences.forEach((occ) =&gt; {\n              occ.objects.objects.forEach((obj) =&gt; {\n                  let _myObj = {\n                      \&quot;package_id\&quot;: obj.id,\n                      \&quot;type_id\&quot;: obj.type,\n                      \&quot;relationships\&quot;: obj.relationships,\n                      \&quot;source_id\&quot;: obj.sourceId,\n                      \&quot;properties\&quot;: obj.properties,\n                      \&quot;source_filename\&quot;:file.name\n                  }\n                  _objectsArray.objects.push(_myObj);\n\n              });\n              occ.objects.properties.forEach((prop) =&gt; {\n                  _objectsArray.properties.push(prop);\n              })\n\n              occ.objects.types.forEach((type) =&gt; {\n                  let _type = {\n                      \&quot;id\&quot;: type.id,\n                      \&quot;name\&quot;: type.name,\n                      \&quot;source_id\&quot;: type.sourceId,\n                      \&quot;properties\&quot;: type.properties\n\n                  }\n                  _objectsArray.types.push(_type);\n              });\n\n          });\n\n      });\n      console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Data Extraction is complete\&quot;}));\n      // Data Extraction Completed\n      //--------------------------------\n      // load the typemap\n      let assetTypeMap = null\n      try {\n          assetTypeMap = await IafScriptEngine.getItems({\n                  \&quot;collectionDesc\&quot;: {\n                      \&quot;_userType\&quot;: \&quot;iaf_dt_type_map_defs_coll\&quot;,\n                      \&quot;_namespaces\&quot;: IafScriptEngine.getVar(\&quot;namespaces\&quot;)\n                  },\n                  \&quot;options\&quot;: {\n                      \&quot;page\&quot;: {\n                          \&quot;getAllItems\&quot;: true\n                      }\n                  }\n              }, ctx);\n      } catch (err) {\n          console.log(&apos;{\&quot;level\&quot;: \&quot;info\&quot;, \&quot;message\&quot;: \&quot;Type Map collection does not exist\&quot;}&apos;)\n      }\n\n      for (let type of _objectsArray.types) {\n          for (let prop of type.properties) {\n              let _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\n              prop.dName = _myProp.dName;\n              if (_myProp.hasOwnProperty(\&quot;Asset Category\&quot;)) {\n                  prop.baType = _myProp[\&quot;Asset Category\&quot;]\n              }\n\n          }\n          type._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n                  \&quot;format\&quot;: \&quot;hex\&quot;\n              });\n          type.properties = groupBy(type.properties, \&quot;dName\&quot;);\n          if (assetTypeMap &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Family\&quot;) &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Type\&quot;)) {\n              let _myRow = assetTypeMap.find(x =&gt; x[\&quot;Revit Family\&quot;] == type.properties[\&quot;Revit Family\&quot;].val &amp;&amp; x[\&quot;Revit Type\&quot;] == type.properties[\&quot;Revit Type\&quot;].val);\n              if (_myRow) {\n                  type.dtCategory = _myRow.dtCategory;\n                  type.dtType = _myRow.dtType;\n              }\n          };\n      };\n      console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Type Extraction is complete\&quot;}));\n      // do the same for properties in the object\n      for (let obj of _objectsArray.objects) {\n          obj.properties.forEach((prop) =&gt; {\n              let _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\n              prop.dName = _myProp.dName;\n\n          });\n\n          obj._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n                  \&quot;format\&quot;: \&quot;hex\&quot;\n              });\n          obj.properties = groupBy(obj.properties, \&quot;dName\&quot;);\n          let _myVal = _objectsArray.types.find(x =&gt; x.id == obj.type_id);\n          obj.dtCategory = _myVal.dtCategory;\n          obj.dtType = _myVal.dtType;\n          if (_myVal.hasOwnProperty(\&quot;baType\&quot;)) {\n              obj.baType = _myVal.baType;\n          }\n\n      };\n      console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Property Extraction is complete\&quot;}));\n      let _myProperties =[];\n      _objectsArray.objects.forEach((object) =&gt;{\n          let _myProp = {\n              _id:object._id,\n              properties:object.properties\n          }\n          _myProperties.push(_myProp);\n\n      });\n      await IafScriptEngine.setVar(\&quot;properties\&quot;, _myProperties);\n      _objectsArray.objects.forEach(e =&gt; { delete e.properties });\n      await IafScriptEngine.setVar(\&quot;manage_els\&quot;, _objectsArray.objects);\n      await IafScriptEngine.setVar(\&quot;manage_type_els\&quot;, _objectsArray.types);\n      await IafScriptEngine.setVar(\&quot;manage_el_to_type_relations\&quot;,\n          _mapItemsAsRelated(IafScriptEngine.getVar(\&quot;manage_els\&quot;),\n              IafScriptEngine.getVar(\&quot;manage_type_els\&quot;), \&quot;type_id\&quot;, \&quot;id\&quot;));\n  } catch (err) {\n      console.log(err);\n  }\n}\n\nconst cacheSourceFileGraphicsIds = async(params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n  \n  const { model_els_coll, data_cache_coll } = params.inparams.myCollections\n\n  console.log(&apos;--&gt; cache elems: &apos; + model_els_coll._name)\n  console.log(&apos;--&gt; cache data: &apos; + data_cache_coll._name)\n\n  let sourcefiles = await IafScriptEngine.getDistinct({\n    collectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\n    field: &apos;source_filename&apos;,\n    options: { getCollInfo: true }\n  }, ctx)\n\n  let sourcefileNames = sourcefiles._list[0]._versions[0]._relatedItems.source_filename\n\n  let cacheDataItems = []\n  for (let i = 0; i &lt; sourcefileNames.length; i++) {\n\n    let packageIds = await IafScriptEngine.getDistinct({\n      collectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\n      query: {source_filename: sourcefileNames[i]},\n      field: &apos;package_id&apos;,\n      options: { getCollInfo: true }\n    }, ctx)\n\n    cacheDataItems.push({\n      dataType: &apos;sourcefileToPkgIds&apos;,\n      data: {\n        source_filename: sourcefileNames[i],\n        package_id: packageIds._list[0]._versions[0]._relatedItems.package_id\n      }\n    })\n  }\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n    \&quot;_userItemId\&quot;: data_cache_coll._userItemId,\n    \&quot;_namespaces\&quot;: ctx._namespaces,\n    \&quot;items\&quot;: cacheDataItems\n  }, ctx);\n  console.log(\&quot;Create Cache Data: source filenames to package_ids\&quot;);\n\n}\n\n\nexport default {\n  async uploadBimpk(params, libraries, ctx) {\n\n    const { PlatformApi,  IafScriptEngine} = libraries;\n\n    const {IafItemSvc} = PlatformApi\n\n    let param = params.inparams;\n    // set global variables first\n    await IafScriptEngine.setVar(\&quot;namespaces\&quot;, ctx._namespaces);\n    await IafScriptEngine.setVar(\&quot;package_name\&quot;, param.filename);\n    await IafScriptEngine.setVar(\&quot;package_name_short\&quot;, param.filename.substring(0, 11));\n    await IafScriptEngine.setVar(\&quot;bimpk_fileid\&quot;, param._fileId);\n    await IafScriptEngine.setVar(\&quot;bimpk_fileVersionId\&quot;, param._fileVersionId);\n    debugger;\n\n    let res = await IafItemSvc.getNamedUserItems({\&quot;query\&quot;:{\n        \&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n        \&quot;_versions._userAttributes.bimpk.fileId\&quot;: param._fileId,\n        \&quot;_itemClass\&quot;:\&quot;NamedCompositeItem\&quot;\n    }},ctx,{});\n\n  let bim_model = res._list[0];\n\n  console.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\n\n  if (bim_model) {\n      IafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\n      await extractBimpk(param, libraries, ctx);\n      await createBIMCollectionVersion(param, libraries, ctx);\n\n  } else {\n      await extractBimpk(param, libraries, ctx);\n      await createBIMCollections(param, libraries, ctx);\n\n  }\n  return IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n },\n  async createModelDataCache(params, libraries, ctx) {\n\n    const { PlatformApi,  IafScriptEngine} = libraries;\n\n    await cacheSourceFileGraphicsIds(params, libraries, ctx)\n\n    return IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n  }\n}&quot;,&#xd;
    &quot;_userItemDbId&quot;: &quot;${C_USERITEMDBID1}&quot;,&#xd;
    &quot;_version&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">itemsvc/api/v1/nameduseritems?nsfilter=DEMOUSER0601_NQj1K6Fn</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_LOADTYPEMAPFROM_XLXSFILE" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/itemsvc/api/v1/nameduseritems_T001_LOADTYPEMAPFROM_XLXSFILE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="query" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">{&quot;_userType&quot;:&quot;iaf_dt_type_map_defs_coll&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                  </elementProp>
                  <elementProp name="nsfilter" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${CNAMESPACESID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">nsfilter</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE/itemsvc/api/v1/nameduseritems?nsfilter_T001_LOADTYPEMAPFROM_XLXSFILE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="nsfilter" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">nsfilter</stringProp>
                    <stringProp name="Argument.value">${CNAMESPACESID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems/${C_USERITEMDBID1}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">63c01388c7f7aa0c31e5e240</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_T001_LOADTYPEMAPFROM_XLXSFILE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;_name&quot;:&quot;ATM Def Collection&quot;,&quot;_shortName&quot;:&quot;typemap_defs&quot;,&quot;_namespaces&quot;:[&quot;${CNAMESPACESID}&quot;],&quot;_description&quot;:&quot;Asset Type Map Collection&quot;,&quot;_userType&quot;:&quot;iaf_dt_type_map_defs_coll&quot;,&quot;_itemClass&quot;:&quot;NamedUserCollection&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">qa1-api.sa.invicara.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_LTMUSERITEMDBID1" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_LTMUSERITEMDBID1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_userItemId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_LTMUSERITEMDBID1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems/relateditems/bulk?nsfilter_T001_LOADTYPEMAPFROM_XLXSFILE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;Revit Category&quot;:&quot;OST_BuildingPad&quot;,&quot;Revit Family&quot;:&quot;Pad&quot;,&quot;Revit Type&quot;:&quot;A-M_Pad 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 1&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 10&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 11&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 12&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 13&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 14&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 15&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 16&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 17&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 18&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 2&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 3&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 4&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 5&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 6&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 7&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 8&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 9&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Compound Ceiling&quot;,&quot;Revit Type&quot;:&quot;A-M_Plaster Board &amp; Skim Finish&quot;},{&quot;Revit Category&quot;:&quot;OST_CommunicationDevices&quot;,&quot;baType&quot;:&quot;Office Furniture &amp; Fittings&quot;,&quot;Revit Family&quot;:&quot;E-M_Computer&quot;,&quot;Revit Type&quot;:&quot;E-M_Computer&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Computer&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallMullions&quot;,&quot;Revit Family&quot;:&quot;Rectangular Mullion&quot;,&quot;Revit Type&quot;:&quot;A-M_Mullion&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallMullions&quot;,&quot;Revit Family&quot;:&quot;Rectangular Mullion&quot;,&quot;Revit Type&quot;:&quot;A-M_30mm Square&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallMullions&quot;,&quot;Revit Family&quot;:&quot;Rectangular Mullion&quot;,&quot;Revit Type&quot;:&quot;A-M_Mullion 2&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Window Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Window Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Blue Green Double Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Blue Green Double Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Bright Silver ACP&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Bright Silver ACP&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Spider Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Ceramic Fritted Spandrel Panel Single Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Dark Grey ACP&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Sparkling Ice Single Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Solid&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Blue Green Glazed&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Clear GLASS&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M-Swedoor_JW_Interior_Door_Steel_4210_GS1M_Double_3.0&quot;,&quot;Revit Type&quot;:&quot;FR1&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Double &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M-Swedoor_JW_Interior_Door_Steel_4210_GS1M_Double_3.0&quot;,&quot;Revit Type&quot;:&quot;FR&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Fire Rated Double &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Curtain-Wall-Double-Glass&quot;,&quot;Revit Type&quot;:&quot;A_M_Door-Curtain-Wall-Double-Glass&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Double Glass &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Curtain-Wall-Single-Glass&quot;,&quot;Revit Type&quot;:&quot;A_M_Door-Curtain-Wall-Single-Glass&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Glass &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Curtain-Wall-Single-Glass3&quot;,&quot;Revit Type&quot;:&quot;A_M_Door-Curtain-Wall-Single-Glass&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Glass &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Firemiser_FaceOfWallMount_CornellIron&quot;,&quot;Revit Type&quot;:&quot;A-M_Rolling Shutter 1&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Rolling Shutter&quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Firemiser_FaceOfWallMount_CornellIron&quot;,&quot;Revit Type&quot;:&quot;A-M-Rolling shutter 2&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Rolling Shutter&quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D3 2&apos; 36\&quot; x 7&apos; 6\&quot;&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D2  3&apos;  x 7&apos; 6\&quot;&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D1   3&apos;6\&quot;  x 7&apos; 6\&quot; 2&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D4&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D4 4&apos; x 7&apos;6\&quot;&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Vision_Lite&quot;,&quot;Revit Type&quot;:&quot;FR2&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Fire Rated Single &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Lift&quot;,&quot;Revit Family&quot;:&quot;A-M_Elevator_-_Center_284&quot;,&quot;Revit Type&quot;:&quot;72\&quot; x 114\&quot; Hospital min.&quot;,&quot;dtCategory&quot;:&quot;Lift&quot;,&quot;dtType&quot;:&quot;Lift Door&quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Grilled Door&quot;,&quot;Revit Type&quot;:&quot;A-M_Grilled Door&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Grilled &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Gate&quot;,&quot;Revit Family&quot;:&quot;A-M_Rolling_Gate&quot;,&quot;Revit Type&quot;:&quot;Rolling_Gate_11118&quot;,&quot;dtCategory&quot;:&quot;Gate&quot;,&quot;dtType&quot;:&quot;Rolling Gate&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctAccessory&quot;,&quot;Revit Family&quot;:&quot;P-M_Single_Tier_Support&quot;,&quot;Revit Type&quot;:&quot;Single_Support&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctCurves&quot;,&quot;Revit Family&quot;:&quot;Rectangular Duct&quot;,&quot;Revit Type&quot;:&quot;E-M_Rising Main&quot;,&quot;dtCategory&quot;:&quot;Bus Duct&quot;,&quot;dtType&quot;:&quot;Rising Main&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctCurves&quot;,&quot;baType&quot;:&quot;Duct&quot;,&quot;Revit Family&quot;:&quot;Round Duct&quot;,&quot;Revit Type&quot;:&quot;Default&quot;,&quot;dtCategory&quot;:&quot;Duct&quot;,&quot;dtType&quot;:&quot;DG Exhaust Duct&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctFitting&quot;,&quot;Revit Family&quot;:&quot;M_Rectangular Elbow - Mitered - Double Thickness Vanes&quot;,&quot;Revit Type&quot;:&quot;E-M_Rectangular Elbow-Raising Main&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Rising Main ACB Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctFitting&quot;,&quot;Revit Family&quot;:&quot;M_Rectangular Elbow - Mitered - Double Thickness Vanes&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Bus Duct&quot;,&quot;dtType&quot;:&quot;Rising Main&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctFitting&quot;,&quot;baType&quot;:&quot;Duct&quot;,&quot;Revit Family&quot;:&quot;M_Round Elbow - Pleated&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Duct&quot;,&quot;dtType&quot;:&quot;DG Exhaust Duct&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Generator&quot;,&quot;Revit Family&quot;:&quot;E-M_1010KVA Diesel Generator&quot;,&quot;Revit Type&quot;:&quot;E-M_1010KVA Diesel Generator With&quot;,&quot;dtCategory&quot;:&quot;Generator&quot;,&quot;dtType&quot;:&quot;Main DG Set&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Generator&quot;,&quot;Revit Family&quot;:&quot;E-M_160KVA Mobile Diesel Generator&quot;,&quot;Revit Type&quot;:&quot;E-M_160KVA Mobile Diesel Generator&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Generator&quot;,&quot;Revit Family&quot;:&quot;E-M_50KVA Diesel Generator&quot;,&quot;Revit Type&quot;:&quot;E-M_50KVA Diesel Generator&quot;,&quot;dtCategory&quot;:&quot;Generator&quot;,&quot;dtType&quot;:&quot;Temporary DG Set&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_ACB&quot;,&quot;Revit Type&quot;:&quot;E-M_ACB&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;ACB&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_ACB Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_ACB Panel-1&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;ACB Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_APFCR Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_APFC Panel-1&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;APFC Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_APFCR Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_APFC Panel-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;APFC Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;UPS&quot;,&quot;Revit Family&quot;:&quot;E-M_Battery&quot;,&quot;Revit Type&quot;:&quot;E-M_Battery&quot;,&quot;dtCategory&quot;:&quot;UPS&quot;,&quot;dtType&quot;:&quot;Battery&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Electrical Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_CT Meter Board&quot;,&quot;Revit Type&quot;:&quot;E-M_CT Meter Board&quot;,&quot;dtCategory&quot;:&quot;Electrical Panel&quot;,&quot;dtType&quot;:&quot;EB Meter&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_DB&quot;,&quot;Revit Type&quot;:&quot;E-M_DB&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Electrical Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Fire Pump Control Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Fire Pump Control Panel&quot;,&quot;dtCategory&quot;:&quot;Pump Control Panel&quot;,&quot;dtType&quot;:&quot;Fire Pump&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Breaker&quot;,&quot;Revit Family&quot;:&quot;E-M_Fuse Box&quot;,&quot;Revit Type&quot;:&quot;E-M_Fuse Box&quot;,&quot;dtCategory&quot;:&quot;Breaker&quot;,&quot;dtType&quot;:&quot;Fuse Box&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_L Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Emergency Lighting Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Emergency Lighting Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_L Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Lift Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lift Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LDB&quot;,&quot;Revit Type&quot;:&quot;E-M_LDB-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LDB&quot;,&quot;Revit Type&quot;:&quot;E-M_Common LDB-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LDB&quot;,&quot;Revit Type&quot;:&quot;E-M_ELDB-1&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LDB&quot;,&quot;Revit Type&quot;:&quot;E-M_ELDB-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Lift controller&quot;,&quot;Revit Type&quot;:&quot;E-M_Lift Operator Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lift Operator Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Lift Power Supply&quot;,&quot;Revit Type&quot;:&quot;E-M_Scissor Lift Control Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Scissor Lift Control Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Breaker&quot;,&quot;Revit Family&quot;:&quot;E-M_LT ACB&quot;,&quot;Revit Type&quot;:&quot;E-M_LT ACB&quot;,&quot;dtCategory&quot;:&quot;Breaker&quot;,&quot;dtType&quot;:&quot;Air Circuit Breaker&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Pump Control Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LTP&quot;,&quot;Revit Type&quot;:&quot;E-M_STP Control Panel&quot;,&quot;dtCategory&quot;:&quot;Pump Control Panel&quot;,&quot;dtType&quot;:&quot;STP Control Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Pump Control Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LTP&quot;,&quot;Revit Type&quot;:&quot;E-M_Fire Pump Panel&quot;,&quot;dtCategory&quot;:&quot;Pump Control Panel&quot;,&quot;dtType&quot;:&quot;Fire Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Main EB Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Main Distribution Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Main Distribution Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MCCB&quot;,&quot;Revit Type&quot;:&quot;E-M_EB &amp; Generator Change over panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;EB &amp; DG Change Over Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MCCB&quot;,&quot;Revit Type&quot;:&quot;E-M_MCCB&quot;,&quot;dtCategory&quot;:&quot;Breaker&quot;,&quot;dtType&quot;:&quot;MCCB&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MLP&quot;,&quot;Revit Type&quot;:&quot;E-M_Main Lighting Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Main Lighting Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MLP&quot;,&quot;Revit Type&quot;:&quot;E-M_Main Power Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MV Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Main LT Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;LT Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_PDB&quot;,&quot;Revit Type&quot;:&quot;E-M_4W PDB&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_PDB&quot;,&quot;Revit Type&quot;:&quot;E-M_PDB-1&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_PDB&quot;,&quot;Revit Type&quot;:&quot;E-M_PDB-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;UPS&quot;,&quot;Revit Family&quot;:&quot;E-M_Rack with Batteries&quot;,&quot;Revit Type&quot;:&quot;E-M_Rack with Batteries&quot;,&quot;dtCategory&quot;:&quot;UPS&quot;,&quot;dtType&quot;:&quot;Rack with Batteries&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Spare Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Spare Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Spare Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Breaker&quot;,&quot;Revit Family&quot;:&quot;E-M_Starter&quot;,&quot;Revit Type&quot;:&quot;E-M_Starter&quot;,&quot;dtCategory&quot;:&quot;Breaker&quot;,&quot;dtType&quot;:&quot;Starter&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Pump Control Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_STP Pump Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_STP Pump Starter Panel&quot;,&quot;dtCategory&quot;:&quot;Pump Control Panel&quot;,&quot;dtType&quot;:&quot;STP Starter Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Sub Lighting Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Sub Lighting Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Sub Power Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Sub Power Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Electrical Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Synchronizing Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Auto Synchronizing Panel&quot;,&quot;dtCategory&quot;:&quot;Electrical Panel&quot;,&quot;dtType&quot;:&quot;Auto Synchronizing Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Transformer&quot;,&quot;Revit Family&quot;:&quot;E-M_Transformer&quot;,&quot;Revit Type&quot;:&quot;E-M_Transformer&quot;,&quot;dtCategory&quot;:&quot;Transformer&quot;,&quot;dtType&quot;:&quot;EB Transformer&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;UPS&quot;,&quot;Revit Family&quot;:&quot;E-M_UPS&quot;,&quot;Revit Type&quot;:&quot;E-M_UPS&quot;,&quot;dtCategory&quot;:&quot;UPS&quot;,&quot;dtType&quot;:&quot;Main UPS&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;UPS&quot;,&quot;Revit Family&quot;:&quot;E-M_UPS Control&quot;,&quot;Revit Type&quot;:&quot;E-M_UPS Control&quot;,&quot;dtCategory&quot;:&quot;UPS&quot;,&quot;dtType&quot;:&quot;UPS Control&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Ups DB&quot;,&quot;Revit Type&quot;:&quot;E-M_APFC Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;ACB Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Ups DB&quot;,&quot;Revit Type&quot;:&quot;E-M_Plugin Box-03&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Plugin Box&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;General Equipments / Machines&quot;,&quot;Revit Family&quot;:&quot;E-M-Wall Fan&quot;,&quot;Revit Type&quot;:&quot;E-M-Wall Fan&quot;,&quot;dtCategory&quot;:&quot;General Equipments / Machines&quot;,&quot;dtType&quot;:&quot;Wall Fan&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;E-M_6 nos 16 AMPS Socket&quot;,&quot;Revit Type&quot;:&quot;E-M_6 nos 16 AMPS Socket&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Unfused Sockets&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;General Equipments / Machines&quot;,&quot;Revit Family&quot;:&quot;E-M_Ceiling Fan&quot;,&quot;Revit Type&quot;:&quot;E-M_Ceiling Fan&quot;,&quot;dtCategory&quot;:&quot;General Equipments / Machines&quot;,&quot;dtType&quot;:&quot;Ceiling Fan&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Switch Boards&quot;,&quot;Revit Family&quot;:&quot;E-M_Emergency Lighting Switch Board&quot;,&quot;Revit Type&quot;:&quot;E-M_Emergency Lighting Switch Board&quot;,&quot;dtCategory&quot;:&quot;Switch Boards&quot;,&quot;dtType&quot;:&quot;Emergency Switch Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Switch Boards&quot;,&quot;Revit Family&quot;:&quot;E-M_Lighting Switch Board&quot;,&quot;Revit Type&quot;:&quot;E-M_Lighting Switch Board&quot;,&quot;dtCategory&quot;:&quot;Switch Boards&quot;,&quot;dtType&quot;:&quot;Lighting Switch Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;General Equipments / Machines&quot;,&quot;Revit Family&quot;:&quot;E-M_Pedastrial Fan&quot;,&quot;Revit Type&quot;:&quot;E-M_Pedestal Fan&quot;,&quot;dtCategory&quot;:&quot;General Equipments / Machines&quot;,&quot;dtType&quot;:&quot;Pedestal Fan&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;E-M_Single Switch Socket&quot;,&quot;Revit Type&quot;:&quot;E-M_Single Switch Socket&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Single Socket Switch&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;E-M_Socket&quot;,&quot;Revit Type&quot;:&quot;E-M_Socket&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Unfused Sockets&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;E-M_Thriple Socket Switch&quot;,&quot;Revit Type&quot;:&quot;E-M_Thriple Socket Switch&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Triple Socket Switch&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;Single Data outlet&quot;,&quot;Revit Type&quot;:&quot;Single Data outlet&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Data Outlet&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Alarm-Smoke_and_Heat_Detectors&quot;,&quot;Revit Type&quot;:&quot;Smoke Detector&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Smoke Detector&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Firealarm_manual_call_point&quot;,&quot;Revit Type&quot;:&quot;Fire alarm&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Manual Call Point&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Firealarm_panel&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Fire Alarm Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Isolator _ Module _Notifier&quot;,&quot;Revit Type&quot;:&quot;Isolator _ Module&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Isolator module&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Sounder&quot;,&quot;Revit Type&quot;:&quot;Sounder_indoor&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Sounder&quot;},{&quot;Revit Category&quot;:&quot;OST_FlexDuctCurves&quot;,&quot;baType&quot;:&quot;Duct&quot;,&quot;Revit Family&quot;:&quot;Flex Duct Round&quot;,&quot;Revit Type&quot;:&quot;Flex - Round&quot;,&quot;dtCategory&quot;:&quot;Duct&quot;,&quot;dtType&quot;:&quot;DG Exhaust Duct&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor 200 mm fill concrete&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor Finishes&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Lift Floor Finishes&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor Finishes 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Brick  Finishes&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor Toilet Sink&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Granite  Toilet Sink&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Bathroom Wall Finishes&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor Landscape \&quot;  fill concrete 3&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor12\&quot;  fill concrete 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;S_M_Concrete Slab - 9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;S_M_Concrete Slab - 12\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Concrete Slab -9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Concrete Slab - 6\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Concrete Slab - 5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Concrete Slab - 8\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_STP Slab&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Pump Slab&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Pump Slab 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Floor 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Floor 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M__Type_5_Rack&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M__Type_5_Rack_2&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M__Type_5_Rack_3&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M__Type_5_Rack_6&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Desk&quot;,&quot;Revit Type&quot;:&quot;A-M_Desk&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Desk&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Desk Cupboard&quot;,&quot;Revit Type&quot;:&quot;A-M_Desk Cupboard&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Desk Cupboard&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Desk Cupboard 2&quot;,&quot;Revit Type&quot;:&quot;A-M_Desk Cupboard 2&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Desk Cupboard&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Fabric checking table&quot;,&quot;Revit Type&quot;:&quot;Fabric checking table Type-1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Checking Table&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Furniture Desk&quot;,&quot;Revit Type&quot;:&quot;Furniture Desk&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Desk&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Locker Pass-Thru 2 Openings&quot;,&quot;Revit Type&quot;:&quot;ED3DA14&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Lockers&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_MS_Pallete&quot;,&quot;Revit Type&quot;:&quot;A-M_MS_Pallete&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;MS Pallete&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Office Stationery Wooden Cubords&quot;,&quot;Revit Type&quot;:&quot;Office Stationary Wooden Cuboard&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Stationary Wooden Cupboard&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Old Table&quot;,&quot;Revit Type&quot;:&quot;Old table Type-1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Table&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_PVC_Pallet&quot;,&quot;Revit Type&quot;:&quot;A-M_PVC_Pallet&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;PVC Pallete&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Rack&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M_Rack_Type_4_Rack&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M_Rack_Type_4_Rack&quot;,&quot;Revit Type&quot;:&quot;Type 2_End&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Pallet Space&quot;,&quot;Revit Family&quot;:&quot;A-M_Space Object&quot;,&quot;Revit Type&quot;:&quot;A-M_Space Object&quot;,&quot;dtCategory&quot;:&quot;Pallet Space&quot;,&quot;dtType&quot;:&quot;Pallet Box&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Tanjore Paintings&quot;,&quot;Revit Type&quot;:&quot;Tanjore Paintings&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Paintings&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Trim Rack&quot;,&quot;Revit Type&quot;:&quot;A-M_Trim Rack&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Trim Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Trims hecking table&quot;,&quot;Revit Type&quot;:&quot;Trim  checking table Type-1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Trim Checking Table&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Wooden Writing Desk&quot;,&quot;Revit Type&quot;:&quot;Writing Desk&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Writing Desk&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;End Rack Frame&quot;,&quot;Revit Type&quot;:&quot;End Rack Frame&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_GenericModel&quot;,&quot;Revit Family&quot;:&quot;A-M_Drainage 2&quot;,&quot;Revit Type&quot;:&quot;Family3&quot;},{&quot;Revit Category&quot;:&quot;OST_GenericModel&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Tanjore Painting&quot;,&quot;Revit Type&quot;:&quot;A-M_Tanjore Painting&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Paintings&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;8mm Head&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;8mm Head&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;1/4\&quot; Head&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;Level 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;A-M_Level Triangle&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;Level 1&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingDevices&quot;,&quot;baType&quot;:&quot;Sensor&quot;,&quot;Revit Family&quot;:&quot;E-M_PIR sensor&quot;,&quot;Revit Type&quot;:&quot;E-M_PIR Sensor&quot;,&quot;dtCategory&quot;:&quot;Sensor&quot;,&quot;dtType&quot;:&quot;Movement Sensor&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_18W Surface mounted lighting fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_18W Tube Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Tube Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_18W Surface mounted lighting fitting.2&quot;,&quot;Revit Type&quot;:&quot;E-M_18W Tube Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Tube Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_30W LED Halogen Light&quot;,&quot;Revit Type&quot;:&quot;E-M_400W LED Halogen Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Halogen Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Hanging Light&quot;,&quot;Revit Type&quot;:&quot;E-M_39W pendent mounted LED tubelight&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Pendant Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Light Fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_Suspended LED Flexstrip light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Light Fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_4&apos; LED TUBE&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Mirror Light&quot;,&quot;Revit Type&quot;:&quot;E-M_Mirror Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Mirror Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Surface mounted lighting fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_10W LED Surface mounted lighting fitting(EL)&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Surface mounted lighting fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_10W LED Surface mounted lighting fitting&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Wall Tube Light&quot;,&quot;Revit Type&quot;:&quot;E-M_Wall Tube Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Tube Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;Light box.0005&quot;,&quot;Revit Type&quot;:&quot;E-M_Square Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Square Light&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;Revit Family&quot;:&quot;A-M_Drainage&quot;,&quot;Revit Type&quot;:&quot;Family3&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;E-M_Diesel tank&quot;,&quot;Revit Type&quot;:&quot;1000 Ltrs&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Diesel Tank&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;F-M_Diesel generator Pump&quot;,&quot;Revit Type&quot;:&quot;Diesel Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Diesel&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;F-M_Elelctrical Pump&quot;,&quot;Revit Type&quot;:&quot;3P&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Electrical&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire hose Box&quot;,&quot;Revit Type&quot;:&quot;Fire hose Box&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Hose Reel Box&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Extinguisher&quot;,&quot;Revit Type&quot;:&quot;Extinguisher&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Extinguisher&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_FIRE_HYDRANT&quot;,&quot;Revit Type&quot;:&quot;FIRE_HYDRANT&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Fire Brigade Inlet or Outlet&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Hose Reel&quot;,&quot;Revit Type&quot;:&quot;Hose Reel&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Hose Reel Drum&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;F-M_Jockey Pump&quot;,&quot;Revit Type&quot;:&quot;Johnson Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Jockey&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Landing_Valve&quot;,&quot;Revit Type&quot;:&quot;Landing_Valve_&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Single Headed Hydrant&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_AIR Blower&quot;,&quot;Revit Type&quot;:&quot;Blower&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Blower&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Cleaner Filter Tank&quot;,&quot;Revit Type&quot;:&quot;CL tank&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Cleaner Filter Tank&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Drain Sump Pit&quot;,&quot;Revit Type&quot;:&quot;Drain Sump Pit&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Sump Pit&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Drain Sump Pit&quot;,&quot;Revit Type&quot;:&quot;Drain Sump Pit&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Sump Pit&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Drain Water Chamber&quot;,&quot;Revit Type&quot;:&quot;Drain Water Chamber&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Drain Water Chamber&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Feed Pump&quot;,&quot;Revit Type&quot;:&quot;50_40&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Filter Feed&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Feed Pump_STP&quot;,&quot;Revit Type&quot;:&quot;FFP&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Filter Feed&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Tank&quot;,&quot;Revit Type&quot;:&quot;ACF&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Activated Carbon Filter&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Tank&quot;,&quot;Revit Type&quot;:&quot;DMF&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Dual Media Filter&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Tank_STP&quot;,&quot;Revit Type&quot;:&quot;ACF&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Activated Carbon Filter&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Tank_STP&quot;,&quot;Revit Type&quot;:&quot;PSF&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Dual Media Filter&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Hydro Pneumatic Pump&quot;,&quot;Revit Type&quot;:&quot;Hydro Pneumatic Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Hydro Pneumatic&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Hypochloride System tank&quot;,&quot;Revit Type&quot;:&quot;Hypochloride System tank&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Hydrochloride System&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Monobloc Pump&quot;,&quot;Revit Type&quot;:&quot;Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Monobloc&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Pump-Submersible-Liberty-Effluent&quot;,&quot;Revit Type&quot;:&quot;Submerged Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Submerged&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Ball Valve - 50-150 mm&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Ball Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Ball Valve - 50-150 mm&quot;,&quot;Revit Type&quot;:&quot;25 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Ball Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Butterfly_valve_&quot;,&quot;Revit Type&quot;:&quot;BV-80A&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Butterfly Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Butterfly_valve_&quot;,&quot;Revit Type&quot;:&quot;BV-150A&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Butterfly Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Butterfly_valve_&quot;,&quot;Revit Type&quot;:&quot;BV-100A&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Butterfly Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Non Return Valve - Wafer - 50-600 mm&quot;,&quot;Revit Type&quot;:&quot;150 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Non return Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Non Return Valve - Wafer - 50-600 mm&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Non return Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Solenoid Valve - 50-450 mm - Flanged&quot;,&quot;Revit Type&quot;:&quot;200 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Solenoid Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Solenoid Valve - 50-450 mm - Flanged&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Solenoid Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Water Flow Alarm Switch&quot;,&quot;Revit Type&quot;:&quot;Water Flow Alarm Switch&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Flow Switch&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Y Strainer - 50-500 mm - Flanged&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Y Strainer&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Y Strainer - 50-500 mm - Flanged&quot;,&quot;Revit Type&quot;:&quot;200 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Y Strainer&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Angle_valve&quot;,&quot;Revit Type&quot;:&quot;Angle valve&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Angle Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;20 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Angle Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;40 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Angle Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;80 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Angle Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Ball Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;65 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Ball Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeCurves&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;Pipe Types&quot;,&quot;Revit Type&quot;:&quot;P-M_PVC&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Drain Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeCurves&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;Pipe Types&quot;,&quot;Revit Type&quot;:&quot;P-M_HDPE&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Water Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeCurves&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;Pipe Types&quot;,&quot;Revit Type&quot;:&quot;E-M_Pipe&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;EM Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeCurves&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;Pipe Types&quot;,&quot;Revit Type&quot;:&quot;F-M_FP&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Fire Protection Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Cap - Welded - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Flange - Blind - Steel - Class 150&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved Equal Tee&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Concentric Reducer-WOC&quot;,&quot;Revit Type&quot;:&quot;Threaded&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Cross-WOC&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Elbow_45&amp;90&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Elbow_45&amp;90&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Tee WOC&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Tee Reducing - Threaded - MI - Class 150&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;FP_Grooved Cap&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Bend - PVC - Sch 40&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Bend - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Cap - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Cap - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Cap - Welded - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Elbow - Welded - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Reducer - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Tee - Welded - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Tee Reducing - Threaded - MI - Class 150&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Tee Reducing Sanitary - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Tee Sanitary - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Threaded_Concentric Reducer&quot;,&quot;Revit Type&quot;:&quot;Threaded&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_Planting&quot;,&quot;Revit Family&quot;:&quot;27039_Shade_Tree_3682&quot;,&quot;Revit Type&quot;:&quot;27039_Shade_Tree_3682&quot;},{&quot;Revit Category&quot;:&quot;OST_Planting&quot;,&quot;Revit Family&quot;:&quot;3d_oak_tree_a_tree12bx_16942&quot;,&quot;Revit Type&quot;:&quot;3d_oak_tree_a_tree12bx_16942&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_Faucet&quot;,&quot;Revit Type&quot;:&quot;A-M_Faucet&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Faucet&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Gratting&quot;,&quot;Revit Type&quot;:&quot;A-M_Grating&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Grating&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Gratting-1&quot;,&quot;Revit Type&quot;:&quot;A-M_Grating-1&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Grating&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_Sink-Lavatory&quot;,&quot;Revit Type&quot;:&quot;A-M_Sink&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Sink&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_Tap&quot;,&quot;Revit Type&quot;:&quot;A-M_Sink Tap&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Sink Tap&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_toilet_wall_hung&quot;,&quot;Revit Type&quot;:&quot;A-M_Wall_Hung_WC-Valverfa_2893&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Water Closet&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_urinal_12788&quot;,&quot;Revit Type&quot;:&quot;A-M_Urinal&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Urinals&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Waste Trap DWC1&quot;,&quot;Revit Type&quot;:&quot;A-M_Waste Trap_DWC 2&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Waste Trap&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Waste Trap DWC1&quot;,&quot;Revit Type&quot;:&quot;A-M_Waste Trap_DWC&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Waste Trap&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;P-M_Floor_Drain&quot;,&quot;Revit Type&quot;:&quot;Floor_Drain&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Floor Drain&quot;},{&quot;Revit Category&quot;:&quot;OST_RailingTopRail&quot;,&quot;Revit Family&quot;:&quot;Top Rail Type&quot;,&quot;Revit Type&quot;:&quot;Circular - 40mm&quot;},{&quot;Revit Category&quot;:&quot;OST_Ramps&quot;,&quot;Revit Family&quot;:&quot;Ramp&quot;,&quot;Revit Type&quot;:&quot;Ramp 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Roofs&quot;,&quot;Revit Family&quot;:&quot;Sloped Glazing&quot;,&quot;Revit Type&quot;:&quot;A-M_Entrance  Glazing&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;E-M_CCTV Camera&quot;,&quot;Revit Type&quot;:&quot;Bullet Camera&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Bullet Camera&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;E-M_Thumb Reader&quot;,&quot;Revit Type&quot;:&quot;E-M_Thumb Reader&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Thumb Reader&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;External cctv dome camera&quot;,&quot;Revit Type&quot;:&quot;CCTV Camera&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Bullet Camera&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Storage Devices&quot;,&quot;Revit Family&quot;:&quot;IT BOX&quot;,&quot;Revit Type&quot;:&quot;IT BOX&quot;,&quot;dtCategory&quot;:&quot;Storage Devices&quot;,&quot;dtType&quot;:&quot;Hub Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;Network Box&quot;,&quot;Revit Type&quot;:&quot;Computer Server&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Switch Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;NVR Box&quot;,&quot;Revit Type&quot;:&quot;CCTV Control Switches&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;NVR Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;NVR Box&quot;,&quot;Revit Type&quot;:&quot;NVR Box&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Network Video Recorder&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Lift&quot;,&quot;Revit Family&quot;:&quot;A-M_Elevator-KONE-MonoSpace500_Front_Opening&quot;,&quot;Revit Type&quot;:&quot;150fpm_2000lbs_Passenger Elevator&quot;,&quot;dtCategory&quot;:&quot;Lift&quot;,&quot;dtType&quot;:&quot;Passenger Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Lift&quot;,&quot;Revit Family&quot;:&quot;A-M_Elevator-KONE-MonoSpace500_Front_Opening Service Lift&quot;,&quot;Revit Type&quot;:&quot;150fpm_2000lbs_Passenger Elevator&quot;,&quot;dtCategory&quot;:&quot;Lift&quot;,&quot;dtType&quot;:&quot;Passenger Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Mirror&quot;,&quot;Revit Type&quot;:&quot;Mirror&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Mirror&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Mirror 2&quot;,&quot;Revit Type&quot;:&quot;Mirror 2&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Mirror&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Lift&quot;,&quot;Revit Family&quot;:&quot;A-M_Scissor_lift_18142&quot;,&quot;Revit Type&quot;:&quot;Scissor_lift_18142&quot;,&quot;dtCategory&quot;:&quot;Lift&quot;,&quot;dtType&quot;:&quot;Scissor Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Soap_Dispenser_3270 (1)&quot;,&quot;Revit Type&quot;:&quot;Soap_Dispenser_3270 (1)&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Soap Dispenser&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_ACE Material Pallet_Jack_Lifting Equpiment&quot;,&quot;Revit Type&quot;:&quot;E-M_ACE Material Pallet_Jack_Lifting Equpiment&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Electric Pallet Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Fabric Checking Machine&quot;,&quot;Revit Type&quot;:&quot;E-M_Fabric Checking Machine&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Fabric Checker&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Hand Pallet Trolley&quot;,&quot;Revit Type&quot;:&quot;E-M_Hand Pallet Trolley&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Hand Pallet Trolley&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Weighing Scale Platform&quot;,&quot;Revit Type&quot;:&quot;E-M_Weighing Scale Platform&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Platform Scale&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Weighing Scale-Tabletop&quot;,&quot;Revit Type&quot;:&quot;E-M_Weighing Scale-Tabletop&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Table Top&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Xerox Machine&quot;,&quot;Revit Type&quot;:&quot;E-M_Xerox Machine&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Photo Copier&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;sewing_machine_7099&quot;,&quot;Revit Type&quot;:&quot;Fax - Table&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Sewing Machine&quot;},{&quot;Revit Category&quot;:&quot;OST_Sprinklers&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Sprinkler_pendent&quot;,&quot;Revit Type&quot;:&quot;Pendent Type Sprinkler_BOAZ&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;BOAZ Pendent Type Sprinkler&quot;},{&quot;Revit Category&quot;:&quot;OST_Sprinklers&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Sprinkler_pendent&quot;,&quot;Revit Type&quot;:&quot;Pendent Type Sprinkler_Tyco&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Tyco Pendent Type Sprinkler&quot;},{&quot;Revit Category&quot;:&quot;OST_Sprinklers&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Sprinkler_Upright&quot;,&quot;Revit Type&quot;:&quot;Pendent Type Sprinkler_Tyco&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Tyco Upright Type Sprinkler&quot;},{&quot;Revit Category&quot;:&quot;OST_StackedWalls&quot;,&quot;Revit Family&quot;:&quot;Stacked Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Stacked Wall 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Stairs&quot;,&quot;Revit Family&quot;:&quot;Cast-In-Place Stair&quot;,&quot;Revit Type&quot;:&quot;A-M_Monolithic Stair&quot;},{&quot;Revit Category&quot;:&quot;OST_StairsLandings&quot;,&quot;Revit Family&quot;:&quot;Monolithic Landing&quot;,&quot;Revit Type&quot;:&quot;A-M_300mm Thickness&quot;},{&quot;Revit Category&quot;:&quot;OST_StairsRailing&quot;,&quot;Revit Family&quot;:&quot;Railing&quot;,&quot;Revit Type&quot;:&quot;900mm Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_StairsRailing&quot;,&quot;Revit Family&quot;:&quot;Railing&quot;,&quot;Revit Type&quot;:&quot;Rail - Digger Specialties - C321 - Heavy Duty - Crossover - 42\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_StairsRuns&quot;,&quot;Revit Family&quot;:&quot;Monolithic Run&quot;,&quot;Revit Type&quot;:&quot;A-M_150mm Depth&quot;},{&quot;Revit Category&quot;:&quot;OST_StructConnections&quot;,&quot;Revit Family&quot;:&quot;A-M_Steel Support&quot;,&quot;Revit Type&quot;:&quot;Steel Support&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Type 3&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Type 4&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Type 7&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Type 6&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Boundary Wall&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular-Column with Drop Caps&quot;,&quot;Revit Type&quot;:&quot;S-M_TYPE_1&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S-M_Type_2&quot;,&quot;Revit Type&quot;:&quot;M_300 x 450&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S-M_Type_2&quot;,&quot;Revit Type&quot;:&quot;M_17&apos;3\&quot;X 8&apos;7.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S-M_Type_2 Corner end&quot;,&quot;Revit Type&quot;:&quot;M_300 x 450&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S_M_LShaped Column&quot;,&quot;Revit Type&quot;:&quot;12 x 18&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S_M_Shaped Column Cornered&quot;,&quot;Revit Type&quot;:&quot;S-M_TYPE_2&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_1&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_4&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_2&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_3&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_6&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_7&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_5&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_8&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_10_Service Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_10_Passenger  Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Pump Foundation&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Pump Foundation 2&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Pump Foundation 3&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_9\&quot;X24&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_18x24&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_9\&quot;X30&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_12\&quot;X18&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_30\&quot;X18&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_18x12&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_9\&quot;X20&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_20x9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M _BR1_18x9 2&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_BR2_20x9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_12\&quot;X24&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_18x9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M _BR3_18x9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_Concealed Beam 9x6&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_30x24&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_18x6 Pergola&quot;},{&quot;Revit Category&quot;:&quot;OST_TelephoneDevices&quot;,&quot;baType&quot;:&quot;Office Furniture &amp; Fittings&quot;,&quot;Revit Family&quot;:&quot;Telephone_Generic_Business_bsf_18281&quot;,&quot;Revit Type&quot;:&quot;Telephone_Generic_Business_bsf_18281&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Telephone&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_ Walls Facade  11&quot;,&quot;Revit Type&quot;:&quot;Walls Facade  11&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Wall Facade 12&quot;,&quot;Revit Type&quot;:&quot;Wall Facade 12&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Wall Facade1&quot;,&quot;Revit Type&quot;:&quot;Wall Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls 1&quot;,&quot;Revit Type&quot;:&quot;Walls 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade&quot;,&quot;Revit Type&quot;:&quot;Walls Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 1&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 8&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 10&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 13&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 13&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 2&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 3&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 3&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 4&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 8&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 6&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 6&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 8&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 8&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 9&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 9&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade1&quot;,&quot;Revit Type&quot;:&quot;A-M_Walls Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade2&quot;,&quot;Revit Type&quot;:&quot;Walls Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade3&quot;,&quot;Revit Type&quot;:&quot;Walls Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Blockwork- 9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exteroir_Blockwork- 9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Blockwork- 4.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Granite Claddding&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Wall 7 \&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Blockwork- 6 \&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Blockwork- 0.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Wal_Exterior - 0.5&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Blockwork- 9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom-Fabio Brown 0.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom-Eternity Brown 0.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom-Eternity Beige 0.5\&quot; 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom- 0.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom-Tiles&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Ledge Wall- 4\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Bathroom Partion- 3\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;Generic - 8\&quot; Masonry&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;Generic - 9\&quot; Masonry&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes Lift Cera Grey Granite&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes Lift Jet Black  Granite&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;S-M-9\&quot;  Wall&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;S-M-225  Wall&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;S-M-6 &apos;Wall&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;S-M-7 1/2\&quot;  Wall 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall 4&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall 5&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall 6&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_EXterior Curtain Wall 9&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed Panel&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall 7&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Window&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interrior Curtain Wall 8&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Glazed &quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Glazed &quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall Staircase&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interrior Curtain Wall 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior fixed glass&quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Instance-Window-Fixed&quot;,&quot;Revit Type&quot;:&quot;0610 x 1220mm&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Glazed &quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Reliable_Louvers_-_6375ZS_-_Stationary_Heavyline_Louver&quot;,&quot;Revit Type&quot;:&quot;Reliable_Louvers_-_6375ZS_-_Stationary_Heavyline_Louver&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Glazed &quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Window 1&quot;,&quot;Revit Type&quot;:&quot;Window 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Windows_Opening-Slide_UFME_Fenetre_Coulissante_2V&quot;,&quot;Revit Type&quot;:&quot;W2    6&apos;  X 4&apos; 6\&quot;&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Punched &quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Windows_Opening-Slide_UFME_Fenetre_Coulissante_2V&quot;,&quot;Revit Type&quot;:&quot;W3    4&apos;  X 4&apos; 6\&quot; 2&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Punched &quot;},{&quot;dtCategory&quot;:&quot;KAR Docs&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">qa1-api.sa.invicara.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems/${C_LTMUSERITEMDBID1}/relateditems/bulk?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_LTMUSERITEMDBID1" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_LTMUSERITEMDBID1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_userItemId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_LTMUSERITEMDBID1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">30000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_TASKID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">C_TASKID</stringProp>
                <stringProp name="RegexExtractor.regex">qa1-api.sa.invicara.com:443/itemsvc/api/v1/tasks/(.+?)\n</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_TASKID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">_userItemId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_T001_LOADTYPEMAPFROM_XLXSFILE" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;_name&quot;:&quot;ATM Def Collection&quot;,&quot;_shortName&quot;:&quot;typemap_defs&quot;,&quot;_namespaces&quot;:[&quot;${CNAMESPACESID}&quot;],&quot;_description&quot;:&quot;Asset Type Map Collection&quot;,&quot;_userType&quot;:&quot;iaf_dt_type_map_defs_coll&quot;,&quot;_itemClass&quot;:&quot;NamedUserCollection&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_LTMUSERITEMDBID1" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_LTMUSERITEMDBID1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_userItemId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_LTMUSERITEMDBID1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems/relateditems/bulk?nsfilter_T001_LOADTYPEMAPFROM_XLXSFILE" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;Revit Category&quot;:&quot;OST_BuildingPad&quot;,&quot;Revit Family&quot;:&quot;Pad&quot;,&quot;Revit Type&quot;:&quot;A-M_Pad 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 1&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 10&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 11&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 12&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 13&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 14&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 15&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 16&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 17&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 18&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 2&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 3&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 4&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 5&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 6&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 7&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 8&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 9&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Compound Ceiling&quot;,&quot;Revit Type&quot;:&quot;A-M_Plaster Board &amp; Skim Finish&quot;},{&quot;Revit Category&quot;:&quot;OST_CommunicationDevices&quot;,&quot;baType&quot;:&quot;Office Furniture &amp; Fittings&quot;,&quot;Revit Family&quot;:&quot;E-M_Computer&quot;,&quot;Revit Type&quot;:&quot;E-M_Computer&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Computer&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallMullions&quot;,&quot;Revit Family&quot;:&quot;Rectangular Mullion&quot;,&quot;Revit Type&quot;:&quot;A-M_Mullion&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallMullions&quot;,&quot;Revit Family&quot;:&quot;Rectangular Mullion&quot;,&quot;Revit Type&quot;:&quot;A-M_30mm Square&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallMullions&quot;,&quot;Revit Family&quot;:&quot;Rectangular Mullion&quot;,&quot;Revit Type&quot;:&quot;A-M_Mullion 2&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Window Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Window Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Blue Green Double Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Blue Green Double Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Bright Silver ACP&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Bright Silver ACP&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Spider Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Ceramic Fritted Spandrel Panel Single Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Dark Grey ACP&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Sparkling Ice Single Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Solid&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Blue Green Glazed&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Clear GLASS&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M-Swedoor_JW_Interior_Door_Steel_4210_GS1M_Double_3.0&quot;,&quot;Revit Type&quot;:&quot;FR1&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Double &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M-Swedoor_JW_Interior_Door_Steel_4210_GS1M_Double_3.0&quot;,&quot;Revit Type&quot;:&quot;FR&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Fire Rated Double &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Curtain-Wall-Double-Glass&quot;,&quot;Revit Type&quot;:&quot;A_M_Door-Curtain-Wall-Double-Glass&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Double Glass &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Curtain-Wall-Single-Glass&quot;,&quot;Revit Type&quot;:&quot;A_M_Door-Curtain-Wall-Single-Glass&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Glass &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Curtain-Wall-Single-Glass3&quot;,&quot;Revit Type&quot;:&quot;A_M_Door-Curtain-Wall-Single-Glass&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Glass &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Firemiser_FaceOfWallMount_CornellIron&quot;,&quot;Revit Type&quot;:&quot;A-M_Rolling Shutter 1&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Rolling Shutter&quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Firemiser_FaceOfWallMount_CornellIron&quot;,&quot;Revit Type&quot;:&quot;A-M-Rolling shutter 2&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Rolling Shutter&quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D3 2&apos; 36\&quot; x 7&apos; 6\&quot;&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D2  3&apos;  x 7&apos; 6\&quot;&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D1   3&apos;6\&quot;  x 7&apos; 6\&quot; 2&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D4&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D4 4&apos; x 7&apos;6\&quot;&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Vision_Lite&quot;,&quot;Revit Type&quot;:&quot;FR2&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Fire Rated Single &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Lift&quot;,&quot;Revit Family&quot;:&quot;A-M_Elevator_-_Center_284&quot;,&quot;Revit Type&quot;:&quot;72\&quot; x 114\&quot; Hospital min.&quot;,&quot;dtCategory&quot;:&quot;Lift&quot;,&quot;dtType&quot;:&quot;Lift Door&quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Grilled Door&quot;,&quot;Revit Type&quot;:&quot;A-M_Grilled Door&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Grilled &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Gate&quot;,&quot;Revit Family&quot;:&quot;A-M_Rolling_Gate&quot;,&quot;Revit Type&quot;:&quot;Rolling_Gate_11118&quot;,&quot;dtCategory&quot;:&quot;Gate&quot;,&quot;dtType&quot;:&quot;Rolling Gate&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctAccessory&quot;,&quot;Revit Family&quot;:&quot;P-M_Single_Tier_Support&quot;,&quot;Revit Type&quot;:&quot;Single_Support&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctCurves&quot;,&quot;Revit Family&quot;:&quot;Rectangular Duct&quot;,&quot;Revit Type&quot;:&quot;E-M_Rising Main&quot;,&quot;dtCategory&quot;:&quot;Bus Duct&quot;,&quot;dtType&quot;:&quot;Rising Main&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctCurves&quot;,&quot;baType&quot;:&quot;Duct&quot;,&quot;Revit Family&quot;:&quot;Round Duct&quot;,&quot;Revit Type&quot;:&quot;Default&quot;,&quot;dtCategory&quot;:&quot;Duct&quot;,&quot;dtType&quot;:&quot;DG Exhaust Duct&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctFitting&quot;,&quot;Revit Family&quot;:&quot;M_Rectangular Elbow - Mitered - Double Thickness Vanes&quot;,&quot;Revit Type&quot;:&quot;E-M_Rectangular Elbow-Raising Main&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Rising Main ACB Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctFitting&quot;,&quot;Revit Family&quot;:&quot;M_Rectangular Elbow - Mitered - Double Thickness Vanes&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Bus Duct&quot;,&quot;dtType&quot;:&quot;Rising Main&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctFitting&quot;,&quot;baType&quot;:&quot;Duct&quot;,&quot;Revit Family&quot;:&quot;M_Round Elbow - Pleated&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Duct&quot;,&quot;dtType&quot;:&quot;DG Exhaust Duct&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Generator&quot;,&quot;Revit Family&quot;:&quot;E-M_1010KVA Diesel Generator&quot;,&quot;Revit Type&quot;:&quot;E-M_1010KVA Diesel Generator With&quot;,&quot;dtCategory&quot;:&quot;Generator&quot;,&quot;dtType&quot;:&quot;Main DG Set&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Generator&quot;,&quot;Revit Family&quot;:&quot;E-M_160KVA Mobile Diesel Generator&quot;,&quot;Revit Type&quot;:&quot;E-M_160KVA Mobile Diesel Generator&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Generator&quot;,&quot;Revit Family&quot;:&quot;E-M_50KVA Diesel Generator&quot;,&quot;Revit Type&quot;:&quot;E-M_50KVA Diesel Generator&quot;,&quot;dtCategory&quot;:&quot;Generator&quot;,&quot;dtType&quot;:&quot;Temporary DG Set&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_ACB&quot;,&quot;Revit Type&quot;:&quot;E-M_ACB&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;ACB&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_ACB Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_ACB Panel-1&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;ACB Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_APFCR Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_APFC Panel-1&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;APFC Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_APFCR Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_APFC Panel-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;APFC Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;UPS&quot;,&quot;Revit Family&quot;:&quot;E-M_Battery&quot;,&quot;Revit Type&quot;:&quot;E-M_Battery&quot;,&quot;dtCategory&quot;:&quot;UPS&quot;,&quot;dtType&quot;:&quot;Battery&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Electrical Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_CT Meter Board&quot;,&quot;Revit Type&quot;:&quot;E-M_CT Meter Board&quot;,&quot;dtCategory&quot;:&quot;Electrical Panel&quot;,&quot;dtType&quot;:&quot;EB Meter&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_DB&quot;,&quot;Revit Type&quot;:&quot;E-M_DB&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Electrical Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Fire Pump Control Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Fire Pump Control Panel&quot;,&quot;dtCategory&quot;:&quot;Pump Control Panel&quot;,&quot;dtType&quot;:&quot;Fire Pump&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Breaker&quot;,&quot;Revit Family&quot;:&quot;E-M_Fuse Box&quot;,&quot;Revit Type&quot;:&quot;E-M_Fuse Box&quot;,&quot;dtCategory&quot;:&quot;Breaker&quot;,&quot;dtType&quot;:&quot;Fuse Box&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_L Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Emergency Lighting Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Emergency Lighting Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_L Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Lift Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lift Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LDB&quot;,&quot;Revit Type&quot;:&quot;E-M_LDB-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LDB&quot;,&quot;Revit Type&quot;:&quot;E-M_Common LDB-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LDB&quot;,&quot;Revit Type&quot;:&quot;E-M_ELDB-1&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LDB&quot;,&quot;Revit Type&quot;:&quot;E-M_ELDB-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Lift controller&quot;,&quot;Revit Type&quot;:&quot;E-M_Lift Operator Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lift Operator Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Lift Power Supply&quot;,&quot;Revit Type&quot;:&quot;E-M_Scissor Lift Control Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Scissor Lift Control Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Breaker&quot;,&quot;Revit Family&quot;:&quot;E-M_LT ACB&quot;,&quot;Revit Type&quot;:&quot;E-M_LT ACB&quot;,&quot;dtCategory&quot;:&quot;Breaker&quot;,&quot;dtType&quot;:&quot;Air Circuit Breaker&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Pump Control Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LTP&quot;,&quot;Revit Type&quot;:&quot;E-M_STP Control Panel&quot;,&quot;dtCategory&quot;:&quot;Pump Control Panel&quot;,&quot;dtType&quot;:&quot;STP Control Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Pump Control Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LTP&quot;,&quot;Revit Type&quot;:&quot;E-M_Fire Pump Panel&quot;,&quot;dtCategory&quot;:&quot;Pump Control Panel&quot;,&quot;dtType&quot;:&quot;Fire Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Main EB Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Main Distribution Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Main Distribution Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MCCB&quot;,&quot;Revit Type&quot;:&quot;E-M_EB &amp; Generator Change over panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;EB &amp; DG Change Over Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MCCB&quot;,&quot;Revit Type&quot;:&quot;E-M_MCCB&quot;,&quot;dtCategory&quot;:&quot;Breaker&quot;,&quot;dtType&quot;:&quot;MCCB&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MLP&quot;,&quot;Revit Type&quot;:&quot;E-M_Main Lighting Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Main Lighting Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MLP&quot;,&quot;Revit Type&quot;:&quot;E-M_Main Power Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MV Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Main LT Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;LT Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_PDB&quot;,&quot;Revit Type&quot;:&quot;E-M_4W PDB&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_PDB&quot;,&quot;Revit Type&quot;:&quot;E-M_PDB-1&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_PDB&quot;,&quot;Revit Type&quot;:&quot;E-M_PDB-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;UPS&quot;,&quot;Revit Family&quot;:&quot;E-M_Rack with Batteries&quot;,&quot;Revit Type&quot;:&quot;E-M_Rack with Batteries&quot;,&quot;dtCategory&quot;:&quot;UPS&quot;,&quot;dtType&quot;:&quot;Rack with Batteries&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Spare Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Spare Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Spare Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Breaker&quot;,&quot;Revit Family&quot;:&quot;E-M_Starter&quot;,&quot;Revit Type&quot;:&quot;E-M_Starter&quot;,&quot;dtCategory&quot;:&quot;Breaker&quot;,&quot;dtType&quot;:&quot;Starter&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Pump Control Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_STP Pump Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_STP Pump Starter Panel&quot;,&quot;dtCategory&quot;:&quot;Pump Control Panel&quot;,&quot;dtType&quot;:&quot;STP Starter Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Sub Lighting Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Sub Lighting Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Sub Power Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Sub Power Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Electrical Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Synchronizing Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Auto Synchronizing Panel&quot;,&quot;dtCategory&quot;:&quot;Electrical Panel&quot;,&quot;dtType&quot;:&quot;Auto Synchronizing Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Transformer&quot;,&quot;Revit Family&quot;:&quot;E-M_Transformer&quot;,&quot;Revit Type&quot;:&quot;E-M_Transformer&quot;,&quot;dtCategory&quot;:&quot;Transformer&quot;,&quot;dtType&quot;:&quot;EB Transformer&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;UPS&quot;,&quot;Revit Family&quot;:&quot;E-M_UPS&quot;,&quot;Revit Type&quot;:&quot;E-M_UPS&quot;,&quot;dtCategory&quot;:&quot;UPS&quot;,&quot;dtType&quot;:&quot;Main UPS&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;UPS&quot;,&quot;Revit Family&quot;:&quot;E-M_UPS Control&quot;,&quot;Revit Type&quot;:&quot;E-M_UPS Control&quot;,&quot;dtCategory&quot;:&quot;UPS&quot;,&quot;dtType&quot;:&quot;UPS Control&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Ups DB&quot;,&quot;Revit Type&quot;:&quot;E-M_APFC Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;ACB Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Ups DB&quot;,&quot;Revit Type&quot;:&quot;E-M_Plugin Box-03&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Plugin Box&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;General Equipments / Machines&quot;,&quot;Revit Family&quot;:&quot;E-M-Wall Fan&quot;,&quot;Revit Type&quot;:&quot;E-M-Wall Fan&quot;,&quot;dtCategory&quot;:&quot;General Equipments / Machines&quot;,&quot;dtType&quot;:&quot;Wall Fan&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;E-M_6 nos 16 AMPS Socket&quot;,&quot;Revit Type&quot;:&quot;E-M_6 nos 16 AMPS Socket&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Unfused Sockets&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;General Equipments / Machines&quot;,&quot;Revit Family&quot;:&quot;E-M_Ceiling Fan&quot;,&quot;Revit Type&quot;:&quot;E-M_Ceiling Fan&quot;,&quot;dtCategory&quot;:&quot;General Equipments / Machines&quot;,&quot;dtType&quot;:&quot;Ceiling Fan&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Switch Boards&quot;,&quot;Revit Family&quot;:&quot;E-M_Emergency Lighting Switch Board&quot;,&quot;Revit Type&quot;:&quot;E-M_Emergency Lighting Switch Board&quot;,&quot;dtCategory&quot;:&quot;Switch Boards&quot;,&quot;dtType&quot;:&quot;Emergency Switch Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Switch Boards&quot;,&quot;Revit Family&quot;:&quot;E-M_Lighting Switch Board&quot;,&quot;Revit Type&quot;:&quot;E-M_Lighting Switch Board&quot;,&quot;dtCategory&quot;:&quot;Switch Boards&quot;,&quot;dtType&quot;:&quot;Lighting Switch Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;General Equipments / Machines&quot;,&quot;Revit Family&quot;:&quot;E-M_Pedastrial Fan&quot;,&quot;Revit Type&quot;:&quot;E-M_Pedestal Fan&quot;,&quot;dtCategory&quot;:&quot;General Equipments / Machines&quot;,&quot;dtType&quot;:&quot;Pedestal Fan&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;E-M_Single Switch Socket&quot;,&quot;Revit Type&quot;:&quot;E-M_Single Switch Socket&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Single Socket Switch&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;E-M_Socket&quot;,&quot;Revit Type&quot;:&quot;E-M_Socket&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Unfused Sockets&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;E-M_Thriple Socket Switch&quot;,&quot;Revit Type&quot;:&quot;E-M_Thriple Socket Switch&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Triple Socket Switch&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;Single Data outlet&quot;,&quot;Revit Type&quot;:&quot;Single Data outlet&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Data Outlet&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Alarm-Smoke_and_Heat_Detectors&quot;,&quot;Revit Type&quot;:&quot;Smoke Detector&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Smoke Detector&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Firealarm_manual_call_point&quot;,&quot;Revit Type&quot;:&quot;Fire alarm&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Manual Call Point&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Firealarm_panel&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Fire Alarm Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Isolator _ Module _Notifier&quot;,&quot;Revit Type&quot;:&quot;Isolator _ Module&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Isolator module&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Sounder&quot;,&quot;Revit Type&quot;:&quot;Sounder_indoor&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Sounder&quot;},{&quot;Revit Category&quot;:&quot;OST_FlexDuctCurves&quot;,&quot;baType&quot;:&quot;Duct&quot;,&quot;Revit Family&quot;:&quot;Flex Duct Round&quot;,&quot;Revit Type&quot;:&quot;Flex - Round&quot;,&quot;dtCategory&quot;:&quot;Duct&quot;,&quot;dtType&quot;:&quot;DG Exhaust Duct&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor 200 mm fill concrete&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor Finishes&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Lift Floor Finishes&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor Finishes 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Brick  Finishes&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor Toilet Sink&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Granite  Toilet Sink&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Bathroom Wall Finishes&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor Landscape \&quot;  fill concrete 3&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor12\&quot;  fill concrete 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;S_M_Concrete Slab - 9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;S_M_Concrete Slab - 12\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Concrete Slab -9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Concrete Slab - 6\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Concrete Slab - 5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Concrete Slab - 8\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_STP Slab&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Pump Slab&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Pump Slab 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Floor 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Floor 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M__Type_5_Rack&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M__Type_5_Rack_2&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M__Type_5_Rack_3&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M__Type_5_Rack_6&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Desk&quot;,&quot;Revit Type&quot;:&quot;A-M_Desk&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Desk&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Desk Cupboard&quot;,&quot;Revit Type&quot;:&quot;A-M_Desk Cupboard&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Desk Cupboard&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Desk Cupboard 2&quot;,&quot;Revit Type&quot;:&quot;A-M_Desk Cupboard 2&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Desk Cupboard&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Fabric checking table&quot;,&quot;Revit Type&quot;:&quot;Fabric checking table Type-1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Checking Table&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Furniture Desk&quot;,&quot;Revit Type&quot;:&quot;Furniture Desk&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Desk&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Locker Pass-Thru 2 Openings&quot;,&quot;Revit Type&quot;:&quot;ED3DA14&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Lockers&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_MS_Pallete&quot;,&quot;Revit Type&quot;:&quot;A-M_MS_Pallete&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;MS Pallete&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Office Stationery Wooden Cubords&quot;,&quot;Revit Type&quot;:&quot;Office Stationary Wooden Cuboard&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Stationary Wooden Cupboard&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Old Table&quot;,&quot;Revit Type&quot;:&quot;Old table Type-1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Table&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_PVC_Pallet&quot;,&quot;Revit Type&quot;:&quot;A-M_PVC_Pallet&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;PVC Pallete&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Rack&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M_Rack_Type_4_Rack&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M_Rack_Type_4_Rack&quot;,&quot;Revit Type&quot;:&quot;Type 2_End&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Pallet Space&quot;,&quot;Revit Family&quot;:&quot;A-M_Space Object&quot;,&quot;Revit Type&quot;:&quot;A-M_Space Object&quot;,&quot;dtCategory&quot;:&quot;Pallet Space&quot;,&quot;dtType&quot;:&quot;Pallet Box&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Tanjore Paintings&quot;,&quot;Revit Type&quot;:&quot;Tanjore Paintings&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Paintings&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Trim Rack&quot;,&quot;Revit Type&quot;:&quot;A-M_Trim Rack&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Trim Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Trims hecking table&quot;,&quot;Revit Type&quot;:&quot;Trim  checking table Type-1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Trim Checking Table&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Wooden Writing Desk&quot;,&quot;Revit Type&quot;:&quot;Writing Desk&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Writing Desk&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;End Rack Frame&quot;,&quot;Revit Type&quot;:&quot;End Rack Frame&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_GenericModel&quot;,&quot;Revit Family&quot;:&quot;A-M_Drainage 2&quot;,&quot;Revit Type&quot;:&quot;Family3&quot;},{&quot;Revit Category&quot;:&quot;OST_GenericModel&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Tanjore Painting&quot;,&quot;Revit Type&quot;:&quot;A-M_Tanjore Painting&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Paintings&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;8mm Head&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;8mm Head&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;1/4\&quot; Head&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;Level 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;A-M_Level Triangle&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;Level 1&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingDevices&quot;,&quot;baType&quot;:&quot;Sensor&quot;,&quot;Revit Family&quot;:&quot;E-M_PIR sensor&quot;,&quot;Revit Type&quot;:&quot;E-M_PIR Sensor&quot;,&quot;dtCategory&quot;:&quot;Sensor&quot;,&quot;dtType&quot;:&quot;Movement Sensor&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_18W Surface mounted lighting fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_18W Tube Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Tube Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_18W Surface mounted lighting fitting.2&quot;,&quot;Revit Type&quot;:&quot;E-M_18W Tube Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Tube Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_30W LED Halogen Light&quot;,&quot;Revit Type&quot;:&quot;E-M_400W LED Halogen Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Halogen Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Hanging Light&quot;,&quot;Revit Type&quot;:&quot;E-M_39W pendent mounted LED tubelight&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Pendant Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Light Fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_Suspended LED Flexstrip light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Light Fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_4&apos; LED TUBE&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Mirror Light&quot;,&quot;Revit Type&quot;:&quot;E-M_Mirror Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Mirror Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Surface mounted lighting fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_10W LED Surface mounted lighting fitting(EL)&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Surface mounted lighting fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_10W LED Surface mounted lighting fitting&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Wall Tube Light&quot;,&quot;Revit Type&quot;:&quot;E-M_Wall Tube Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Tube Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;Light box.0005&quot;,&quot;Revit Type&quot;:&quot;E-M_Square Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Square Light&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;Revit Family&quot;:&quot;A-M_Drainage&quot;,&quot;Revit Type&quot;:&quot;Family3&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;E-M_Diesel tank&quot;,&quot;Revit Type&quot;:&quot;1000 Ltrs&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Diesel Tank&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;F-M_Diesel generator Pump&quot;,&quot;Revit Type&quot;:&quot;Diesel Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Diesel&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;F-M_Elelctrical Pump&quot;,&quot;Revit Type&quot;:&quot;3P&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Electrical&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire hose Box&quot;,&quot;Revit Type&quot;:&quot;Fire hose Box&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Hose Reel Box&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Extinguisher&quot;,&quot;Revit Type&quot;:&quot;Extinguisher&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Extinguisher&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_FIRE_HYDRANT&quot;,&quot;Revit Type&quot;:&quot;FIRE_HYDRANT&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Fire Brigade Inlet or Outlet&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Hose Reel&quot;,&quot;Revit Type&quot;:&quot;Hose Reel&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Hose Reel Drum&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;F-M_Jockey Pump&quot;,&quot;Revit Type&quot;:&quot;Johnson Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Jockey&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Landing_Valve&quot;,&quot;Revit Type&quot;:&quot;Landing_Valve_&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Single Headed Hydrant&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_AIR Blower&quot;,&quot;Revit Type&quot;:&quot;Blower&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Blower&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Cleaner Filter Tank&quot;,&quot;Revit Type&quot;:&quot;CL tank&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Cleaner Filter Tank&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Drain Sump Pit&quot;,&quot;Revit Type&quot;:&quot;Drain Sump Pit&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Sump Pit&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Drain Sump Pit&quot;,&quot;Revit Type&quot;:&quot;Drain Sump Pit&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Sump Pit&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Drain Water Chamber&quot;,&quot;Revit Type&quot;:&quot;Drain Water Chamber&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Drain Water Chamber&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Feed Pump&quot;,&quot;Revit Type&quot;:&quot;50_40&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Filter Feed&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Feed Pump_STP&quot;,&quot;Revit Type&quot;:&quot;FFP&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Filter Feed&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Tank&quot;,&quot;Revit Type&quot;:&quot;ACF&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Activated Carbon Filter&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Tank&quot;,&quot;Revit Type&quot;:&quot;DMF&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Dual Media Filter&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Tank_STP&quot;,&quot;Revit Type&quot;:&quot;ACF&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Activated Carbon Filter&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Tank_STP&quot;,&quot;Revit Type&quot;:&quot;PSF&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Dual Media Filter&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Hydro Pneumatic Pump&quot;,&quot;Revit Type&quot;:&quot;Hydro Pneumatic Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Hydro Pneumatic&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Hypochloride System tank&quot;,&quot;Revit Type&quot;:&quot;Hypochloride System tank&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Hydrochloride System&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Monobloc Pump&quot;,&quot;Revit Type&quot;:&quot;Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Monobloc&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Pump-Submersible-Liberty-Effluent&quot;,&quot;Revit Type&quot;:&quot;Submerged Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Submerged&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Ball Valve - 50-150 mm&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Ball Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Ball Valve - 50-150 mm&quot;,&quot;Revit Type&quot;:&quot;25 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Ball Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Butterfly_valve_&quot;,&quot;Revit Type&quot;:&quot;BV-80A&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Butterfly Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Butterfly_valve_&quot;,&quot;Revit Type&quot;:&quot;BV-150A&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Butterfly Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Butterfly_valve_&quot;,&quot;Revit Type&quot;:&quot;BV-100A&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Butterfly Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Non Return Valve - Wafer - 50-600 mm&quot;,&quot;Revit Type&quot;:&quot;150 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Non return Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Non Return Valve - Wafer - 50-600 mm&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Non return Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Solenoid Valve - 50-450 mm - Flanged&quot;,&quot;Revit Type&quot;:&quot;200 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Solenoid Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Solenoid Valve - 50-450 mm - Flanged&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Solenoid Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Water Flow Alarm Switch&quot;,&quot;Revit Type&quot;:&quot;Water Flow Alarm Switch&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Flow Switch&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Y Strainer - 50-500 mm - Flanged&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Y Strainer&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Y Strainer - 50-500 mm - Flanged&quot;,&quot;Revit Type&quot;:&quot;200 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Y Strainer&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Angle_valve&quot;,&quot;Revit Type&quot;:&quot;Angle valve&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Angle Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;20 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Angle Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;40 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Angle Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;80 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Angle Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Ball Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;65 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Ball Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeCurves&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;Pipe Types&quot;,&quot;Revit Type&quot;:&quot;P-M_PVC&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Drain Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeCurves&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;Pipe Types&quot;,&quot;Revit Type&quot;:&quot;P-M_HDPE&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Water Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeCurves&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;Pipe Types&quot;,&quot;Revit Type&quot;:&quot;E-M_Pipe&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;EM Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeCurves&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;Pipe Types&quot;,&quot;Revit Type&quot;:&quot;F-M_FP&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Fire Protection Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Cap - Welded - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Flange - Blind - Steel - Class 150&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved Equal Tee&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Concentric Reducer-WOC&quot;,&quot;Revit Type&quot;:&quot;Threaded&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Cross-WOC&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Elbow_45&amp;90&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Elbow_45&amp;90&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Tee WOC&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Tee Reducing - Threaded - MI - Class 150&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;FP_Grooved Cap&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Bend - PVC - Sch 40&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Bend - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Cap - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Cap - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Cap - Welded - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Elbow - Welded - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Reducer - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Tee - Welded - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Tee Reducing - Threaded - MI - Class 150&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Tee Reducing Sanitary - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Tee Sanitary - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Threaded_Concentric Reducer&quot;,&quot;Revit Type&quot;:&quot;Threaded&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_Planting&quot;,&quot;Revit Family&quot;:&quot;27039_Shade_Tree_3682&quot;,&quot;Revit Type&quot;:&quot;27039_Shade_Tree_3682&quot;},{&quot;Revit Category&quot;:&quot;OST_Planting&quot;,&quot;Revit Family&quot;:&quot;3d_oak_tree_a_tree12bx_16942&quot;,&quot;Revit Type&quot;:&quot;3d_oak_tree_a_tree12bx_16942&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_Faucet&quot;,&quot;Revit Type&quot;:&quot;A-M_Faucet&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Faucet&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Gratting&quot;,&quot;Revit Type&quot;:&quot;A-M_Grating&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Grating&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Gratting-1&quot;,&quot;Revit Type&quot;:&quot;A-M_Grating-1&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Grating&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_Sink-Lavatory&quot;,&quot;Revit Type&quot;:&quot;A-M_Sink&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Sink&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_Tap&quot;,&quot;Revit Type&quot;:&quot;A-M_Sink Tap&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Sink Tap&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_toilet_wall_hung&quot;,&quot;Revit Type&quot;:&quot;A-M_Wall_Hung_WC-Valverfa_2893&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Water Closet&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_urinal_12788&quot;,&quot;Revit Type&quot;:&quot;A-M_Urinal&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Urinals&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Waste Trap DWC1&quot;,&quot;Revit Type&quot;:&quot;A-M_Waste Trap_DWC 2&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Waste Trap&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Waste Trap DWC1&quot;,&quot;Revit Type&quot;:&quot;A-M_Waste Trap_DWC&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Waste Trap&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;P-M_Floor_Drain&quot;,&quot;Revit Type&quot;:&quot;Floor_Drain&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Floor Drain&quot;},{&quot;Revit Category&quot;:&quot;OST_RailingTopRail&quot;,&quot;Revit Family&quot;:&quot;Top Rail Type&quot;,&quot;Revit Type&quot;:&quot;Circular - 40mm&quot;},{&quot;Revit Category&quot;:&quot;OST_Ramps&quot;,&quot;Revit Family&quot;:&quot;Ramp&quot;,&quot;Revit Type&quot;:&quot;Ramp 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Roofs&quot;,&quot;Revit Family&quot;:&quot;Sloped Glazing&quot;,&quot;Revit Type&quot;:&quot;A-M_Entrance  Glazing&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;E-M_CCTV Camera&quot;,&quot;Revit Type&quot;:&quot;Bullet Camera&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Bullet Camera&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;E-M_Thumb Reader&quot;,&quot;Revit Type&quot;:&quot;E-M_Thumb Reader&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Thumb Reader&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;External cctv dome camera&quot;,&quot;Revit Type&quot;:&quot;CCTV Camera&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Bullet Camera&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Storage Devices&quot;,&quot;Revit Family&quot;:&quot;IT BOX&quot;,&quot;Revit Type&quot;:&quot;IT BOX&quot;,&quot;dtCategory&quot;:&quot;Storage Devices&quot;,&quot;dtType&quot;:&quot;Hub Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;Network Box&quot;,&quot;Revit Type&quot;:&quot;Computer Server&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Switch Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;NVR Box&quot;,&quot;Revit Type&quot;:&quot;CCTV Control Switches&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;NVR Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;NVR Box&quot;,&quot;Revit Type&quot;:&quot;NVR Box&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Network Video Recorder&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Lift&quot;,&quot;Revit Family&quot;:&quot;A-M_Elevator-KONE-MonoSpace500_Front_Opening&quot;,&quot;Revit Type&quot;:&quot;150fpm_2000lbs_Passenger Elevator&quot;,&quot;dtCategory&quot;:&quot;Lift&quot;,&quot;dtType&quot;:&quot;Passenger Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Lift&quot;,&quot;Revit Family&quot;:&quot;A-M_Elevator-KONE-MonoSpace500_Front_Opening Service Lift&quot;,&quot;Revit Type&quot;:&quot;150fpm_2000lbs_Passenger Elevator&quot;,&quot;dtCategory&quot;:&quot;Lift&quot;,&quot;dtType&quot;:&quot;Passenger Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Mirror&quot;,&quot;Revit Type&quot;:&quot;Mirror&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Mirror&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Mirror 2&quot;,&quot;Revit Type&quot;:&quot;Mirror 2&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Mirror&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Lift&quot;,&quot;Revit Family&quot;:&quot;A-M_Scissor_lift_18142&quot;,&quot;Revit Type&quot;:&quot;Scissor_lift_18142&quot;,&quot;dtCategory&quot;:&quot;Lift&quot;,&quot;dtType&quot;:&quot;Scissor Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Soap_Dispenser_3270 (1)&quot;,&quot;Revit Type&quot;:&quot;Soap_Dispenser_3270 (1)&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Soap Dispenser&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_ACE Material Pallet_Jack_Lifting Equpiment&quot;,&quot;Revit Type&quot;:&quot;E-M_ACE Material Pallet_Jack_Lifting Equpiment&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Electric Pallet Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Fabric Checking Machine&quot;,&quot;Revit Type&quot;:&quot;E-M_Fabric Checking Machine&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Fabric Checker&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Hand Pallet Trolley&quot;,&quot;Revit Type&quot;:&quot;E-M_Hand Pallet Trolley&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Hand Pallet Trolley&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Weighing Scale Platform&quot;,&quot;Revit Type&quot;:&quot;E-M_Weighing Scale Platform&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Platform Scale&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Weighing Scale-Tabletop&quot;,&quot;Revit Type&quot;:&quot;E-M_Weighing Scale-Tabletop&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Table Top&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Xerox Machine&quot;,&quot;Revit Type&quot;:&quot;E-M_Xerox Machine&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Photo Copier&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;sewing_machine_7099&quot;,&quot;Revit Type&quot;:&quot;Fax - Table&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Sewing Machine&quot;},{&quot;Revit Category&quot;:&quot;OST_Sprinklers&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Sprinkler_pendent&quot;,&quot;Revit Type&quot;:&quot;Pendent Type Sprinkler_BOAZ&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;BOAZ Pendent Type Sprinkler&quot;},{&quot;Revit Category&quot;:&quot;OST_Sprinklers&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Sprinkler_pendent&quot;,&quot;Revit Type&quot;:&quot;Pendent Type Sprinkler_Tyco&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Tyco Pendent Type Sprinkler&quot;},{&quot;Revit Category&quot;:&quot;OST_Sprinklers&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Sprinkler_Upright&quot;,&quot;Revit Type&quot;:&quot;Pendent Type Sprinkler_Tyco&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Tyco Upright Type Sprinkler&quot;},{&quot;Revit Category&quot;:&quot;OST_StackedWalls&quot;,&quot;Revit Family&quot;:&quot;Stacked Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Stacked Wall 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Stairs&quot;,&quot;Revit Family&quot;:&quot;Cast-In-Place Stair&quot;,&quot;Revit Type&quot;:&quot;A-M_Monolithic Stair&quot;},{&quot;Revit Category&quot;:&quot;OST_StairsLandings&quot;,&quot;Revit Family&quot;:&quot;Monolithic Landing&quot;,&quot;Revit Type&quot;:&quot;A-M_300mm Thickness&quot;},{&quot;Revit Category&quot;:&quot;OST_StairsRailing&quot;,&quot;Revit Family&quot;:&quot;Railing&quot;,&quot;Revit Type&quot;:&quot;900mm Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_StairsRailing&quot;,&quot;Revit Family&quot;:&quot;Railing&quot;,&quot;Revit Type&quot;:&quot;Rail - Digger Specialties - C321 - Heavy Duty - Crossover - 42\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_StairsRuns&quot;,&quot;Revit Family&quot;:&quot;Monolithic Run&quot;,&quot;Revit Type&quot;:&quot;A-M_150mm Depth&quot;},{&quot;Revit Category&quot;:&quot;OST_StructConnections&quot;,&quot;Revit Family&quot;:&quot;A-M_Steel Support&quot;,&quot;Revit Type&quot;:&quot;Steel Support&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Type 3&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Type 4&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Type 7&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Type 6&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Boundary Wall&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular-Column with Drop Caps&quot;,&quot;Revit Type&quot;:&quot;S-M_TYPE_1&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S-M_Type_2&quot;,&quot;Revit Type&quot;:&quot;M_300 x 450&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S-M_Type_2&quot;,&quot;Revit Type&quot;:&quot;M_17&apos;3\&quot;X 8&apos;7.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S-M_Type_2 Corner end&quot;,&quot;Revit Type&quot;:&quot;M_300 x 450&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S_M_LShaped Column&quot;,&quot;Revit Type&quot;:&quot;12 x 18&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S_M_Shaped Column Cornered&quot;,&quot;Revit Type&quot;:&quot;S-M_TYPE_2&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_1&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_4&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_2&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_3&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_6&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_7&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_5&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_8&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_10_Service Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_10_Passenger  Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Pump Foundation&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Pump Foundation 2&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Pump Foundation 3&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_9\&quot;X24&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_18x24&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_9\&quot;X30&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_12\&quot;X18&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_30\&quot;X18&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_18x12&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_9\&quot;X20&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_20x9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M _BR1_18x9 2&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_BR2_20x9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_12\&quot;X24&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_18x9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M _BR3_18x9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_Concealed Beam 9x6&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_30x24&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_18x6 Pergola&quot;},{&quot;Revit Category&quot;:&quot;OST_TelephoneDevices&quot;,&quot;baType&quot;:&quot;Office Furniture &amp; Fittings&quot;,&quot;Revit Family&quot;:&quot;Telephone_Generic_Business_bsf_18281&quot;,&quot;Revit Type&quot;:&quot;Telephone_Generic_Business_bsf_18281&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Telephone&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_ Walls Facade  11&quot;,&quot;Revit Type&quot;:&quot;Walls Facade  11&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Wall Facade 12&quot;,&quot;Revit Type&quot;:&quot;Wall Facade 12&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Wall Facade1&quot;,&quot;Revit Type&quot;:&quot;Wall Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls 1&quot;,&quot;Revit Type&quot;:&quot;Walls 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade&quot;,&quot;Revit Type&quot;:&quot;Walls Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 1&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 8&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 10&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 13&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 13&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 2&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 3&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 3&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 4&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 8&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 6&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 6&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 8&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 8&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 9&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 9&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade1&quot;,&quot;Revit Type&quot;:&quot;A-M_Walls Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade2&quot;,&quot;Revit Type&quot;:&quot;Walls Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade3&quot;,&quot;Revit Type&quot;:&quot;Walls Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Blockwork- 9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exteroir_Blockwork- 9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Blockwork- 4.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Granite Claddding&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Wall 7 \&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Blockwork- 6 \&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Blockwork- 0.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Wal_Exterior - 0.5&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Blockwork- 9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom-Fabio Brown 0.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom-Eternity Brown 0.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom-Eternity Beige 0.5\&quot; 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom- 0.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom-Tiles&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Ledge Wall- 4\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Bathroom Partion- 3\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;Generic - 8\&quot; Masonry&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;Generic - 9\&quot; Masonry&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes Lift Cera Grey Granite&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes Lift Jet Black  Granite&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;S-M-9\&quot;  Wall&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;S-M-225  Wall&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;S-M-6 &apos;Wall&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;S-M-7 1/2\&quot;  Wall 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall 4&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall 5&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall 6&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_EXterior Curtain Wall 9&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed Panel&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall 7&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Window&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interrior Curtain Wall 8&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Glazed &quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Glazed &quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall Staircase&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interrior Curtain Wall 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior fixed glass&quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Instance-Window-Fixed&quot;,&quot;Revit Type&quot;:&quot;0610 x 1220mm&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Glazed &quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Reliable_Louvers_-_6375ZS_-_Stationary_Heavyline_Louver&quot;,&quot;Revit Type&quot;:&quot;Reliable_Louvers_-_6375ZS_-_Stationary_Heavyline_Louver&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Glazed &quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Window 1&quot;,&quot;Revit Type&quot;:&quot;Window 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Windows_Opening-Slide_UFME_Fenetre_Coulissante_2V&quot;,&quot;Revit Type&quot;:&quot;W2    6&apos;  X 4&apos; 6\&quot;&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Punched &quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Windows_Opening-Slide_UFME_Fenetre_Coulissante_2V&quot;,&quot;Revit Type&quot;:&quot;W3    4&apos;  X 4&apos; 6\&quot; 2&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Punched &quot;},{&quot;dtCategory&quot;:&quot;KAR Docs&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems/${C_LTMUSERITEMDBID1}/relateditems/bulk?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Untill getting created status call &apos;N&apos; time . Looping statement</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_TASKID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">C_TASKID</stringProp>
                <stringProp name="RegexExtractor.regex">qa1-api.sa.invicara.com:443/itemsvc/api/v1/tasks/(.+?)\n</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_TASKID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">_userItemId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${c_status}&quot;.indexOf(&quot;COMPLETED&quot;) == -1,)}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/itemsvc/api/v1/tasks?nsfilter_T001_LOADTYPEMAPFROM_XLXSFILE" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="nsfilter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">nsfilter</stringProp>
                      <stringProp name="Argument.value">${CNAMESPACESID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/itemsvc/api/v1/tasks/${C_TASKID}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Untill getting created status call &apos;N&apos; time . Looping statement</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="c_status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">c_status</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;_status&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTFOUND_c_status</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                <intProp name="OnError.action">6</intProp>
              </ResultAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_ADDBIMPK_UPLOADERDATASOURECE" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/datasourcesvc/api/v1/orchestrators?nsfilter_T001_ADDBIMPK_UPLOADERDATASOURECE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;_name&quot;: &quot;BIMPK Uploader&quot;,&#xd;
	&quot;_description&quot;: &quot;Orchestrator to upload model from BIMPK file&quot;,&#xd;
	&quot;_namespaces&quot;: [&quot;${CNAMESPACESID}&quot;],&#xd;
	&quot;_userType&quot;: &quot;bimpk_uploader&quot;,&#xd;
	&quot;_timeout&quot;: &quot;4 * *&quot;,&#xd;
	&quot;_params&quot;: {&#xd;
		&quot;tasks&quot;: [  {&#xd;
			&quot;name&quot;: &quot;folder_cleaner_target&quot;,&#xd;
			&quot;_sequenceno&quot;: 6&#xd;
		}, {&#xd;
			&quot;name&quot;: &quot;scz_relations_target&quot;,&#xd;
			&quot;_sequenceno&quot;: 5&#xd;
		}, {&#xd;
			&quot;name&quot;: &quot;default_script_target&quot;,&#xd;
			&quot;_actualparams&quot;: {&#xd;
				&quot;userType&quot;: &quot;iaf_ext_bimpk_upload&quot;,&#xd;
				&quot;_scriptName&quot;: &quot;createModelDataCache&quot;&#xd;
			},&#xd;
			&quot;_sequenceno&quot;: 4&#xd;
		}, {&#xd;
			&quot;name&quot;: &quot;default_script_target&quot;,&#xd;
			&quot;_actualparams&quot;: {&#xd;
				&quot;userType&quot;: &quot;iaf_ext_bimpk_upload&quot;,&#xd;
				&quot;_scriptName&quot;: &quot;uploadBimpk&quot;&#xd;
			},&#xd;
			&quot;_sequenceno&quot;: 3&#xd;
		}, {&#xd;
			&quot;name&quot;: &quot;bimpk_element_extractor&quot;,&#xd;
			&quot;_sequenceno&quot;: 2&#xd;
		}, {&#xd;
			&quot;name&quot;: &quot;bimpk_file_extractor&quot;,&#xd;
			&quot;_sequenceno&quot;: 1&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/datasourcesvc/api/v1/orchestrators?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">[&quot;${C_NAMESPACESID}&quot;] &quot;_timeout&quot;: &quot;4 * *&quot;,</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_orchestratorId" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_fileId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_orchestratorId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_orchestratorId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/datasourcesvc/api/v1/orchestrators?nsfilter_T001_ADDBIMPK_UPLOADERDATASOURECE" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;_name&quot;:&quot;BIMPK Uploader&quot;,&quot;_description&quot;:&quot;Orchestrator to upload model from BIMPK file&quot;,&quot;_namespaces&quot;:[&quot;${CNAMESPACESID}&quot;],&quot;_userType&quot;:&quot;iaf_bimpk_upload&quot;,&quot;_params&quot;:{&quot;tasks&quot;:[{&quot;_orchcomp&quot;:&quot;default_script_target&quot;,&quot;_name&quot;:&quot;Copy space relationships from previous version&quot;,&quot;_sequenceno&quot;:7,&quot;_actualparams&quot;:{&quot;userType&quot;:&quot;iaf_ext_bimpk_post_imp&quot;,&quot;relatedUserType&quot;:&quot;iaf_ext_space_coll&quot;}},{&quot;_orchcomp&quot;:&quot;default_script_target&quot;,&quot;_name&quot;:&quot;Copy assets relationships from previous version&quot;,&quot;_sequenceno&quot;:6,&quot;_actualparams&quot;:{&quot;userType&quot;:&quot;iaf_ext_bimpk_post_imp&quot;,&quot;relatedUserType&quot;:&quot;iaf_ext_asset_coll&quot;}},{&quot;name&quot;:&quot;folder_cleaner_target&quot;,&quot;_sequenceno&quot;:5},{&quot;name&quot;:&quot;scz_relations_target&quot;,&quot;_sequenceno&quot;:4},{&quot;name&quot;:&quot;default_script_target&quot;,&quot;_actualparams&quot;:{&quot;userType&quot;:&quot;iaf_ext_bimpk_upload&quot;},&quot;_sequenceno&quot;:3},{&quot;name&quot;:&quot;bimpk_element_extractor&quot;,&quot;_sequenceno&quot;:2},{&quot;name&quot;:&quot;bimpk_file_extractor&quot;,&quot;_sequenceno&quot;:1}]}}&#xd;
&#xd;
{&#xd;
  &quot;_name&quot;: &quot;BIMPK Uploader&quot;,&#xd;
  &quot;_description&quot;: &quot;Orchestrator to upload model from BIMPK file&quot;,&#xd;
  &quot;_namespaces&quot;: [&#xd;
    &quot;${CNAMESPACESID}&quot;&#xd;
  ],&#xd;
  &quot;_userType&quot;: &quot;iaf_bimpk_upload&quot;,&#xd;
  &quot;instant&quot;: true,&#xd;
  &quot;_params&quot;: {&#xd;
    &quot;tasks&quot;: [&#xd;
      {&#xd;
        &quot;name&quot;: &quot;bimpk_file_extractor&quot;,&#xd;
        &quot;_sequenceno&quot;: 1&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/datasourcesvc/api/v1/orchestrators?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_orchestratorId" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_fileId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_orchestratorId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_orchestratorId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_Upload BIMPK FILE" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/filesvc/api/v1/files?_namespaces&amp;nsfilter_T001_Upload BIMPK FILE" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="CSD2-JJR-B2-ZZ-FM-W-0001.bimpk" elementType="HTTPFileArg">
                    <stringProp name="File.path">CSD2-JJR-B2-ZZ-FM-W-0001.bimpk</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">file</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/filesvc/api/v1/files?_namespaces=${CNAMESPACESID}&amp;nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
              <stringProp name="TestPlan.comments">CSD2-JJR-B2-ZZ-FM-W-0001    1901RK-INV-01-ZZ-M3-Z-0001_Federated.0001  5SPD_Federated_Model_R16_Compressed_V5</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_DWFILEID" enabled="true">
                <stringProp name="TestPlan.comments">_tipId&quot;:&quot;b79a071a-304c-4e28-985c-ed7deb593b11&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_DWFILEID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_fileId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_DWFILEID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_DWFILEVERSIONID" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_orchrunid&quot;:&quot;f9fcae73-5672-457a-8bca-4f6a4cc36159&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_DWFILEVERSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_DWFILEVERSIONID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_IMPORTMODEL-ACTION" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/datasourcesvc/api/v1/orchrun?nsfilter_T001_DIGITALTWINIMPORTMODEL-ACTION" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;orchestratorId&quot;:&quot;${C_orchestratorId}&quot;,&quot;_actualparams&quot;:[{&quot;sequence_type_id&quot;:&quot;9a616686-571e-4167-8a70-d180dcd585a9&quot;,&#xd;
&quot;params&quot;:{&quot;_fileId&quot;:&quot;${C_DWFILEID}&quot;,&quot;_fileVersionId&quot;:&quot;${C_DWFILEVERSIONID}&quot;}}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/datasourcesvc/api/v1/orchrun?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Untill getting created status call &apos;N&apos; time . Looping statement</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_DWORCHRUNID" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_orchrunid&quot;:&quot;f9fcae73-5672-457a-8bca-4f6a4cc36159&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_DWORCHRUNID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_orchrunid&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_DWORCHRUNID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">20000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_IMPORTMODEL-GETACTION" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__jexl3(&quot;${response}&quot; != &quot;COMPLETED&quot; )}</stringProp>
              <stringProp name="TestPlan.comments">COMPLETED</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/datasourcesvc/api/v1/orchrun_T001_DIGITALTWINIMPORTMODEL-ACTION" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/datasourcesvc/api/v1/orchrun/${C_DWORCHRUNID}?nsfilter=${CNAMESPACESID}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">${CNAMESPACESID}</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="response" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;_orchrunid&quot;:&quot;f9fcae73-5672-457a-8bca-4f6a4cc36159&quot;</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">response</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;_status&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTFOUND_response</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="P_ORCHTHINKTIME" enabled="true">
                  <stringProp name="ConstantTimer.delay">${P_ORCHTHINKTIME}</stringProp>
                </ConstantTimer>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">FileWriter f = new FileWriter(&quot;InvicaraIPUT4UserRun002_0107.txt&quot;,true);
BufferedWriter out = new BufferedWriter(f);
out.write(&quot;${__timeShift(yyyy-MM-dd HH:mm:ss,,,,)}&quot;  + &quot;,&quot; + vars.get(&quot;response&quot;) + &quot;,&quot; + &quot;${__threadNum}&quot; + &quot;,&quot; + &quot;${CNAMESPACESID}&quot; + &quot;,&quot; + &quot;${C_DWORCHRUNID}&quot; + &quot;\n&quot;);
out.close();
f.close();</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">4</intProp>
          </ResultAction>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="TestPlan.comments">C:\Users\VMPT_User\Documents\Invicara_Jmeter\KSA Environment SA QA1\4.0 Platform Version\4USER_CSD2_MODELIMPORT-24April2023_TR1.jtl</stringProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="QA2_Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/VMPT_User/Documents/Invicara_Jmeter/QA1 Environment/T001_MODELIMPORT_ADMINPORTAL_QA1.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">P_FileID,P_EMAILID,P_PASSWORD,</stringProp>
        </CSVDataSet>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
          <stringProp name="maximumValue">0010000</stringProp>
          <stringProp name="minimumValue">0000001</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">RANDOMNO</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="QA3_URL" elementType="Argument">
              <stringProp name="Argument.name">QA3_URL</stringProp>
              <stringProp name="Argument.value">qa1-app.in.invicara.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">qa3-app.invicara.com</stringProp>
            </elementProp>
            <elementProp name="P_ORCHTHINKTIME" elementType="Argument">
              <stringProp name="Argument.name">P_ORCHTHINKTIME</stringProp>
              <stringProp name="Argument.value">30000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T001_THINKTIME" elementType="Argument">
              <stringProp name="Argument.name">T001_THINKTIME</stringProp>
              <stringProp name="Argument.value">5000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="P_DAYMONTH" elementType="Argument">
              <stringProp name="Argument.name">P_DAYMONTH</stringProp>
              <stringProp name="Argument.value">1801A</stringProp>
              <stringProp name="Argument.desc">DATE AND MONTH </stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="QA3_URL_API" elementType="Argument">
              <stringProp name="Argument.name">QA3_URL_API</stringProp>
              <stringProp name="Argument.value">qa3-api.invicara.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">qa3-api.invicara.com</stringProp>
            </elementProp>
            <elementProp name="P_PROJECTNAME" elementType="Argument">
              <stringProp name="Argument.name">P_PROJECTNAME</stringProp>
              <stringProp name="Argument.value">PTDEOMTEST2401BB</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="QA3_URL_ID" elementType="Argument">
              <stringProp name="Argument.name">QA3_URL_ID</stringProp>
              <stringProp name="Argument.value">qa3-id.invicara.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="QA3_APP-URL" elementType="Argument">
              <stringProp name="Argument.name">QA3_APP-URL</stringProp>
              <stringProp name="Argument.value">qa3-app.invicara.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="P_EMAILID" elementType="Argument">
              <stringProp name="Argument.name">P_EMAILID</stringProp>
              <stringProp name="Argument.value">jeeva.k@indiumsoft.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">true</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_LAUNCHURL" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/admin/T001_MODELOMPORT_LAUNCHURL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_APP-URL}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/admin/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">none</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/v1/oauth/authorize/T001_MODELOMPORT_LAUNCHURL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">implicit-client</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">read%20write</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://${QA3_APP-URL}/admin/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/oauth/authorize/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_APP-URL}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/T001_MODELOMPORT_LAUNCHURL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">implicit-client</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">read%20write</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://${QA3_APP-URL}/admin/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_APP-URL}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_CSRFTOKEN" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_CSRFTOKEN</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_csrf&quot; content=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_CSRFTOKEN</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_EMAILACTION" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/emailExists/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;_csrf&quot;:&quot;${C_CSRFTOKEN}&quot;,&quot;username&quot;:&quot;${P_EMAILID}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/emailExists</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/passportsvc/api/?client_id=implicit-client&amp;response_type=token&amp;scope=read%20write&amp;redirect_uri=https://${QA3_APP-URL}/admin/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                  <elementProp name="newrelic" elementType="Header">
                    <stringProp name="Header.name">newrelic</stringProp>
                    <stringProp name="Header.value">eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjMyMTI4ODYiLCJhcCI6IjUzNTg4ODYwNiIsImlkIjoiMTNhY2MxMjFjMTdhOWJiOCIsInRyIjoiNmEzNmQ4NjBhYmUwNGM4MGVjNWIzNjM4Y2QzNjVhNjAiLCJ0aSI6MTY3NDU0NTk1NDk1OX19</stringProp>
                  </elementProp>
                  <elementProp name="X-NewRelic-ID" elementType="Header">
                    <stringProp name="Header.name">X-NewRelic-ID</stringProp>
                    <stringProp name="Header.value">VwQGU15bDhAFVVlRDggBVVY=</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="tracestate" elementType="Header">
                    <stringProp name="Header.name">tracestate</stringProp>
                    <stringProp name="Header.value">3212886@nr=0-1-3212886-535888606-13acc121c17a9bb8----1674545954959</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="traceparent" elementType="Header">
                    <stringProp name="Header.name">traceparent</stringProp>
                    <stringProp name="Header.value">00-6a36d860abe04c80ec5b3638cd365a60-13acc121c17a9bb8-01</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="X-CSRF-TOKEN" elementType="Header">
                    <stringProp name="Header.name">X-CSRF-TOKEN</stringProp>
                    <stringProp name="Header.value">${C_CSRFTOKEN}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="_csrf" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_csrf</stringProp>
                    <stringProp name="Argument.value">${C_CSRFTOKEN}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                    <stringProp name="Argument.value">${P_EMAILID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/passportsvc/api/?client_id=implicit-client&amp;response_type=token&amp;scope=read%20write&amp;redirect_uri=https://${QA3_APP-URL}/admin/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/v1/oauth/authorize/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">implicit-client</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">read%20write</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://${QA3_APP-URL}/admin/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/oauth/authorize/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/passportsvc/api/?client_id=implicit-client&amp;response_type=token&amp;scope=read%20write&amp;redirect_uri=https://${QA3_APP-URL}/admin/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/saml/discovery/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entityID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">entityID</stringProp>
                    <stringProp name="Argument.value">https%3A%2F%2F${QA3_URL_API}%2Fpassportsvc%2Fapi%2Fsaml%2Fmetadata</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="returnIDParam" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">returnIDParam</stringProp>
                    <stringProp name="Argument.value">idp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/saml/discovery</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/passportsvc/api/?client_id=implicit-client&amp;response_type=token&amp;scope=read%20write&amp;redirect_uri=https://${QA3_APP-URL}/admin/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/saml/login/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="disco" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">disco</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="idp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">idp</stringProp>
                    <stringProp name="Argument.value">https%3A%2F%2F${QA3_URL_ID}%2Fauth%2Frealms%2Ftwinit.io</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/saml/login</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/passportsvc/api/?client_id=implicit-client&amp;response_type=token&amp;scope=read%20write&amp;redirect_uri=https://${QA3_APP-URL}/admin/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_SAMLREQUESTID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_SAMLREQUESTID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;SAMLRequest&quot; value=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_SAMLREQUESTID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/auth/realms/twinit.io/protocol/saml/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="SAMLRequest" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">SAMLRequest</stringProp>
                    <stringProp name="Argument.value">${C_SAMLREQUESTID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_ID}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/auth/realms/twinit.io/protocol/saml</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_TABID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">C_TABID</stringProp>
                <stringProp name="RegexExtractor.regex">tab_id=(.+?)\n</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_TABID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/auth/realms/twinit.io/login-actions/authenticate/T001_MODELOMPORT_EMAILACTION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">https%3A%2F%2F${QA3_URL_API}%2Fpassportsvc%2Fapi%2Fsaml%2Fmetadata</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tab_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tab_id</stringProp>
                    <stringProp name="Argument.value">${C_TABID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_ID}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/realms/twinit.io/login-actions/authenticate</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_SESSIONCODEID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_SESSIONCODEID</stringProp>
                <stringProp name="RegexExtractor.regex">session_code=(.+?)&amp;amp</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not_C_SESSIONCODEID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_EXECUTIONCODEID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_EXECUTIONCODEID</stringProp>
                <stringProp name="RegexExtractor.regex">execution=(.+?)&amp;amp</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not_C_EXECUTIONCODEID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_LOGINACTION" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/auth/realms/twinit.io/login-actions/authenticate?session_code&amp;execution&amp;client_id_T006_USERSIGNUP_LOGIN" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                    <stringProp name="Argument.value">${P_EMAILID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                    <stringProp name="Argument.value">Tomjerry@13</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="credentialId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">credentialId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_ID}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/auth/realms/twinit.io/login-actions/authenticate?session_code=${C_SESSIONCODEID}&amp;execution=${C_EXECUTIONCODEID}&amp;client_id=https%3A%2F%2F${QA3_URL_API}%2Fpassportsvc%2Fapi%2Fsaml%2Fmetadata&amp;tab_id=${C_TABID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">null</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_SAMLRESPONSEID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_SAMLRESPONSEID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;SAMLResponse&quot; value=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not_C_SAMLRESPONSEID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/saml/SSOT006_USERSIGNUP_LOGIN" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="SAMLResponse" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">SAMLResponse</stringProp>
                    <stringProp name="Argument.value">${C_SAMLRESPONSEID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/saml/SSO</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">null</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/v1/oauth/authorize/T006_USERSIGNUP_LOGIN" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">implicit-client</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">read%20write</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://${QA3_APP-URL}/admin/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/oauth/authorize/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_ACCESSTOKENID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">C_ACCESSTOKENID</stringProp>
                <stringProp name="RegexExtractor.regex">#access_token=(.+?)&amp;token_type</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not_C_ACCESSTOKENID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/admin/T006_USERSIGNUP_LOGIN" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_APP-URL}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/admin/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/v1/users/me_T006_USERSIGNUP_LOGIN" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/users/me</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_APP-URL}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_APP-URL}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                    <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                    <stringProp name="Header.value">*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID}</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/passportsvc/api/v1/invites_T006_USERSIGNUP_LOGIN" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="_status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_status</stringProp>
                    <stringProp name="Argument.value">PENDING</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="includeAll" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">includeAll</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/invites</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_APP-URL}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_APP-URL}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                    <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                    <stringProp name="Header.value">*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID}</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_LOGIN API" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/passportsvc/api/v1/oauth/token_T001__LOGIN API" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${P_EMAILID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">Tomjerry@13</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">password</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/oauth/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic cGFzc3dvcmQtY2xpZW50OmNla25ZTEhzdmZtMnpLWkE=</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_ACCESSTOKENID" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_ACCESSTOKENID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_ACCESSTOKENID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_PROJECT CREATION" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/passportsvc/api/v1/apps?_pageSize_T001_PROJECT CREATION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/apps?_pageSize=100</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_APPID" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_APPID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_APPID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/passportsvc/api/v1/auth/token?appId_T001_PROJECT CREATION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/auth/token?appId=0f02c817-8655-423e-9d22-5439187078f9</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">0f02c817-8655-423e-9d22-5439187078f9</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_ACCESSTOKENID1" enabled="true">
                <stringProp name="TestPlan.comments">_namespaces&quot;:\[&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_ACCESSTOKENID1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_ACCESSTOKENID1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/passportsvc/api/v1/workspaces" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${P_PROJECTNAME}${RANDOMNO}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                  <elementProp name="userType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">project_workspace</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/workspaces</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">1200000</stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">/passportsvc/api/v1/workspaces?_name=demouser0601AA&amp;_userType=project_workspace</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_DWFILEID" enabled="false">
                <stringProp name="TestPlan.comments">_tipId&quot;:&quot;b79a071a-304c-4e28-985c-ed7deb593b11&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_DWFILEID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_fileId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_DWFILEID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_DWFILEVERSIONID" enabled="false">
                <stringProp name="TestPlan.comments">&quot;_orchrunid&quot;:&quot;f9fcae73-5672-457a-8bca-4f6a4cc36159&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_DWFILEVERSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_DWFILEVERSIONID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/passportsvc/api/v1/workspaces_T001_PROJECT CREATION" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;_name&quot;:&quot;${P_PROJECTNAME}${RANDOMNO}&quot;,&quot;_description&quot;:&quot;PTTEST${P_DAYMONTH}${RANDOMNO}&quot;,&quot;_shortName&quot;:&quot;DEMO${P_DAYMONTH}${RANDOMNO}&quot;,&quot;_userAttributes&quot;:{&quot;nextScriptEngine&quot;:true},&quot;_userType&quot;:&quot;project_workspace&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/passportsvc/api/v1/workspaces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}/passportsvc/api/?client_id=implicit-client&amp;response_type=token&amp;scope=read%20write&amp;redirect_uri=https://${QA3_URL}/admin/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-GB,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${QA3_URL_API}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua</stringProp>
                    <stringProp name="Header.value">&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;101&quot;, &quot;Google Chrome&quot;;v=&quot;101&quot;</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-mobile" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="sec-ch-ua-platform" elementType="Header">
                    <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_TASKSID" enabled="false">
                <stringProp name="TestPlan.comments">_namespaces&quot;:\[&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_TASKSID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_TASKSID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">FileWriter f = new FileWriter(&quot;InvicaraIPUT.csv&quot;,true);
BufferedWriter out = new BufferedWriter(f);
out.write(vars.get(&quot;CNAMESPACESID&quot;) + &quot;,&quot;+  &quot;\n&quot;);
out.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CNAMESPACESID" enabled="false">
                <stringProp name="TestPlan.comments">_namespaces&quot;:\[&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CNAMESPACESID</stringProp>
                <stringProp name="RegexExtractor.regex">_namespaces&quot;:\[&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_CNAMESPACESID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="CNAMESPACESID" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">CNAMESPACESID</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">_namespaces&quot;:[&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;]</stringProp>
                <stringProp name="BoundaryExtractor.default">NOTFOUND_CNAMESPACESID</stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </BoundaryExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_T001_PROJECT CREATION" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;_namespaces&quot;:[&quot;${CNAMESPACESID}&quot;],&quot;_name&quot;:&quot;Root Container&quot;,&quot;_shortName&quot;:&quot;Root Container&quot;,&quot;_userType&quot;:&quot;file_container&quot;,&quot;_description&quot;:&quot;Root Container&quot;,&quot;_version&quot;:{&quot;_userAttributes&quot;:{&quot;path&quot;:&quot;/&quot;}},&quot;_itemClass&quot;:&quot;NamedFileCollection&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">/itemsvc/api/v1/nameduseritems   C_NAMESPACESID</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_USERITEMDBID1" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_USERITEMDBID1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_userItemDbId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_USERITEMDBID1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_USERTIPID1" enabled="true">
                <stringProp name="TestPlan.comments">_createdById&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_USERTIPID1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_USERTIPID1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_CREATEDBYID1" enabled="true">
                <stringProp name="TestPlan.comments">_createdById&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_CREATEDBYID1</stringProp>
                <stringProp name="RegexExtractor.regex">_createdById&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_CREATEDBYID1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_CREATEDATID" enabled="true">
                <stringProp name="TestPlan.comments">_createdById&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_CREATEDATID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_createdAt&quot;:(.+?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_CREATEDATID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_LOAD PROJECT SETUP" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_T001_LOAD PROJECT SETUP" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
   {&#xd;
      &quot;_name&quot;:&quot;BIMPK Upload&quot;,&#xd;
      &quot;_shortName&quot;:&quot;iaf_ext_bimpk_upload&quot;,&#xd;
      &quot;_description&quot;:&quot;Load, Transform and Write Model from BIMPK&quot;,&#xd;
      &quot;_userType&quot;:&quot;iaf_ext_bimpk_upload&quot;,&#xd;
      &quot;_version&quot;:{&#xd;
         &quot;_userData&quot;:&quot;const groupBy = (objectArray, property) =&gt; {\n  return objectArray.reduce((acc, obj) =&gt; {\nlet key = obj[property];\nkey = key.replace(/[\\.]+/g, \&quot;\&quot;);\nif (!acc[key]) {\n  acc[key] = {};\n}\n// Add object to list for given key&apos;s value\nacc[key] = obj;\nreturn acc;\n  }, {});\n}\n\nconst _mapItemsAsRelated = (parentItems, relatedItems, fromField, relatedField) =&gt; {\n  let res = [];\n  for (let i = 0, l = parentItems.length; i &lt; l; i++) {\nlet relatedRecs = [];\n\nlet parentItem = parentItems[i];\nlet fromValues = [];\n\nif (!(parentItem[fromField]) &amp;&amp; fromField.indexOf(\&quot;.\&quot;) &gt; 1) {\n  fromValues = fromField.split(\&quot;.\&quot;).reduce((o, i) =&gt; o[i] || [], parentItem);\n} else {\n  fromValues = Array.isArray(parentItem[fromField]) ? parentItem[fromField] : [parentItem[fromField]];\n}\n\nif (fromValues &amp;&amp; fromValues.length &gt; 0)\n  relatedRecs = relatedItems.filter((r) =&gt; fromValues.includes(r[relatedField]));\n\nif (relatedRecs.length &gt; 0) {\n  res.push({\nparentItem: parentItems[i],\nrelatedItems: relatedRecs\n  });\n}\n  }\n  return res;\n}\n\nconst createBIMCollections = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Collections\&quot;}));\n\n  let packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\n  let packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\n  console.log(\&quot;Create BIM Collection\&quot;);\n  //create Elements Collection\n  const elementsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_elements\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_ba_elem\&quot;,\n\&quot;_description\&quot;: \&quot;Elements in BA model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_elements\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_coll = await IafScriptEngine.createCollection(elementsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Collection\&quot;}));\n\n  console.log(\&quot;model element collection\&quot;, model_els_coll)\n  let elemCollIndex = {\n\&quot;_id\&quot;: model_els_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  };\n  let elemIndex = await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  //create Element Properties Collection\n  const modelElemPropsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_elem_props\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_elprops\&quot;,\n\&quot;_description\&quot;: \&quot;Element Props in BA model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_element_props\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_props_coll = await IafScriptEngine.createCollection(modelElemPropsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Props Collection\&quot;}));\n\n  //create Type Elements Collection\n  const typeElemsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_type_el\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_type_el\&quot;,\n\&quot;_description\&quot;: \&quot;Type Elements in BA Check model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_type_elements\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_type_el_coll = await IafScriptEngine.createCollection(typeElemsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Type Element Collection\&quot;}));\n\n  console.log(\&quot;model type collection\&quot;, model_type_el_coll)\n\n  let typeElemCollIndex = {\n\&quot;_id\&quot;: model_type_el_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  }\n  let typeindex = await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  //create Geometry File Collection\n  const geometryFilesCol = {\n\&quot;_name\&quot;: packagename + \&quot;_geom_file\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_file\&quot;,\n\&quot;_description\&quot;: \&quot;File Collection for Geometry Files\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_geomresources\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_file_coll = await IafScriptEngine.createCollection(geometryFilesCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry File Collection\&quot;}));\n\n  //create Geometry View Collection\n  const geometryViewsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_geom_view\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_view\&quot;,\n\&quot;_description\&quot;: \&quot;Geometry Views in Model\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_geomviews\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_views_coll = await IafScriptEngine.createCollection(geometryViewsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry View Collection\&quot;}));\n\n  //create Model Data Cache Collection\n  const dataCacheCol = {\n\&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n\&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n\&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n}\nconst data_cache_coll = await IafScriptEngine.createCollection(dataCacheCol, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n\nlet bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\nlet bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\nconsole.log(\&quot;fileid: \&quot; + bimpkFileId + \&quot;, bimpkFileVersionid: \&quot; + bimpkFileVersionId);\n\n  //create Model Composite Item\n  const modelCompItem = {\n\&quot;_name\&quot;: packagename,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_modelver\&quot;,\n\&quot;_description\&quot;: \&quot;BIM model version by transform\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;_version\&quot;: {\n\&quot;_userAttributes\&quot;: {\n\&quot;bimpk\&quot;: {\n  \&quot;fileId\&quot;: bimpkFileId,\n  \&quot;fileVersionId\&quot;: bimpkFileVersionId\n}\n}\n}\n  }\n  let model = await IafScriptEngine.createNamedCompositeItem(modelCompItem, ctx)\n  await IafScriptEngine.setVar(\&quot;bim_model\&quot;, model);\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Model Composite Item\&quot;}));\n  console.log(JSON.stringify(model, null, 3))\n\n  let _myCollections = {\n\&quot;model_els_coll\&quot;: model_els_coll,\n\&quot;model_els_props_coll\&quot;: model_els_props_coll,\n\&quot;model_type_el_coll\&quot;: model_type_el_coll,\n\&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n\&quot;model_geom_views_coll\&quot;: model_geom_views_coll,\n\&quot;data_cache_coll\&quot;: data_cache_coll\n\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createBIMCollectionVersion = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Found Previous Model Creating Versions\&quot;}));\n\n  let bimModel = await IafScriptEngine.getVar(\&quot;bim_model\&quot;)\n  const modelRelatedCollection = await IafScriptEngine.getCollectionsInComposite(bimModel._id,null, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version - bim_model\&quot;}));\n\n  console.log(\&quot;bimModel\&quot;, JSON.stringify(bimModel))\n\n  let bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\n  let bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\n  console.log(\&quot;bimpkFileId\&quot;, JSON.stringify(bimpkFileId))\n\n  console.log(\&quot;bimpkFileVersionId\&quot;, JSON.stringify(bimpkFileVersionId))\n\n  let newModelVer = {\&quot;namedUserItemId\&quot;:bimModel._id}\n\n  newModelVer._userAttributes = {\nbimpk: {\nfileId: bimpkFileId,\nfileVersionId: bimpkFileVersionId\n}\n  }\n\n  let version = await IafScriptEngine.createNamedUserItemVersion(newModelVer,ctx);\n  console.log(\&quot;Create BIM Collection Version bim_model version\&quot;);\n  console.log(JSON.stringify(version, null, 3))\n\n  console.log(\&quot;newModversionelVer\&quot;, JSON.stringify(version))\n\n  const model_els_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_elements&apos;);\n  const model_els_props_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_element_props&apos;);\n  const model_type_el_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_type_elements&apos;);\n  const model_geom_file_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomresources&apos;);\n  const model_geom_views_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomviews&apos;);\n\n  let data_cache_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;data_cache&apos;);\n  if (!data_cache_coll) {\nlet packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\nlet packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\nlet data_cache_coll_def = {\n\&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n\&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n\&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n}\ndata_cache_coll = await IafScriptEngine.createCollection(data_cache_coll_def, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n  }\n\n  // create the versions\n\n  const model_els_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_els_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_coll\&quot;}));\n\n  const model_els_props_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_els_props_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_props_coll\&quot;}));\n\n  const model_type_el_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_type_el_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_type_el_coll\&quot;}));\n\n  const data_cache_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: data_cache_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Data Cache Version data_cache\&quot;}));\n\n  const model_geom_file_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_geom_file_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_file_coll\&quot;}));\n\n  const model_geom_views_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_geom_views_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_views_coll\&quot;}));\n\n  let elemCollIndex = {\n\&quot;_id\&quot;: model_els_coll._userItemId,\nindexDefs: [\n{\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n},\n{\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n}\n]\n  };\n  await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  let typeElemCollIndex = {\n\&quot;_id\&quot;: model_type_el_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  }\n  await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  // set them in global variables\n  IafScriptEngine.setVar(\&quot;model_els_coll\&quot;, model_els_coll);\n  IafScriptEngine.setVar(\&quot;model_els_props_coll\&quot;, model_els_props_coll);\n  IafScriptEngine.setVar(\&quot;model_type_el_coll\&quot;, model_type_el_coll);\n  IafScriptEngine.setVar(\&quot;data_cache_coll\&quot;, data_cache_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_file_coll\&quot;, model_geom_file_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_views_coll\&quot;, model_geom_views_coll);\n\n  let _myCollections = {\n\&quot;model_els_coll\&quot;: model_els_coll,\n\&quot;model_els_props_coll\&quot;: model_els_props_coll,\n\&quot;model_type_el_coll\&quot;: model_type_el_coll,\n\&quot;data_cache_coll\&quot;: data_cache_coll,\n\&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n\&quot;model_geom_views_coll\&quot;: model_geom_views_coll\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createRelatedItemsAndRelationships = async (_colls, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Relations and Related Items\&quot;}));\n\n  await IafScriptEngine.addRelatedCollections({\n\&quot;namedCompositeItemId\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n\&quot;relatedCollections\&quot;: [\n_colls.model_els_coll._userItemId,\n_colls.model_els_props_coll._userItemId,\n_colls.model_type_el_coll._userItemId,\n_colls.data_cache_coll._userItemId,\n_colls.model_geom_file_coll._userItemId,\n_colls.model_geom_views_coll._userItemId\n  ]}, ctx);\n  console.log(\&quot;Create Related Collection\&quot;);\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_els\&quot;);\n\n  const type_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_type_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_type_els\&quot;);\n\n  await IafScriptEngine.createItemsAsRelatedBulk({\n\&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_userItemId\&quot;: _colls.model_els_props_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;properties\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection properties\&quot;);\n\n  const el_to_type_relations = await IafScriptEngine.createRelations({\n\&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;relations\&quot;: IafScriptEngine.getVar(\&quot;manage_el_to_type_relations\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection Relations\&quot;);\n\n  await IafScriptEngine.setVar(\&quot;outparams\&quot;, {\n\&quot;filecolid\&quot;: _colls.model_geom_file_coll._userItemId,\n\&quot;viewcolid\&quot;: _colls.model_geom_views_coll._userItemId,\n\&quot;compositeitemid\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n\&quot;myCollections\&quot;: _colls\n  });\n  return await IafScriptEngine.getVar(\&quot;outparams\&quot;);\n}\n\nconst extractBimpk = async (param, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  try {\n//\n\n// Extract data \nlet _objectsArray = {\n  \&quot;objects\&quot;: [],\n  \&quot;properties\&quot;: [],\n  \&quot;types\&quot;: []\n}\nparam.files.forEach((file) =&gt; {\n  file.occurences.forEach((occ) =&gt; {\nocc.objects.objects.forEach((obj) =&gt; {\n  let _myObj = {\n\&quot;package_id\&quot;: obj.id,\n\&quot;type_id\&quot;: obj.type,\n\&quot;relationships\&quot;: obj.relationships,\n\&quot;source_id\&quot;: obj.sourceId,\n\&quot;properties\&quot;: obj.properties,\n\&quot;source_filename\&quot;:file.name\n  }\n  _objectsArray.objects.push(_myObj);\n\n});\nocc.objects.properties.forEach((prop) =&gt; {\n  _objectsArray.properties.push(prop);\n})\n\nocc.objects.types.forEach((type) =&gt; {\n  let _type = {\n\&quot;id\&quot;: type.id,\n\&quot;name\&quot;: type.name,\n\&quot;source_id\&quot;: type.sourceId,\n\&quot;properties\&quot;: type.properties\n\n  }\n  _objectsArray.types.push(_type);\n});\n\n  });\n\n});\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Data Extraction is complete\&quot;}));\n// Data Extraction Completed\n//--------------------------------\n// load the typemap\nlet assetTypeMap = null\ntry {\n  assetTypeMap = await IafScriptEngine.getItems({\n  \&quot;collectionDesc\&quot;: {\n\&quot;_userType\&quot;: \&quot;iaf_dt_type_map_defs_coll\&quot;,\n\&quot;_namespaces\&quot;: IafScriptEngine.getVar(\&quot;namespaces\&quot;)\n  },\n  \&quot;options\&quot;: {\n\&quot;page\&quot;: {\n  \&quot;getAllItems\&quot;: true\n}\n  }\n}, ctx);\n} catch (err) {\n  console.log(&apos;{\&quot;level\&quot;: \&quot;info\&quot;, \&quot;message\&quot;: \&quot;Type Map collection does not exist\&quot;}&apos;)\n}\n\nfor (let type of _objectsArray.types) {\n  for (let prop of type.properties) {\nlet _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\nprop.dName = _myProp.dName;\nif (_myProp.hasOwnProperty(\&quot;Asset Category\&quot;)) {\n  prop.baType = _myProp[\&quot;Asset Category\&quot;]\n}\n\n  }\n  type._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n  \&quot;format\&quot;: \&quot;hex\&quot;\n});\n  type.properties = groupBy(type.properties, \&quot;dName\&quot;);\n  if (assetTypeMap &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Family\&quot;) &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Type\&quot;)) {\nlet _myRow = assetTypeMap.find(x =&gt; x[\&quot;Revit Family\&quot;] == type.properties[\&quot;Revit Family\&quot;].val &amp;&amp; x[\&quot;Revit Type\&quot;] == type.properties[\&quot;Revit Type\&quot;].val);\nif (_myRow) {\n  type.dtCategory = _myRow.dtCategory;\n  type.dtType = _myRow.dtType;\n}\n  };\n};\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Type Extraction is complete\&quot;}));\n// do the same for properties in the object\nfor (let obj of _objectsArray.objects) {\n  obj.properties.forEach((prop) =&gt; {\nlet _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\nprop.dName = _myProp.dName;\n\n  });\n\n  obj._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n  \&quot;format\&quot;: \&quot;hex\&quot;\n});\n  obj.properties = groupBy(obj.properties, \&quot;dName\&quot;);\n  let _myVal = _objectsArray.types.find(x =&gt; x.id == obj.type_id);\n  obj.dtCategory = _myVal.dtCategory;\n  obj.dtType = _myVal.dtType;\n  if (_myVal.hasOwnProperty(\&quot;baType\&quot;)) {\nobj.baType = _myVal.baType;\n  }\n\n};\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Property Extraction is complete\&quot;}));\nlet _myProperties =[];\n_objectsArray.objects.forEach((object) =&gt;{\n  let _myProp = {\n_id:object._id,\nproperties:object.properties\n  }\n  _myProperties.push(_myProp);\n\n});\nawait IafScriptEngine.setVar(\&quot;properties\&quot;, _myProperties);\n_objectsArray.objects.forEach(e =&gt; { delete e.properties });\nawait IafScriptEngine.setVar(\&quot;manage_els\&quot;, _objectsArray.objects);\nawait IafScriptEngine.setVar(\&quot;manage_type_els\&quot;, _objectsArray.types);\nawait IafScriptEngine.setVar(\&quot;manage_el_to_type_relations\&quot;,\n  _mapItemsAsRelated(IafScriptEngine.getVar(\&quot;manage_els\&quot;),\nIafScriptEngine.getVar(\&quot;manage_type_els\&quot;), \&quot;type_id\&quot;, \&quot;id\&quot;));\n  } catch (err) {\nconsole.log(err);\n  }\n}\n\nconst cacheSourceFileGraphicsIds = async(params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n  \n  const { model_els_coll, data_cache_coll } = params.inparams.myCollections\n\n  console.log(&apos;--&gt; cache elems: &apos; + model_els_coll._name)\n  console.log(&apos;--&gt; cache data: &apos; + data_cache_coll._name)\n\n  let sourcefiles = await IafScriptEngine.getDistinct({\ncollectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\nfield: &apos;source_filename&apos;,\noptions: { getCollInfo: true }\n  }, ctx)\n\n  let sourcefileNames = sourcefiles._list[0]._versions[0]._relatedItems.source_filename\n\n  let cacheDataItems = []\n  for (let i = 0; i &lt; sourcefileNames.length; i++) {\n\nlet packageIds = await IafScriptEngine.getDistinct({\ncollectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\nquery: {source_filename: sourcefileNames[i]},\nfield: &apos;package_id&apos;,\noptions: { getCollInfo: true }\n}, ctx)\n\ncacheDataItems.push({\ndataType: &apos;sourcefileToPkgIds&apos;,\ndata: {\nsource_filename: sourcefileNames[i],\npackage_id: packageIds._list[0]._versions[0]._relatedItems.package_id\n}\n})\n  }\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: data_cache_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: cacheDataItems\n  }, ctx);\n  console.log(\&quot;Create Cache Data: source filenames to package_ids\&quot;);\n\n}\n\n\nexport default {\n  async uploadBimpk(params, libraries, ctx) {\n\nconst { PlatformApi,  IafScriptEngine} = libraries;\n\nconst {IafItemSvc} = PlatformApi\n\nlet param = params.inparams;\n// set global variables first\nawait IafScriptEngine.setVar(\&quot;namespaces\&quot;, ctx._namespaces);\nawait IafScriptEngine.setVar(\&quot;package_name\&quot;, param.filename);\nawait IafScriptEngine.setVar(\&quot;package_name_short\&quot;, param.filename.substring(0, 11));\nawait IafScriptEngine.setVar(\&quot;bimpk_fileid\&quot;, param._fileId);\nawait IafScriptEngine.setVar(\&quot;bimpk_fileVersionId\&quot;, param._fileVersionId);\ndebugger;\n\nlet res = await IafItemSvc.getNamedUserItems({\&quot;query\&quot;:{\n\&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\&quot;_versions._userAttributes.bimpk.fileId\&quot;: param._fileId,\n\&quot;_itemClass\&quot;:\&quot;NamedCompositeItem\&quot;\n}},ctx,{});\n\n  let bim_model = res._list[0];\n\n  console.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\n\n  if (bim_model) {\nIafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollectionVersion(param, libraries, ctx);\n\n  } else {\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollections(param, libraries, ctx);\n\n  }\n\nconsole.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\nif (bim_model) {\nIafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollectionVersion(param, libraries, ctx);\n} else {\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollections(param, libraries, ctx);\n}\n\nreturn IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n  },\n  async createModelDataCache(params, libraries, ctx) {\n\nconst { PlatformApi,  IafScriptEngine} = libraries;\n\nawait cacheSourceFileGraphicsIds(params, libraries, ctx)\n\nreturn IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n  }\n}&quot;&#xd;
      },&#xd;
      &quot;_namespaces&quot;:[&#xd;
         &quot;${CNAMESPACESID}&quot;&#xd;
      ],&#xd;
      &quot;_itemClass&quot;:&quot;Script&quot;&#xd;
   }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">itemsvc/api/v1/nameduseritems?nsfilter=DEMOUSER0601_NQj1K6Fn</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All File Versions Copy" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
   {&#xd;
      &quot;_name&quot;:&quot;BIMPK Upload&quot;,&#xd;
      &quot;_shortName&quot;:&quot;iaf_ext_bimpk_upload&quot;,&#xd;
      &quot;_description&quot;:&quot;Load, Transform and Write Model from BIMPK&quot;,&#xd;
      &quot;_userType&quot;:&quot;iaf_ext_bimpk_upload&quot;,&#xd;
      &quot;_version&quot;:{&#xd;
         &quot;_userData&quot;:&quot;const groupBy = (objectArray, property) =&gt; {\n  return objectArray.reduce((acc, obj) =&gt; {\nlet key = obj[property];\nkey = key.replace(/[\\.]+/g, \&quot;\&quot;);\nif (!acc[key]) {\n  acc[key] = {};\n}\n// Add object to list for given key&apos;s value\nacc[key] = obj;\nreturn acc;\n  }, {});\n}\n\nconst _mapItemsAsRelated = (parentItems, relatedItems, fromField, relatedField) =&gt; {\n  let res = [];\n  for (let i = 0, l = parentItems.length; i &lt; l; i++) {\nlet relatedRecs = [];\n\nlet parentItem = parentItems[i];\nlet fromValues = [];\n\nif (!(parentItem[fromField]) &amp;&amp; fromField.indexOf(\&quot;.\&quot;) &gt; 1) {\n  fromValues = fromField.split(\&quot;.\&quot;).reduce((o, i) =&gt; o[i] || [], parentItem);\n} else {\n  fromValues = Array.isArray(parentItem[fromField]) ? parentItem[fromField] : [parentItem[fromField]];\n}\n\nif (fromValues &amp;&amp; fromValues.length &gt; 0)\n  relatedRecs = relatedItems.filter((r) =&gt; fromValues.includes(r[relatedField]));\n\nif (relatedRecs.length &gt; 0) {\n  res.push({\nparentItem: parentItems[i],\nrelatedItems: relatedRecs\n  });\n}\n  }\n  return res;\n}\n\nconst createBIMCollections = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Collections\&quot;}));\n\n  let packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\n  let packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\n  console.log(\&quot;Create BIM Collection\&quot;);\n  //create Elements Collection\n  const elementsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_elements\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_ba_elem\&quot;,\n\&quot;_description\&quot;: \&quot;Elements in BA model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_elements\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_coll = await IafScriptEngine.createCollection(elementsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Collection\&quot;}));\n\n  console.log(\&quot;model element collection\&quot;, model_els_coll)\n  let elemCollIndex = {\n\&quot;_id\&quot;: model_els_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  };\n  let elemIndex = await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  //create Element Properties Collection\n  const modelElemPropsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_elem_props\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_elprops\&quot;,\n\&quot;_description\&quot;: \&quot;Element Props in BA model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_element_props\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_props_coll = await IafScriptEngine.createCollection(modelElemPropsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Props Collection\&quot;}));\n\n  //create Type Elements Collection\n  const typeElemsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_type_el\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_type_el\&quot;,\n\&quot;_description\&quot;: \&quot;Type Elements in BA Check model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_type_elements\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_type_el_coll = await IafScriptEngine.createCollection(typeElemsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Type Element Collection\&quot;}));\n\n  console.log(\&quot;model type collection\&quot;, model_type_el_coll)\n\n  let typeElemCollIndex = {\n\&quot;_id\&quot;: model_type_el_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  }\n  let typeindex = await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  //create Geometry File Collection\n  const geometryFilesCol = {\n\&quot;_name\&quot;: packagename + \&quot;_geom_file\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_file\&quot;,\n\&quot;_description\&quot;: \&quot;File Collection for Geometry Files\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_geomresources\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_file_coll = await IafScriptEngine.createCollection(geometryFilesCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry File Collection\&quot;}));\n\n  //create Geometry View Collection\n  const geometryViewsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_geom_view\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_view\&quot;,\n\&quot;_description\&quot;: \&quot;Geometry Views in Model\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_geomviews\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_views_coll = await IafScriptEngine.createCollection(geometryViewsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry View Collection\&quot;}));\n\n  //create Model Data Cache Collection\n  const dataCacheCol = {\n\&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n\&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n\&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n}\nconst data_cache_coll = await IafScriptEngine.createCollection(dataCacheCol, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n\nlet bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\nlet bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\nconsole.log(\&quot;fileid: \&quot; + bimpkFileId + \&quot;, bimpkFileVersionid: \&quot; + bimpkFileVersionId);\n\n  //create Model Composite Item\n  const modelCompItem = {\n\&quot;_name\&quot;: packagename,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_modelver\&quot;,\n\&quot;_description\&quot;: \&quot;BIM model version by transform\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;_version\&quot;: {\n\&quot;_userAttributes\&quot;: {\n\&quot;bimpk\&quot;: {\n  \&quot;fileId\&quot;: bimpkFileId,\n  \&quot;fileVersionId\&quot;: bimpkFileVersionId\n}\n}\n}\n  }\n  let model = await IafScriptEngine.createNamedCompositeItem(modelCompItem, ctx)\n  await IafScriptEngine.setVar(\&quot;bim_model\&quot;, model);\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Model Composite Item\&quot;}));\n  console.log(JSON.stringify(model, null, 3))\n\n  let _myCollections = {\n\&quot;model_els_coll\&quot;: model_els_coll,\n\&quot;model_els_props_coll\&quot;: model_els_props_coll,\n\&quot;model_type_el_coll\&quot;: model_type_el_coll,\n\&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n\&quot;model_geom_views_coll\&quot;: model_geom_views_coll,\n\&quot;data_cache_coll\&quot;: data_cache_coll\n\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createBIMCollectionVersion = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Found Previous Model Creating Versions\&quot;}));\n\n  let bimModel = await IafScriptEngine.getVar(\&quot;bim_model\&quot;)\n  const modelRelatedCollection = await IafScriptEngine.getCollectionsInComposite(bimModel._id,null, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version - bim_model\&quot;}));\n\n  console.log(\&quot;bimModel\&quot;, JSON.stringify(bimModel))\n\n  let bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\n  let bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\n  console.log(\&quot;bimpkFileId\&quot;, JSON.stringify(bimpkFileId))\n\n  console.log(\&quot;bimpkFileVersionId\&quot;, JSON.stringify(bimpkFileVersionId))\n\n  let newModelVer = {\&quot;namedUserItemId\&quot;:bimModel._id}\n\n  newModelVer._userAttributes = {\nbimpk: {\nfileId: bimpkFileId,\nfileVersionId: bimpkFileVersionId\n}\n  }\n\n  let version = await IafScriptEngine.createNamedUserItemVersion(newModelVer,ctx);\n  console.log(\&quot;Create BIM Collection Version bim_model version\&quot;);\n  console.log(JSON.stringify(version, null, 3))\n\n  console.log(\&quot;newModversionelVer\&quot;, JSON.stringify(version))\n\n  const model_els_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_elements&apos;);\n  const model_els_props_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_element_props&apos;);\n  const model_type_el_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_type_elements&apos;);\n  const model_geom_file_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomresources&apos;);\n  const model_geom_views_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomviews&apos;);\n\n  let data_cache_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;data_cache&apos;);\n  if (!data_cache_coll) {\nlet packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\nlet packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\nlet data_cache_coll_def = {\n\&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n\&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n\&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n}\ndata_cache_coll = await IafScriptEngine.createCollection(data_cache_coll_def, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n  }\n\n  // create the versions\n\n  const model_els_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_els_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_coll\&quot;}));\n\n  const model_els_props_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_els_props_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_props_coll\&quot;}));\n\n  const model_type_el_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_type_el_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_type_el_coll\&quot;}));\n\n  const data_cache_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: data_cache_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Data Cache Version data_cache\&quot;}));\n\n  const model_geom_file_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_geom_file_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_file_coll\&quot;}));\n\n  const model_geom_views_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_geom_views_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_views_coll\&quot;}));\n\n  let elemCollIndex = {\n\&quot;_id\&quot;: model_els_coll._userItemId,\nindexDefs: [\n{\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n},\n{\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n}\n]\n  };\n  await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  let typeElemCollIndex = {\n\&quot;_id\&quot;: model_type_el_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  }\n  await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  // set them in global variables\n  IafScriptEngine.setVar(\&quot;model_els_coll\&quot;, model_els_coll);\n  IafScriptEngine.setVar(\&quot;model_els_props_coll\&quot;, model_els_props_coll);\n  IafScriptEngine.setVar(\&quot;model_type_el_coll\&quot;, model_type_el_coll);\n  IafScriptEngine.setVar(\&quot;data_cache_coll\&quot;, data_cache_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_file_coll\&quot;, model_geom_file_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_views_coll\&quot;, model_geom_views_coll);\n\n  let _myCollections = {\n\&quot;model_els_coll\&quot;: model_els_coll,\n\&quot;model_els_props_coll\&quot;: model_els_props_coll,\n\&quot;model_type_el_coll\&quot;: model_type_el_coll,\n\&quot;data_cache_coll\&quot;: data_cache_coll,\n\&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n\&quot;model_geom_views_coll\&quot;: model_geom_views_coll\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createRelatedItemsAndRelationships = async (_colls, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Relations and Related Items\&quot;}));\n\n  await IafScriptEngine.addRelatedCollections({\n\&quot;namedCompositeItemId\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n\&quot;relatedCollections\&quot;: [\n_colls.model_els_coll._userItemId,\n_colls.model_els_props_coll._userItemId,\n_colls.model_type_el_coll._userItemId,\n_colls.data_cache_coll._userItemId,\n_colls.model_geom_file_coll._userItemId,\n_colls.model_geom_views_coll._userItemId\n  ]}, ctx);\n  console.log(\&quot;Create Related Collection\&quot;);\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_els\&quot;);\n\n  const type_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_type_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_type_els\&quot;);\n\n  await IafScriptEngine.createItemsAsRelatedBulk({\n\&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_userItemId\&quot;: _colls.model_els_props_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;properties\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection properties\&quot;);\n\n  const el_to_type_relations = await IafScriptEngine.createRelations({\n\&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;relations\&quot;: IafScriptEngine.getVar(\&quot;manage_el_to_type_relations\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection Relations\&quot;);\n\n  await IafScriptEngine.setVar(\&quot;outparams\&quot;, {\n\&quot;filecolid\&quot;: _colls.model_geom_file_coll._userItemId,\n\&quot;viewcolid\&quot;: _colls.model_geom_views_coll._userItemId,\n\&quot;compositeitemid\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n\&quot;myCollections\&quot;: _colls\n  });\n  return await IafScriptEngine.getVar(\&quot;outparams\&quot;);\n}\n\nconst extractBimpk = async (param, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  try {\n//\n\n// Extract data \nlet _objectsArray = {\n  \&quot;objects\&quot;: [],\n  \&quot;properties\&quot;: [],\n  \&quot;types\&quot;: []\n}\nparam.files.forEach((file) =&gt; {\n  file.occurences.forEach((occ) =&gt; {\nocc.objects.objects.forEach((obj) =&gt; {\n  let _myObj = {\n\&quot;package_id\&quot;: obj.id,\n\&quot;type_id\&quot;: obj.type,\n\&quot;relationships\&quot;: obj.relationships,\n\&quot;source_id\&quot;: obj.sourceId,\n\&quot;properties\&quot;: obj.properties,\n\&quot;source_filename\&quot;:file.name\n  }\n  _objectsArray.objects.push(_myObj);\n\n});\nocc.objects.properties.forEach((prop) =&gt; {\n  _objectsArray.properties.push(prop);\n})\n\nocc.objects.types.forEach((type) =&gt; {\n  let _type = {\n\&quot;id\&quot;: type.id,\n\&quot;name\&quot;: type.name,\n\&quot;source_id\&quot;: type.sourceId,\n\&quot;properties\&quot;: type.properties\n\n  }\n  _objectsArray.types.push(_type);\n});\n\n  });\n\n});\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Data Extraction is complete\&quot;}));\n// Data Extraction Completed\n//--------------------------------\n// load the typemap\nlet assetTypeMap = null\ntry {\n  assetTypeMap = await IafScriptEngine.getItems({\n  \&quot;collectionDesc\&quot;: {\n\&quot;_userType\&quot;: \&quot;iaf_dt_type_map_defs_coll\&quot;,\n\&quot;_namespaces\&quot;: IafScriptEngine.getVar(\&quot;namespaces\&quot;)\n  },\n  \&quot;options\&quot;: {\n\&quot;page\&quot;: {\n  \&quot;getAllItems\&quot;: true\n}\n  }\n}, ctx);\n} catch (err) {\n  console.log(&apos;{\&quot;level\&quot;: \&quot;info\&quot;, \&quot;message\&quot;: \&quot;Type Map collection does not exist\&quot;}&apos;)\n}\n\nfor (let type of _objectsArray.types) {\n  for (let prop of type.properties) {\nlet _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\nprop.dName = _myProp.dName;\nif (_myProp.hasOwnProperty(\&quot;Asset Category\&quot;)) {\n  prop.baType = _myProp[\&quot;Asset Category\&quot;]\n}\n\n  }\n  type._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n  \&quot;format\&quot;: \&quot;hex\&quot;\n});\n  type.properties = groupBy(type.properties, \&quot;dName\&quot;);\n  if (assetTypeMap &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Family\&quot;) &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Type\&quot;)) {\nlet _myRow = assetTypeMap.find(x =&gt; x[\&quot;Revit Family\&quot;] == type.properties[\&quot;Revit Family\&quot;].val &amp;&amp; x[\&quot;Revit Type\&quot;] == type.properties[\&quot;Revit Type\&quot;].val);\nif (_myRow) {\n  type.dtCategory = _myRow.dtCategory;\n  type.dtType = _myRow.dtType;\n}\n  };\n};\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Type Extraction is complete\&quot;}));\n// do the same for properties in the object\nfor (let obj of _objectsArray.objects) {\n  obj.properties.forEach((prop) =&gt; {\nlet _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\nprop.dName = _myProp.dName;\n\n  });\n\n  obj._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n  \&quot;format\&quot;: \&quot;hex\&quot;\n});\n  obj.properties = groupBy(obj.properties, \&quot;dName\&quot;);\n  let _myVal = _objectsArray.types.find(x =&gt; x.id == obj.type_id);\n  obj.dtCategory = _myVal.dtCategory;\n  obj.dtType = _myVal.dtType;\n  if (_myVal.hasOwnProperty(\&quot;baType\&quot;)) {\nobj.baType = _myVal.baType;\n  }\n\n};\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Property Extraction is complete\&quot;}));\nlet _myProperties =[];\n_objectsArray.objects.forEach((object) =&gt;{\n  let _myProp = {\n_id:object._id,\nproperties:object.properties\n  }\n  _myProperties.push(_myProp);\n\n});\nawait IafScriptEngine.setVar(\&quot;properties\&quot;, _myProperties);\n_objectsArray.objects.forEach(e =&gt; { delete e.properties });\nawait IafScriptEngine.setVar(\&quot;manage_els\&quot;, _objectsArray.objects);\nawait IafScriptEngine.setVar(\&quot;manage_type_els\&quot;, _objectsArray.types);\nawait IafScriptEngine.setVar(\&quot;manage_el_to_type_relations\&quot;,\n  _mapItemsAsRelated(IafScriptEngine.getVar(\&quot;manage_els\&quot;),\nIafScriptEngine.getVar(\&quot;manage_type_els\&quot;), \&quot;type_id\&quot;, \&quot;id\&quot;));\n  } catch (err) {\nconsole.log(err);\n  }\n}\n\nconst cacheSourceFileGraphicsIds = async(params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n  \n  const { model_els_coll, data_cache_coll } = params.inparams.myCollections\n\n  console.log(&apos;--&gt; cache elems: &apos; + model_els_coll._name)\n  console.log(&apos;--&gt; cache data: &apos; + data_cache_coll._name)\n\n  let sourcefiles = await IafScriptEngine.getDistinct({\ncollectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\nfield: &apos;source_filename&apos;,\noptions: { getCollInfo: true }\n  }, ctx)\n\n  let sourcefileNames = sourcefiles._list[0]._versions[0]._relatedItems.source_filename\n\n  let cacheDataItems = []\n  for (let i = 0; i &lt; sourcefileNames.length; i++) {\n\nlet packageIds = await IafScriptEngine.getDistinct({\ncollectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\nquery: {source_filename: sourcefileNames[i]},\nfield: &apos;package_id&apos;,\noptions: { getCollInfo: true }\n}, ctx)\n\ncacheDataItems.push({\ndataType: &apos;sourcefileToPkgIds&apos;,\ndata: {\nsource_filename: sourcefileNames[i],\npackage_id: packageIds._list[0]._versions[0]._relatedItems.package_id\n}\n})\n  }\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: data_cache_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: cacheDataItems\n  }, ctx);\n  console.log(\&quot;Create Cache Data: source filenames to package_ids\&quot;);\n\n}\n\n\nexport default {\n  async uploadBimpk(params, libraries, ctx) {\n\nconst { PlatformApi,  IafScriptEngine} = libraries;\n\nconst {IafItemSvc} = PlatformApi\n\nlet param = params.inparams;\n// set global variables first\nawait IafScriptEngine.setVar(\&quot;namespaces\&quot;, ctx._namespaces);\nawait IafScriptEngine.setVar(\&quot;package_name\&quot;, param.filename);\nawait IafScriptEngine.setVar(\&quot;package_name_short\&quot;, param.filename.substring(0, 11));\nawait IafScriptEngine.setVar(\&quot;bimpk_fileid\&quot;, param._fileId);\nawait IafScriptEngine.setVar(\&quot;bimpk_fileVersionId\&quot;, param._fileVersionId);\ndebugger;\n\nlet res = await IafItemSvc.getNamedUserItems({\&quot;query\&quot;:{\n\&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\&quot;_versions._userAttributes.bimpk.fileId\&quot;: param._fileId,\n\&quot;_itemClass\&quot;:\&quot;NamedCompositeItem\&quot;\n}},ctx,{});\n\n  let bim_model = res._list[0];\n\n  console.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\n\n  if (bim_model) {\nIafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollectionVersion(param, libraries, ctx);\n\n  } else {\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollections(param, libraries, ctx);\n\n  }\n\nconsole.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\nif (bim_model) {\nIafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollectionVersion(param, libraries, ctx);\n} else {\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollections(param, libraries, ctx);\n}\n\nreturn IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n  },\n  async createModelDataCache(params, libraries, ctx) {\n\nconst { PlatformApi,  IafScriptEngine} = libraries;\n\nawait cacheSourceFileGraphicsIds(params, libraries, ctx)\n\nreturn IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n  }\n}&quot;&#xd;
      },&#xd;
      &quot;_namespaces&quot;:[&#xd;
         &quot;${CNAMESPACESID}&quot;&#xd;
      ],&#xd;
      &quot;_itemClass&quot;:&quot;Script&quot;&#xd;
   }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All File Versions Copy" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&#xd;
	&quot;_name&quot;: &quot;BIMPK Upload&quot;,&#xd;
	&quot;_shortName&quot;: &quot;iaf_ext_bimpk_upload&quot;,&#xd;
	&quot;_description&quot;: &quot;Load, Transform and Write Model from BIMPK&quot;,&#xd;
	&quot;_userType&quot;: &quot;iaf_ext_bimpk_upload&quot;,&#xd;
	&quot;_version&quot;: {&#xd;
		&quot;_userData&quot;: &quot;const groupBy = (objectArray, property) =&gt; {\n  return objectArray.reduce((acc, obj) =&gt; {\nlet key = obj[property];\nkey = key.replace(/[\\.]+/g, \&quot;\&quot;);\nif (!acc[key]) {\n  acc[key] = {};\n}\n// Add object to list for given key&apos;s value\nacc[key] = obj;\nreturn acc;\n  }, {});\n}\n\nconst _mapItemsAsRelated = (parentItems, relatedItems, fromField, relatedField) =&gt; {\n  let res = [];\n  for (let i = 0, l = parentItems.length; i &lt; l; i++) {\nlet relatedRecs = [];\n\nlet parentItem = parentItems[i];\nlet fromValues = [];\n\nif (!(parentItem[fromField]) &amp;&amp; fromField.indexOf(\&quot;.\&quot;) &gt; 1) {\n  fromValues = fromField.split(\&quot;.\&quot;).reduce((o, i) =&gt; o[i] || [], parentItem);\n} else {\n  fromValues = Array.isArray(parentItem[fromField]) ? parentItem[fromField] : [parentItem[fromField]];\n}\n\nif (fromValues &amp;&amp; fromValues.length &gt; 0)\n  relatedRecs = relatedItems.filter((r) =&gt; fromValues.includes(r[relatedField]));\n\nif (relatedRecs.length &gt; 0) {\n  res.push({\nparentItem: parentItems[i],\nrelatedItems: relatedRecs\n  });\n}\n  }\n  return res;\n}\n\nconst createBIMCollections = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Collections\&quot;}));\n\n  let packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\n  let packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\n  console.log(\&quot;Create BIM Collection\&quot;);\n  //create Elements Collection\n  const elementsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_elements\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_ba_elem\&quot;,\n\&quot;_description\&quot;: \&quot;Elements in BA model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_elements\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_coll = await IafScriptEngine.createCollection(elementsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Collection\&quot;}));\n\n  console.log(\&quot;model element collection\&quot;, model_els_coll)\n  let elemCollIndex = {\n\&quot;_id\&quot;: model_els_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  };\n  let elemIndex = await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  //create Element Properties Collection\n  const modelElemPropsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_elem_props\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_elprops\&quot;,\n\&quot;_description\&quot;: \&quot;Element Props in BA model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_element_props\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_props_coll = await IafScriptEngine.createCollection(modelElemPropsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Props Collection\&quot;}));\n\n  //create Type Elements Collection\n  const typeElemsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_type_el\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_type_el\&quot;,\n\&quot;_description\&quot;: \&quot;Type Elements in BA Check model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_type_elements\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_type_el_coll = await IafScriptEngine.createCollection(typeElemsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Type Element Collection\&quot;}));\n\n  console.log(\&quot;model type collection\&quot;, model_type_el_coll)\n\n  let typeElemCollIndex = {\n\&quot;_id\&quot;: model_type_el_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  }\n  let typeindex = await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  //create Geometry File Collection\n  const geometryFilesCol = {\n\&quot;_name\&quot;: packagename + \&quot;_geom_file\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_file\&quot;,\n\&quot;_description\&quot;: \&quot;File Collection for Geometry Files\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_geomresources\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_file_coll = await IafScriptEngine.createCollection(geometryFilesCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry File Collection\&quot;}));\n\n  //create Geometry View Collection\n  const geometryViewsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_geom_view\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_view\&quot;,\n\&quot;_description\&quot;: \&quot;Geometry Views in Model\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_geomviews\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_views_coll = await IafScriptEngine.createCollection(geometryViewsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry View Collection\&quot;}));\n\n  //create Model Data Cache Collection\n  const dataCacheCol = {\n\&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n\&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n\&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n}\nconst data_cache_coll = await IafScriptEngine.createCollection(dataCacheCol, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n\nlet bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\nlet bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\nconsole.log(\&quot;fileid: \&quot; + bimpkFileId + \&quot;, bimpkFileVersionid: \&quot; + bimpkFileVersionId);\n\n  //create Model Composite Item\n  const modelCompItem = {\n\&quot;_name\&quot;: packagename,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_modelver\&quot;,\n\&quot;_description\&quot;: \&quot;BIM model version by transform\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;_version\&quot;: {\n\&quot;_userAttributes\&quot;: {\n\&quot;bimpk\&quot;: {\n  \&quot;fileId\&quot;: bimpkFileId,\n  \&quot;fileVersionId\&quot;: bimpkFileVersionId\n}\n}\n}\n  }\n  let model = await IafScriptEngine.createNamedCompositeItem(modelCompItem, ctx)\n  await IafScriptEngine.setVar(\&quot;bim_model\&quot;, model);\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Model Composite Item\&quot;}));\n  console.log(JSON.stringify(model, null, 3))\n\n  let _myCollections = {\n\&quot;model_els_coll\&quot;: model_els_coll,\n\&quot;model_els_props_coll\&quot;: model_els_props_coll,\n\&quot;model_type_el_coll\&quot;: model_type_el_coll,\n\&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n\&quot;model_geom_views_coll\&quot;: model_geom_views_coll,\n\&quot;data_cache_coll\&quot;: data_cache_coll\n\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createBIMCollectionVersion = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Found Previous Model Creating Versions\&quot;}));\n\n  let bimModel = await IafScriptEngine.getVar(\&quot;bim_model\&quot;)\n  const modelRelatedCollection = await IafScriptEngine.getCollectionsInComposite(bimModel._id,null, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version - bim_model\&quot;}));\n\n  console.log(\&quot;bimModel\&quot;, JSON.stringify(bimModel))\n\n  let bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\n  let bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\n  console.log(\&quot;bimpkFileId\&quot;, JSON.stringify(bimpkFileId))\n\n  console.log(\&quot;bimpkFileVersionId\&quot;, JSON.stringify(bimpkFileVersionId))\n\n  let newModelVer = {\&quot;namedUserItemId\&quot;:bimModel._id}\n\n  newModelVer._userAttributes = {\nbimpk: {\nfileId: bimpkFileId,\nfileVersionId: bimpkFileVersionId\n}\n  }\n\n  let version = await IafScriptEngine.createNamedUserItemVersion(newModelVer,ctx);\n  console.log(\&quot;Create BIM Collection Version bim_model version\&quot;);\n  console.log(JSON.stringify(version, null, 3))\n\n  console.log(\&quot;newModversionelVer\&quot;, JSON.stringify(version))\n\n  const model_els_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_elements&apos;);\n  const model_els_props_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_element_props&apos;);\n  const model_type_el_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_type_elements&apos;);\n  const model_geom_file_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomresources&apos;);\n  const model_geom_views_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomviews&apos;);\n\n  let data_cache_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;data_cache&apos;);\n  if (!data_cache_coll) {\nlet packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\nlet packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\nlet data_cache_coll_def = {\n\&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n\&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n\&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n}\ndata_cache_coll = await IafScriptEngine.createCollection(data_cache_coll_def, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n  }\n\n  // create the versions\n\n  const model_els_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_els_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_coll\&quot;}));\n\n  const model_els_props_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_els_props_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_props_coll\&quot;}));\n\n  const model_type_el_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_type_el_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_type_el_coll\&quot;}));\n\n  const data_cache_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: data_cache_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Data Cache Version data_cache\&quot;}));\n\n  const model_geom_file_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_geom_file_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_file_coll\&quot;}));\n\n  const model_geom_views_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_geom_views_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_views_coll\&quot;}));\n\n  let elemCollIndex = {\n\&quot;_id\&quot;: model_els_coll._userItemId,\nindexDefs: [\n{\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n},\n{\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n}\n]\n  };\n  await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  let typeElemCollIndex = {\n\&quot;_id\&quot;: model_type_el_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  }\n  await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  // set them in global variables\n  IafScriptEngine.setVar(\&quot;model_els_coll\&quot;, model_els_coll);\n  IafScriptEngine.setVar(\&quot;model_els_props_coll\&quot;, model_els_props_coll);\n  IafScriptEngine.setVar(\&quot;model_type_el_coll\&quot;, model_type_el_coll);\n  IafScriptEngine.setVar(\&quot;data_cache_coll\&quot;, data_cache_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_file_coll\&quot;, model_geom_file_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_views_coll\&quot;, model_geom_views_coll);\n\n  let _myCollections = {\n\&quot;model_els_coll\&quot;: model_els_coll,\n\&quot;model_els_props_coll\&quot;: model_els_props_coll,\n\&quot;model_type_el_coll\&quot;: model_type_el_coll,\n\&quot;data_cache_coll\&quot;: data_cache_coll,\n\&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n\&quot;model_geom_views_coll\&quot;: model_geom_views_coll\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createRelatedItemsAndRelationships = async (_colls, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Relations and Related Items\&quot;}));\n\n  await IafScriptEngine.addRelatedCollections({\n\&quot;namedCompositeItemId\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n\&quot;relatedCollections\&quot;: [\n_colls.model_els_coll._userItemId,\n_colls.model_els_props_coll._userItemId,\n_colls.model_type_el_coll._userItemId,\n_colls.data_cache_coll._userItemId,\n_colls.model_geom_file_coll._userItemId,\n_colls.model_geom_views_coll._userItemId\n  ]}, ctx);\n  console.log(\&quot;Create Related Collection\&quot;);\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_els\&quot;);\n\n  const type_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_type_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_type_els\&quot;);\n\n  await IafScriptEngine.createItemsAsRelatedBulk({\n\&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_userItemId\&quot;: _colls.model_els_props_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;properties\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection properties\&quot;);\n\n  const el_to_type_relations = await IafScriptEngine.createRelations({\n\&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;relations\&quot;: IafScriptEngine.getVar(\&quot;manage_el_to_type_relations\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection Relations\&quot;);\n\n  await IafScriptEngine.setVar(\&quot;outparams\&quot;, {\n\&quot;filecolid\&quot;: _colls.model_geom_file_coll._userItemId,\n\&quot;viewcolid\&quot;: _colls.model_geom_views_coll._userItemId,\n\&quot;compositeitemid\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n\&quot;myCollections\&quot;: _colls\n  });\n  return await IafScriptEngine.getVar(\&quot;outparams\&quot;);\n}\n\nconst extractBimpk = async (param, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  try {\n//\n\n// Extract data \nlet _objectsArray = {\n  \&quot;objects\&quot;: [],\n  \&quot;properties\&quot;: [],\n  \&quot;types\&quot;: []\n}\nparam.files.forEach((file) =&gt; {\n  file.occurences.forEach((occ) =&gt; {\nocc.objects.objects.forEach((obj) =&gt; {\n  let _myObj = {\n\&quot;package_id\&quot;: obj.id,\n\&quot;type_id\&quot;: obj.type,\n\&quot;relationships\&quot;: obj.relationships,\n\&quot;source_id\&quot;: obj.sourceId,\n\&quot;properties\&quot;: obj.properties,\n\&quot;source_filename\&quot;:file.name\n  }\n  _objectsArray.objects.push(_myObj);\n\n});\nocc.objects.properties.forEach((prop) =&gt; {\n  _objectsArray.properties.push(prop);\n})\n\nocc.objects.types.forEach((type) =&gt; {\n  let _type = {\n\&quot;id\&quot;: type.id,\n\&quot;name\&quot;: type.name,\n\&quot;source_id\&quot;: type.sourceId,\n\&quot;properties\&quot;: type.properties\n\n  }\n  _objectsArray.types.push(_type);\n});\n\n  });\n\n});\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Data Extraction is complete\&quot;}));\n// Data Extraction Completed\n//--------------------------------\n// load the typemap\nlet assetTypeMap = null\ntry {\n  assetTypeMap = await IafScriptEngine.getItems({\n  \&quot;collectionDesc\&quot;: {\n\&quot;_userType\&quot;: \&quot;iaf_dt_type_map_defs_coll\&quot;,\n\&quot;_namespaces\&quot;: IafScriptEngine.getVar(\&quot;namespaces\&quot;)\n  },\n  \&quot;options\&quot;: {\n\&quot;page\&quot;: {\n  \&quot;getAllItems\&quot;: true\n}\n  }\n}, ctx);\n} catch (err) {\n  console.log(&apos;{\&quot;level\&quot;: \&quot;info\&quot;, \&quot;message\&quot;: \&quot;Type Map collection does not exist\&quot;}&apos;)\n}\n\nfor (let type of _objectsArray.types) {\n  for (let prop of type.properties) {\nlet _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\nprop.dName = _myProp.dName;\nif (_myProp.hasOwnProperty(\&quot;Asset Category\&quot;)) {\n  prop.baType = _myProp[\&quot;Asset Category\&quot;]\n}\n\n  }\n  type._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n  \&quot;format\&quot;: \&quot;hex\&quot;\n});\n  type.properties = groupBy(type.properties, \&quot;dName\&quot;);\n  if (assetTypeMap &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Family\&quot;) &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Type\&quot;)) {\nlet _myRow = assetTypeMap.find(x =&gt; x[\&quot;Revit Family\&quot;] == type.properties[\&quot;Revit Family\&quot;].val &amp;&amp; x[\&quot;Revit Type\&quot;] == type.properties[\&quot;Revit Type\&quot;].val);\nif (_myRow) {\n  type.dtCategory = _myRow.dtCategory;\n  type.dtType = _myRow.dtType;\n}\n  };\n};\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Type Extraction is complete\&quot;}));\n// do the same for properties in the object\nfor (let obj of _objectsArray.objects) {\n  obj.properties.forEach((prop) =&gt; {\nlet _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\nprop.dName = _myProp.dName;\n\n  });\n\n  obj._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n  \&quot;format\&quot;: \&quot;hex\&quot;\n});\n  obj.properties = groupBy(obj.properties, \&quot;dName\&quot;);\n  let _myVal = _objectsArray.types.find(x =&gt; x.id == obj.type_id);\n  obj.dtCategory = _myVal.dtCategory;\n  obj.dtType = _myVal.dtType;\n  if (_myVal.hasOwnProperty(\&quot;baType\&quot;)) {\nobj.baType = _myVal.baType;\n  }\n\n};\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Property Extraction is complete\&quot;}));\nlet _myProperties =[];\n_objectsArray.objects.forEach((object) =&gt;{\n  let _myProp = {\n_id:object._id,\nproperties:object.properties\n  }\n  _myProperties.push(_myProp);\n\n});\nawait IafScriptEngine.setVar(\&quot;properties\&quot;, _myProperties);\n_objectsArray.objects.forEach(e =&gt; { delete e.properties });\nawait IafScriptEngine.setVar(\&quot;manage_els\&quot;, _objectsArray.objects);\nawait IafScriptEngine.setVar(\&quot;manage_type_els\&quot;, _objectsArray.types);\nawait IafScriptEngine.setVar(\&quot;manage_el_to_type_relations\&quot;,\n  _mapItemsAsRelated(IafScriptEngine.getVar(\&quot;manage_els\&quot;),\nIafScriptEngine.getVar(\&quot;manage_type_els\&quot;), \&quot;type_id\&quot;, \&quot;id\&quot;));\n  } catch (err) {\nconsole.log(err);\n  }\n}\n\nconst cacheSourceFileGraphicsIds = async(params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n  \n  const { model_els_coll, data_cache_coll } = params.inparams.myCollections\n\n  console.log(&apos;--&gt; cache elems: &apos; + model_els_coll._name)\n  console.log(&apos;--&gt; cache data: &apos; + data_cache_coll._name)\n\n  let sourcefiles = await IafScriptEngine.getDistinct({\ncollectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\nfield: &apos;source_filename&apos;,\noptions: { getCollInfo: true }\n  }, ctx)\n\n  let sourcefileNames = sourcefiles._list[0]._versions[0]._relatedItems.source_filename\n\n  let cacheDataItems = []\n  for (let i = 0; i &lt; sourcefileNames.length; i++) {\n\nlet packageIds = await IafScriptEngine.getDistinct({\ncollectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\nquery: {source_filename: sourcefileNames[i]},\nfield: &apos;package_id&apos;,\noptions: { getCollInfo: true }\n}, ctx)\n\ncacheDataItems.push({\ndataType: &apos;sourcefileToPkgIds&apos;,\ndata: {\nsource_filename: sourcefileNames[i],\npackage_id: packageIds._list[0]._versions[0]._relatedItems.package_id\n}\n})\n  }\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: data_cache_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: cacheDataItems\n  }, ctx);\n  console.log(\&quot;Create Cache Data: source filenames to package_ids\&quot;);\n\n}\n\n\nexport default {\n  async uploadBimpk(params, libraries, ctx) {\n\nconst { PlatformApi,  IafScriptEngine} = libraries;\n\nconst {IafItemSvc} = PlatformApi\n\nlet param = params.inparams;\n// set global variables first\nawait IafScriptEngine.setVar(\&quot;namespaces\&quot;, ctx._namespaces);\nawait IafScriptEngine.setVar(\&quot;package_name\&quot;, param.filename);\nawait IafScriptEngine.setVar(\&quot;package_name_short\&quot;, param.filename.substring(0, 11));\nawait IafScriptEngine.setVar(\&quot;bimpk_fileid\&quot;, param._fileId);\nawait IafScriptEngine.setVar(\&quot;bimpk_fileVersionId\&quot;, param._fileVersionId);\ndebugger;\n\nlet res = await IafItemSvc.getNamedUserItems({\&quot;query\&quot;:{\n\&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\&quot;_versions._userAttributes.bimpk.fileId\&quot;: param._fileId,\n\&quot;_itemClass\&quot;:\&quot;NamedCompositeItem\&quot;\n}},ctx,{});\n\n  let bim_model = res._list[0];\n\n  console.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\n\n  if (bim_model) {\nIafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollectionVersion(param, libraries, ctx);\n\n  } else {\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollections(param, libraries, ctx);\n\n  }\n\nconsole.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\nif (bim_model) {\nIafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollectionVersion(param, libraries, ctx);\n} else {\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollections(param, libraries, ctx);\n}\n\nreturn IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n  },\n  async createModelDataCache(params, libraries, ctx) {\n\nconst { PlatformApi,  IafScriptEngine} = libraries;\n\nawait cacheSourceFileGraphicsIds(params, libraries, ctx)\n\nreturn IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n  }\n}&quot;&#xd;
	},&#xd;
	&quot;_namespaces&quot;: [&#xd;
		&quot;${CNAMESPACESID}&quot;&#xd;
	],&#xd;
	&quot;_itemClass&quot;: &quot;Script&quot;&#xd;
}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_T001_LOAD PROJECT SETUP" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;_name&quot;: &quot;BIMPK Upload&quot;,&quot;_shortName&quot;: &quot;iaf_ext_bimpk_upload&quot;,&quot;_description&quot;: &quot;Load, Transform and Write Model from BIMPK&quot;,&quot;_userType&quot;: &quot;iaf_ext_bimpk_upload&quot;,&quot;_version&quot;:{&quot;_userData&quot;:&quot;const groupBy = (objectArray,property) =&gt; {\n  return objectArray.reduce((acc, obj) =&gt; {\nlet key = obj[property];\nkey = key.replace(/[.]+/g, \&quot;\&quot;);\n\nif (!acc[key]) {\n  acc[key] = {};\n}\n// Add object to list for given key&apos;s value\nacc[key] = obj;\nreturn acc;\n  }, {});\n}\n\nconst _mapItemsAsRelated = (parentItems, relatedItems, fromField, relatedField) =&gt; {\n  let res = [];\n  for (let i = 0, l = parentItems.length; i &lt; l; i++) {\nlet relatedRecs = [];\n\nlet parentItem = parentItems[i];\nlet fromValues = [];\n\nif (!(parentItem[fromField]) &amp;&amp; fromField.indexOf(\&quot;.\&quot;) &gt; 1) {\n  fromValues = fromField.split(\&quot;.\&quot;).reduce((o, i) =&gt; o[i] || [], parentItem);\n} else {\n  fromValues = Array.isArray(parentItem[fromField]) ? parentItem[fromField] : [parentItem[fromField]];\n}\n\nif (fromValues &amp;&amp; fromValues.length &gt; 0)\n  relatedRecs = relatedItems.filter((r) =&gt; fromValues.includes(r[relatedField]));\n\nif (relatedRecs.length &gt; 0) {\n  res.push({\nparentItem: parentItems[i],\nrelatedItems: relatedRecs\n  });\n}\n  }\n  return res;\n}\n\nconst createBIMCollections = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Collections\&quot;}));\n\n  let packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\n  let packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\n  console.log(\&quot;Create BIM Collection\&quot;);\n  //create Elements Collection\n  const elementsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_elements\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_ba_elem\&quot;,\n\&quot;_description\&quot;: \&quot;Elements in BA model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_elements\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_coll = await IafScriptEngine.createCollection(elementsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Collection\&quot;}));\n\n  console.log(\&quot;model element collection\&quot;, model_els_coll)\n  let elemCollIndex = {\n\&quot;_id\&quot;: model_els_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  };\n  let elemIndex = await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  //create Element Properties Collection\n  const modelElemPropsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_elem_props\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_elprops\&quot;,\n\&quot;_description\&quot;: \&quot;Element Props in BA model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_element_props\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_els_props_coll = await IafScriptEngine.createCollection(modelElemPropsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Element Props Collection\&quot;}));\n\n  //create Type Elements Collection\n  const typeElemsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_type_el\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_type_el\&quot;,\n\&quot;_description\&quot;: \&quot;Type Elements in BA Check model\&quot;,\n\&quot;_userType\&quot;: \&quot;rvt_type_elements\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_type_el_coll = await IafScriptEngine.createCollection(typeElemsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Type Element Collection\&quot;}));\n\n  console.log(\&quot;model type collection\&quot;, model_type_el_coll)\n\n  let typeElemCollIndex = {\n\&quot;_id\&quot;: model_type_el_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  }\n  let typeindex = await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  //create Geometry File Collection\n  const geometryFilesCol = {\n\&quot;_name\&quot;: packagename + \&quot;_geom_file\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_file\&quot;,\n\&quot;_description\&quot;: \&quot;File Collection for Geometry Files\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_geomresources\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_file_coll = await IafScriptEngine.createCollection(geometryFilesCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry File Collection\&quot;}));\n\n  //create Geometry View Collection\n  const geometryViewsCol = {\n\&quot;_name\&quot;: packagename + \&quot;_geom_view\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_geom_view\&quot;,\n\&quot;_description\&quot;: \&quot;Geometry Views in Model\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_geomviews\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n  }\n  const model_geom_views_coll = await IafScriptEngine.createCollection(geometryViewsCol, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Geometry View Collection\&quot;}));\n\n  //create Model Data Cache Collection\n  const dataCacheCol = {\n\&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n\&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n\&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n}\nconst data_cache_coll = await IafScriptEngine.createCollection(dataCacheCol, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n\nlet bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\nlet bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\nconsole.log(\&quot;fileid: \&quot; + bimpkFileId + \&quot;, bimpkFileVersionid: \&quot; + bimpkFileVersionId);\n\n  //create Model Composite Item\n  const modelCompItem = {\n\&quot;_name\&quot;: packagename,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_modelver\&quot;,\n\&quot;_description\&quot;: \&quot;BIM model version by transform\&quot;,\n\&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;_version\&quot;: {\n\&quot;_userAttributes\&quot;: {\n\&quot;bimpk\&quot;: {\n  \&quot;fileId\&quot;: bimpkFileId,\n  \&quot;fileVersionId\&quot;: bimpkFileVersionId\n}\n}\n}\n  }\n  let model = await IafScriptEngine.createNamedCompositeItem(modelCompItem, ctx)\n  await IafScriptEngine.setVar(\&quot;bim_model\&quot;, model);\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection - Model Composite Item\&quot;}));\n  console.log(JSON.stringify(model, null, 3))\n\n  let _myCollections = {\n\&quot;model_els_coll\&quot;: model_els_coll,\n\&quot;model_els_props_coll\&quot;: model_els_props_coll,\n\&quot;model_type_el_coll\&quot;: model_type_el_coll,\n\&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n\&quot;model_geom_views_coll\&quot;: model_geom_views_coll,\n\&quot;data_cache_coll\&quot;: data_cache_coll\n\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createBIMCollectionVersion = async (params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Found Previous Model Creating Versions\&quot;}));\n\n  let bimModel = await IafScriptEngine.getVar(\&quot;bim_model\&quot;)\n  const modelRelatedCollection = await IafScriptEngine.getCollectionsInComposite(bimModel._id,null, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version - bim_model\&quot;}));\n\n  console.log(\&quot;bimModel\&quot;, JSON.stringify(bimModel))\n\n  let bimpkFileId = await IafScriptEngine.getVar(\&quot;bimpk_fileid\&quot;);\n  let bimpkFileVersionId = await IafScriptEngine.getVar(\&quot;bimpk_fileVersionId\&quot;);\n\n  console.log(\&quot;bimpkFileId\&quot;, JSON.stringify(bimpkFileId))\n\n  console.log(\&quot;bimpkFileVersionId\&quot;, JSON.stringify(bimpkFileVersionId))\n\n  let newModelVer = {\&quot;namedUserItemId\&quot;:bimModel._id}\n\n  newModelVer._userAttributes = {\nbimpk: {\nfileId: bimpkFileId,\nfileVersionId: bimpkFileVersionId\n}\n  }\n\n  let version = await IafScriptEngine.createNamedUserItemVersion(newModelVer,ctx);\n  console.log(\&quot;Create BIM Collection Version bim_model version\&quot;);\n  console.log(JSON.stringify(version, null, 3))\n\n  console.log(\&quot;newModversionelVer\&quot;, JSON.stringify(version))\n\n  const model_els_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_elements&apos;);\n  const model_els_props_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_element_props&apos;);\n  const model_type_el_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;rvt_type_elements&apos;);\n  const model_geom_file_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomresources&apos;);\n  const model_geom_views_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;bim_model_geomviews&apos;);\n\n  let data_cache_coll = modelRelatedCollection.find(x =&gt; x._userType === &apos;data_cache&apos;);\n  if (!data_cache_coll) {\nlet packagename = await IafScriptEngine.getVar(\&quot;package_name\&quot;);\nlet packagenameShort = await IafScriptEngine.getVar(\&quot;package_name_short\&quot;);\n\nlet data_cache_coll_def = {\n\&quot;_name\&quot;: packagename + \&quot;_data_cache\&quot;,\n\&quot;_shortName\&quot;: packagenameShort + \&quot;_data_cache\&quot;,\n\&quot;_description\&quot;: \&quot;Data cached about imported model\&quot;,\n\&quot;_userType\&quot;: \&quot;data_cache\&quot;,\n\&quot;_namespaces\&quot;: ctx._namespaces\n}\ndata_cache_coll = await IafScriptEngine.createCollection(data_cache_coll_def, ctx);\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Model Data Cache\&quot;}));\n  }\n\n  // create the versions\n\n  const model_els_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_els_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_coll\&quot;}));\n\n  const model_els_props_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_els_props_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_els_props_coll\&quot;}));\n\n  const model_type_el_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_type_el_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_type_el_coll\&quot;}));\n\n  const data_cache_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: data_cache_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create Data Cache Version data_cache\&quot;}));\n\n  const model_geom_file_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_geom_file_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_file_coll\&quot;}));\n\n  const model_geom_views_coll_ver = await IafScriptEngine.createNamedUserItemVersion({\n\&quot;namedUserItemId\&quot;: model_geom_views_coll._userItemId\n  }, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Create BIM Collection Version model_geom_views_coll\&quot;}));\n\n  let elemCollIndex = {\n\&quot;_id\&quot;: model_els_coll._userItemId,\nindexDefs: [\n{\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n},\n{\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;model_els_coll_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n}\n]\n  };\n  await IafScriptEngine.createOrRecreateIndex(elemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;element index response\&quot;}));\n\n  let typeElemCollIndex = {\n\&quot;_id\&quot;: model_type_el_coll._userItemId,\nindexDefs: [\n  {\nkey: {\n  \&quot;id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  },\n  {\nkey: {\n  \&quot;source_id\&quot;:1,\n},\noptions: {\n  name: \&quot;typeElemsCol_source_id\&quot;,\n  default_language: \&quot;english\&quot;\n}\n  }\n]\n  }\n  await IafScriptEngine.createOrRecreateIndex(typeElemCollIndex, ctx);\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;type index response\&quot;}));\n\n  // set them in global variables\n  IafScriptEngine.setVar(\&quot;model_els_coll\&quot;, model_els_coll);\n  IafScriptEngine.setVar(\&quot;model_els_props_coll\&quot;, model_els_props_coll);\n  IafScriptEngine.setVar(\&quot;model_type_el_coll\&quot;, model_type_el_coll);\n  IafScriptEngine.setVar(\&quot;data_cache_coll\&quot;, data_cache_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_file_coll\&quot;, model_geom_file_coll);\n  IafScriptEngine.setVar(\&quot;model_geom_views_coll\&quot;, model_geom_views_coll);\n\n  let _myCollections = {\n\&quot;model_els_coll\&quot;: model_els_coll,\n\&quot;model_els_props_coll\&quot;: model_els_props_coll,\n\&quot;model_type_el_coll\&quot;: model_type_el_coll,\n\&quot;data_cache_coll\&quot;: data_cache_coll,\n\&quot;model_geom_file_coll\&quot;: model_geom_file_coll,\n\&quot;model_geom_views_coll\&quot;: model_geom_views_coll\n  };\n  return await createRelatedItemsAndRelationships(_myCollections, libraries, ctx);\n\n}\n\nconst createRelatedItemsAndRelationships = async (_colls, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  console.log(JSON.stringify({\&quot;message\&quot;:\&quot;Creating Model Relations and Related Items\&quot;}));\n\n  await IafScriptEngine.addRelatedCollections({\n\&quot;namedCompositeItemId\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n\&quot;relatedCollections\&quot;: [\n_colls.model_els_coll._userItemId,\n_colls.model_els_props_coll._userItemId,\n_colls.model_type_el_coll._userItemId,\n_colls.data_cache_coll._userItemId,\n_colls.model_geom_file_coll._userItemId,\n_colls.model_geom_views_coll._userItemId\n  ]}, ctx);\n  console.log(\&quot;Create Related Collection\&quot;);\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_els\&quot;);\n\n  const type_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;manage_type_els\&quot;)\n  }, ctx);\n  console.log(\&quot;Create Related Collection manage_type_els\&quot;);\n\n  await IafScriptEngine.createItemsAsRelatedBulk({\n\&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_userItemId\&quot;: _colls.model_els_props_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: IafScriptEngine.getVar(\&quot;properties\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection properties\&quot;);\n\n  const el_to_type_relations = await IafScriptEngine.createRelations({\n\&quot;parentUserItemId\&quot;: _colls.model_els_coll._userItemId,\n\&quot;_userItemId\&quot;: _colls.model_type_el_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;relations\&quot;: IafScriptEngine.getVar(\&quot;manage_el_to_type_relations\&quot;)\n  },ctx);\n  console.log(\&quot;Create Related Collection Relations\&quot;);\n\n  await IafScriptEngine.setVar(\&quot;outparams\&quot;, {\n\&quot;filecolid\&quot;: _colls.model_geom_file_coll._userItemId,\n\&quot;viewcolid\&quot;: _colls.model_geom_views_coll._userItemId,\n\&quot;compositeitemid\&quot;: IafScriptEngine.getVar(\&quot;bim_model\&quot;)._id,\n\&quot;myCollections\&quot;: _colls\n  });\n  return await IafScriptEngine.getVar(\&quot;outparams\&quot;);\n}\n\nconst extractBimpk = async (param, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n\n  try {\n//\n\n// Extract data \nlet _objectsArray = {\n  \&quot;objects\&quot;: [],\n  \&quot;properties\&quot;: [],\n  \&quot;types\&quot;: []\n}\nparam.files.forEach((file) =&gt; {\n  file.occurences.forEach((occ) =&gt; {\nocc.objects.objects.forEach((obj) =&gt; {\n  let _myObj = {\n\&quot;package_id\&quot;: obj.id,\n\&quot;type_id\&quot;: obj.type,\n\&quot;relationships\&quot;: obj.relationships,\n\&quot;source_id\&quot;: obj.sourceId,\n\&quot;properties\&quot;: obj.properties,\n\&quot;source_filename\&quot;:file.name\n  }\n  _objectsArray.objects.push(_myObj);\n\n});\nocc.objects.properties.forEach((prop) =&gt; {\n  _objectsArray.properties.push(prop);\n})\n\nocc.objects.types.forEach((type) =&gt; {\n  let _type = {\n\&quot;id\&quot;: type.id,\n\&quot;name\&quot;: type.name,\n\&quot;source_id\&quot;: type.sourceId,\n\&quot;properties\&quot;: type.properties\n\n  }\n  _objectsArray.types.push(_type);\n});\n\n  });\n\n});\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Data Extraction is complete\&quot;}));\n// Data Extraction Completed\n//--------------------------------\n// load the typemap\nlet assetTypeMap = null\ntry {\n  assetTypeMap = await IafScriptEngine.getItems({\n  \&quot;collectionDesc\&quot;: {\n\&quot;_userType\&quot;: \&quot;iaf_dt_type_map_defs_coll\&quot;,\n\&quot;_namespaces\&quot;: IafScriptEngine.getVar(\&quot;namespaces\&quot;)\n  },\n  \&quot;options\&quot;: {\n\&quot;page\&quot;: {\n  \&quot;getAllItems\&quot;: true\n}\n  }\n}, ctx);\n} catch (err) {\n  console.log(&apos;{\&quot;level\&quot;: \&quot;info\&quot;, \&quot;message\&quot;: \&quot;Type Map collection does not exist\&quot;}&apos;)\n}\n\nfor (let type of _objectsArray.types) {\n  for (let prop of type.properties) {\nlet _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\nprop.dName = _myProp.dName;\nif (_myProp.hasOwnProperty(\&quot;Asset Category\&quot;)) {\n  prop.baType = _myProp[\&quot;Asset Category\&quot;]\n}\n\n  }\n  type._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n  \&quot;format\&quot;: \&quot;hex\&quot;\n});\n  type.properties = groupBy(type.properties, \&quot;dName\&quot;);\n  if (assetTypeMap &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Family\&quot;) &amp;&amp; type.properties.hasOwnProperty(\&quot;Revit Type\&quot;)) {\nlet _myRow = assetTypeMap.find(x =&gt; x[\&quot;Revit Family\&quot;] == type.properties[\&quot;Revit Family\&quot;].val &amp;&amp; x[\&quot;Revit Type\&quot;] == type.properties[\&quot;Revit Type\&quot;].val);\nif (_myRow) {\n  type.dtCategory = _myRow.dtCategory;\n  type.dtType = _myRow.dtType;\n}\n  };\n};\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Type Extraction is complete\&quot;}));\n// do the same for properties in the object\nfor (let obj of _objectsArray.objects) {\n  obj.properties.forEach((prop) =&gt; {\nlet _myProp = _objectsArray.properties.find(x =&gt; x.id == prop.id);\nprop.dName = _myProp.dName;\n\n  });\n\n  obj._id = await IafScriptEngine.newID(\&quot;mongo\&quot;, {\n  \&quot;format\&quot;: \&quot;hex\&quot;\n});\n  obj.properties = groupBy(obj.properties, \&quot;dName\&quot;);\n  let _myVal = _objectsArray.types.find(x =&gt; x.id == obj.type_id);\n  obj.dtCategory = _myVal.dtCategory;\n  obj.dtType = _myVal.dtType;\n  if (_myVal.hasOwnProperty(\&quot;baType\&quot;)) {\nobj.baType = _myVal.baType;\n  }\n\n};\nconsole.log(JSON.stringify({\&quot;message\&quot;:\&quot;Property Extraction is complete\&quot;}));\nlet _myProperties =[];\n_objectsArray.objects.forEach((object) =&gt;{\n  let _myProp = {\n_id:object._id,\nproperties:object.properties\n  }\n  _myProperties.push(_myProp);\n\n});\nawait IafScriptEngine.setVar(\&quot;properties\&quot;, _myProperties);\n_objectsArray.objects.forEach(e =&gt; { delete e.properties });\nawait IafScriptEngine.setVar(\&quot;manage_els\&quot;, _objectsArray.objects);\nawait IafScriptEngine.setVar(\&quot;manage_type_els\&quot;, _objectsArray.types);\nawait IafScriptEngine.setVar(\&quot;manage_el_to_type_relations\&quot;,\n  _mapItemsAsRelated(IafScriptEngine.getVar(\&quot;manage_els\&quot;),\nIafScriptEngine.getVar(\&quot;manage_type_els\&quot;), \&quot;type_id\&quot;, \&quot;id\&quot;));\n  } catch (err) {\nconsole.log(err);\n  }\n}\n\nconst cacheSourceFileGraphicsIds = async(params, libraries, ctx) =&gt; {\n\n  const { PlatformApi,  IafScriptEngine} = libraries;\n  \n  const { model_els_coll, data_cache_coll } = params.inparams.myCollections\n\n  console.log(&apos;--&gt; cache elems: &apos; + model_els_coll._name)\n  console.log(&apos;--&gt; cache data: &apos; + data_cache_coll._name)\n\n  let sourcefiles = await IafScriptEngine.getDistinct({\ncollectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\nfield: &apos;source_filename&apos;,\noptions: { getCollInfo: true }\n  }, ctx)\n\n  let sourcefileNames = sourcefiles._list[0]._versions[0]._relatedItems.source_filename\n\n  let cacheDataItems = []\n  for (let i = 0; i &lt; sourcefileNames.length; i++) {\n\nlet packageIds = await IafScriptEngine.getDistinct({\ncollectionDesc: { _userType: model_els_coll._userType, _userItemId: model_els_coll._userItemId },\nquery: {source_filename: sourcefileNames[i]},\nfield: &apos;package_id&apos;,\noptions: { getCollInfo: true }\n}, ctx)\n\ncacheDataItems.push({\ndataType: &apos;sourcefileToPkgIds&apos;,\ndata: {\nsource_filename: sourcefileNames[i],\npackage_id: packageIds._list[0]._versions[0]._relatedItems.package_id\n}\n})\n  }\n\n  const bim_els = await IafScriptEngine.createItemsBulk({\n\&quot;_userItemId\&quot;: data_cache_coll._userItemId,\n\&quot;_namespaces\&quot;: ctx._namespaces,\n\&quot;items\&quot;: cacheDataItems\n  }, ctx);\n  console.log(\&quot;Create Cache Data: source filenames to package_ids\&quot;);\n\n}\n\n\nexport default {\n  async uploadBimpk(params, libraries, ctx) {\n\nconst { PlatformApi,  IafScriptEngine} = libraries;\n\nconst {IafItemSvc} = PlatformApi\n\nlet param = params.inparams;\n// set global variables first\nawait IafScriptEngine.setVar(\&quot;namespaces\&quot;, ctx._namespaces);\nawait IafScriptEngine.setVar(\&quot;package_name\&quot;, param.filename);\nawait IafScriptEngine.setVar(\&quot;package_name_short\&quot;, param.filename.substring(0, 11));\nawait IafScriptEngine.setVar(\&quot;bimpk_fileid\&quot;, param._fileId);\nawait IafScriptEngine.setVar(\&quot;bimpk_fileVersionId\&quot;, param._fileVersionId);\ndebugger;\n\nlet res = await IafItemSvc.getNamedUserItems({\&quot;query\&quot;:{\n\&quot;_userType\&quot;: \&quot;bim_model_version\&quot;,\n\&quot;_versions._userAttributes.bimpk.fileId\&quot;: param._fileId,\n\&quot;_itemClass\&quot;:\&quot;NamedCompositeItem\&quot;\n}},ctx,{});\n\n  let bim_model = res._list[0];\n\n  console.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\n\n  if (bim_model) {\nIafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollectionVersion(param, libraries, ctx);\n\n  } else {\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollections(param, libraries, ctx);\n\n  }\n\nconsole.log(JSON.stringify({\&quot;message\&quot;: \&quot;model -&gt; \&quot;+JSON.stringify(bim_model)}));\nif (bim_model) {\nIafScriptEngine.setVar(\&quot;bim_model\&quot;, bim_model);\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollectionVersion(param, libraries, ctx);\n} else {\nawait extractBimpk(param, libraries, ctx);\nawait createBIMCollections(param, libraries, ctx);\n}\n\nreturn IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n  },\n  async createModelDataCache(params, libraries, ctx) {\n\nconst { PlatformApi,  IafScriptEngine} = libraries;\n\nawait cacheSourceFileGraphicsIds(params, libraries, ctx)\n\nreturn IafScriptEngine.getVar(\&quot;outparams\&quot;);\n\n}\n}&quot;},&quot;_namespaces&quot;: [&quot;${CNAMESPACESID}&quot;],&quot;_itemClass&quot;: &quot;Script&quot; }]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">itemsvc/api/v1/nameduseritems?nsfilter=DEMOUSER0601_NQj1K6Fn</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_LOADTYPEMAPFROM_XLXSFILE" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/itemsvc/api/v1/nameduseritems_T001_LOADTYPEMAPFROM_XLXSFILE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="query" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">{&quot;_userType&quot;:&quot;iaf_dt_type_map_defs_coll&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                  </elementProp>
                  <elementProp name="nsfilter" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${CNAMESPACESID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">nsfilter</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE/itemsvc/api/v1/nameduseritems?nsfilter_T001_LOADTYPEMAPFROM_XLXSFILE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="nsfilter" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">nsfilter</stringProp>
                    <stringProp name="Argument.value">${CNAMESPACESID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems/${C_USERITEMDBID1}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">63c01388c7f7aa0c31e5e240</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems?nsfilter_T001_LOADTYPEMAPFROM_XLXSFILE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;_name&quot;:&quot;ATM Def Collection&quot;,&quot;_shortName&quot;:&quot;typemap_defs&quot;,&quot;_namespaces&quot;:[&quot;${CNAMESPACESID}&quot;],&quot;_description&quot;:&quot;Asset Type Map Collection&quot;,&quot;_userType&quot;:&quot;iaf_dt_type_map_defs_coll&quot;,&quot;_itemClass&quot;:&quot;NamedUserCollection&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_LTMUSERITEMDBID1" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_LTMUSERITEMDBID1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_userItemId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_LTMUSERITEMDBID1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/itemsvc/api/v1/nameduseritems/relateditems/bulk?nsfilter_T001_LOADTYPEMAPFROM_XLXSFILE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;Revit Category&quot;:&quot;OST_BuildingPad&quot;,&quot;Revit Family&quot;:&quot;Pad&quot;,&quot;Revit Type&quot;:&quot;A-M_Pad 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 1&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 10&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 11&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 12&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 13&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 14&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 15&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 16&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 17&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 18&quot;,&quot;Revit Type&quot;:&quot;Ceilings 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 2&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 3&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 4&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 5&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 6&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 7&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 8&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Ceilings 9&quot;,&quot;Revit Type&quot;:&quot;Ceilings 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Ceilings&quot;,&quot;Revit Family&quot;:&quot;Compound Ceiling&quot;,&quot;Revit Type&quot;:&quot;A-M_Plaster Board &amp; Skim Finish&quot;},{&quot;Revit Category&quot;:&quot;OST_CommunicationDevices&quot;,&quot;baType&quot;:&quot;Office Furniture &amp; Fittings&quot;,&quot;Revit Family&quot;:&quot;E-M_Computer&quot;,&quot;Revit Type&quot;:&quot;E-M_Computer&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Computer&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallMullions&quot;,&quot;Revit Family&quot;:&quot;Rectangular Mullion&quot;,&quot;Revit Type&quot;:&quot;A-M_Mullion&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallMullions&quot;,&quot;Revit Family&quot;:&quot;Rectangular Mullion&quot;,&quot;Revit Type&quot;:&quot;A-M_30mm Square&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallMullions&quot;,&quot;Revit Family&quot;:&quot;Rectangular Mullion&quot;,&quot;Revit Type&quot;:&quot;A-M_Mullion 2&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Window Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Window Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Blue Green Double Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Blue Green Double Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Bright Silver ACP&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Bright Silver ACP&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Spider Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Ceramic Fritted Spandrel Panel Single Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Dark Grey ACP&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Sparkling Ice Single Glass&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Solid&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Blue Green Glazed&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_CurtainWallPanels&quot;,&quot;baType&quot;:&quot;Glazing&quot;,&quot;Revit Family&quot;:&quot;System Panel&quot;,&quot;Revit Type&quot;:&quot;A-M_Clear GLASS&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Spider Glass&quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M-Swedoor_JW_Interior_Door_Steel_4210_GS1M_Double_3.0&quot;,&quot;Revit Type&quot;:&quot;FR1&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Double &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M-Swedoor_JW_Interior_Door_Steel_4210_GS1M_Double_3.0&quot;,&quot;Revit Type&quot;:&quot;FR&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Fire Rated Double &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Curtain-Wall-Double-Glass&quot;,&quot;Revit Type&quot;:&quot;A_M_Door-Curtain-Wall-Double-Glass&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Double Glass &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Curtain-Wall-Single-Glass&quot;,&quot;Revit Type&quot;:&quot;A_M_Door-Curtain-Wall-Single-Glass&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Glass &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Curtain-Wall-Single-Glass3&quot;,&quot;Revit Type&quot;:&quot;A_M_Door-Curtain-Wall-Single-Glass&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Glass &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Firemiser_FaceOfWallMount_CornellIron&quot;,&quot;Revit Type&quot;:&quot;A-M_Rolling Shutter 1&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Rolling Shutter&quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Firemiser_FaceOfWallMount_CornellIron&quot;,&quot;Revit Type&quot;:&quot;A-M-Rolling shutter 2&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Rolling Shutter&quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D3 2&apos; 36\&quot; x 7&apos; 6\&quot;&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D2  3&apos;  x 7&apos; 6\&quot;&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D1   3&apos;6\&quot;  x 7&apos; 6\&quot; 2&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D4&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Flush&quot;,&quot;Revit Type&quot;:&quot;D4 4&apos; x 7&apos;6\&quot;&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Single Flush &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Door-Passage-Single-Vision_Lite&quot;,&quot;Revit Type&quot;:&quot;FR2&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Fire Rated Single &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Lift&quot;,&quot;Revit Family&quot;:&quot;A-M_Elevator_-_Center_284&quot;,&quot;Revit Type&quot;:&quot;72\&quot; x 114\&quot; Hospital min.&quot;,&quot;dtCategory&quot;:&quot;Lift&quot;,&quot;dtType&quot;:&quot;Lift Door&quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Door&quot;,&quot;Revit Family&quot;:&quot;A-M_Grilled Door&quot;,&quot;Revit Type&quot;:&quot;A-M_Grilled Door&quot;,&quot;dtCategory&quot;:&quot;Door&quot;,&quot;dtType&quot;:&quot;Grilled &quot;},{&quot;Revit Category&quot;:&quot;OST_Doors&quot;,&quot;baType&quot;:&quot;Gate&quot;,&quot;Revit Family&quot;:&quot;A-M_Rolling_Gate&quot;,&quot;Revit Type&quot;:&quot;Rolling_Gate_11118&quot;,&quot;dtCategory&quot;:&quot;Gate&quot;,&quot;dtType&quot;:&quot;Rolling Gate&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctAccessory&quot;,&quot;Revit Family&quot;:&quot;P-M_Single_Tier_Support&quot;,&quot;Revit Type&quot;:&quot;Single_Support&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctCurves&quot;,&quot;Revit Family&quot;:&quot;Rectangular Duct&quot;,&quot;Revit Type&quot;:&quot;E-M_Rising Main&quot;,&quot;dtCategory&quot;:&quot;Bus Duct&quot;,&quot;dtType&quot;:&quot;Rising Main&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctCurves&quot;,&quot;baType&quot;:&quot;Duct&quot;,&quot;Revit Family&quot;:&quot;Round Duct&quot;,&quot;Revit Type&quot;:&quot;Default&quot;,&quot;dtCategory&quot;:&quot;Duct&quot;,&quot;dtType&quot;:&quot;DG Exhaust Duct&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctFitting&quot;,&quot;Revit Family&quot;:&quot;M_Rectangular Elbow - Mitered - Double Thickness Vanes&quot;,&quot;Revit Type&quot;:&quot;E-M_Rectangular Elbow-Raising Main&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Rising Main ACB Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctFitting&quot;,&quot;Revit Family&quot;:&quot;M_Rectangular Elbow - Mitered - Double Thickness Vanes&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Bus Duct&quot;,&quot;dtType&quot;:&quot;Rising Main&quot;},{&quot;Revit Category&quot;:&quot;OST_DuctFitting&quot;,&quot;baType&quot;:&quot;Duct&quot;,&quot;Revit Family&quot;:&quot;M_Round Elbow - Pleated&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Duct&quot;,&quot;dtType&quot;:&quot;DG Exhaust Duct&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Generator&quot;,&quot;Revit Family&quot;:&quot;E-M_1010KVA Diesel Generator&quot;,&quot;Revit Type&quot;:&quot;E-M_1010KVA Diesel Generator With&quot;,&quot;dtCategory&quot;:&quot;Generator&quot;,&quot;dtType&quot;:&quot;Main DG Set&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Generator&quot;,&quot;Revit Family&quot;:&quot;E-M_160KVA Mobile Diesel Generator&quot;,&quot;Revit Type&quot;:&quot;E-M_160KVA Mobile Diesel Generator&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Generator&quot;,&quot;Revit Family&quot;:&quot;E-M_50KVA Diesel Generator&quot;,&quot;Revit Type&quot;:&quot;E-M_50KVA Diesel Generator&quot;,&quot;dtCategory&quot;:&quot;Generator&quot;,&quot;dtType&quot;:&quot;Temporary DG Set&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_ACB&quot;,&quot;Revit Type&quot;:&quot;E-M_ACB&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;ACB&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_ACB Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_ACB Panel-1&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;ACB Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_APFCR Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_APFC Panel-1&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;APFC Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_APFCR Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_APFC Panel-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;APFC Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;UPS&quot;,&quot;Revit Family&quot;:&quot;E-M_Battery&quot;,&quot;Revit Type&quot;:&quot;E-M_Battery&quot;,&quot;dtCategory&quot;:&quot;UPS&quot;,&quot;dtType&quot;:&quot;Battery&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Electrical Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_CT Meter Board&quot;,&quot;Revit Type&quot;:&quot;E-M_CT Meter Board&quot;,&quot;dtCategory&quot;:&quot;Electrical Panel&quot;,&quot;dtType&quot;:&quot;EB Meter&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_DB&quot;,&quot;Revit Type&quot;:&quot;E-M_DB&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Electrical Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Fire Pump Control Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Fire Pump Control Panel&quot;,&quot;dtCategory&quot;:&quot;Pump Control Panel&quot;,&quot;dtType&quot;:&quot;Fire Pump&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Breaker&quot;,&quot;Revit Family&quot;:&quot;E-M_Fuse Box&quot;,&quot;Revit Type&quot;:&quot;E-M_Fuse Box&quot;,&quot;dtCategory&quot;:&quot;Breaker&quot;,&quot;dtType&quot;:&quot;Fuse Box&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_L Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Emergency Lighting Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Emergency Lighting Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_L Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Lift Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lift Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LDB&quot;,&quot;Revit Type&quot;:&quot;E-M_LDB-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LDB&quot;,&quot;Revit Type&quot;:&quot;E-M_Common LDB-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LDB&quot;,&quot;Revit Type&quot;:&quot;E-M_ELDB-1&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LDB&quot;,&quot;Revit Type&quot;:&quot;E-M_ELDB-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Lift controller&quot;,&quot;Revit Type&quot;:&quot;E-M_Lift Operator Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lift Operator Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Lift Power Supply&quot;,&quot;Revit Type&quot;:&quot;E-M_Scissor Lift Control Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Scissor Lift Control Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Breaker&quot;,&quot;Revit Family&quot;:&quot;E-M_LT ACB&quot;,&quot;Revit Type&quot;:&quot;E-M_LT ACB&quot;,&quot;dtCategory&quot;:&quot;Breaker&quot;,&quot;dtType&quot;:&quot;Air Circuit Breaker&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Pump Control Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LTP&quot;,&quot;Revit Type&quot;:&quot;E-M_STP Control Panel&quot;,&quot;dtCategory&quot;:&quot;Pump Control Panel&quot;,&quot;dtType&quot;:&quot;STP Control Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Pump Control Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_LTP&quot;,&quot;Revit Type&quot;:&quot;E-M_Fire Pump Panel&quot;,&quot;dtCategory&quot;:&quot;Pump Control Panel&quot;,&quot;dtType&quot;:&quot;Fire Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Main EB Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Main Distribution Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Main Distribution Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MCCB&quot;,&quot;Revit Type&quot;:&quot;E-M_EB &amp; Generator Change over panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;EB &amp; DG Change Over Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MCCB&quot;,&quot;Revit Type&quot;:&quot;E-M_MCCB&quot;,&quot;dtCategory&quot;:&quot;Breaker&quot;,&quot;dtType&quot;:&quot;MCCB&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MLP&quot;,&quot;Revit Type&quot;:&quot;E-M_Main Lighting Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Main Lighting Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MLP&quot;,&quot;Revit Type&quot;:&quot;E-M_Main Power Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_MV Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Main LT Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;LT Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_PDB&quot;,&quot;Revit Type&quot;:&quot;E-M_4W PDB&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_PDB&quot;,&quot;Revit Type&quot;:&quot;E-M_PDB-1&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_PDB&quot;,&quot;Revit Type&quot;:&quot;E-M_PDB-2&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;UPS&quot;,&quot;Revit Family&quot;:&quot;E-M_Rack with Batteries&quot;,&quot;Revit Type&quot;:&quot;E-M_Rack with Batteries&quot;,&quot;dtCategory&quot;:&quot;UPS&quot;,&quot;dtType&quot;:&quot;Rack with Batteries&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Spare Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Spare Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Spare Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Breaker&quot;,&quot;Revit Family&quot;:&quot;E-M_Starter&quot;,&quot;Revit Type&quot;:&quot;E-M_Starter&quot;,&quot;dtCategory&quot;:&quot;Breaker&quot;,&quot;dtType&quot;:&quot;Starter&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Pump Control Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_STP Pump Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_STP Pump Starter Panel&quot;,&quot;dtCategory&quot;:&quot;Pump Control Panel&quot;,&quot;dtType&quot;:&quot;STP Starter Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Sub Lighting Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Sub Lighting Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Lighting Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Sub Power Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Sub Power Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Power Distribution Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Electrical Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Synchronizing Panel&quot;,&quot;Revit Type&quot;:&quot;E-M_Auto Synchronizing Panel&quot;,&quot;dtCategory&quot;:&quot;Electrical Panel&quot;,&quot;dtType&quot;:&quot;Auto Synchronizing Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Transformer&quot;,&quot;Revit Family&quot;:&quot;E-M_Transformer&quot;,&quot;Revit Type&quot;:&quot;E-M_Transformer&quot;,&quot;dtCategory&quot;:&quot;Transformer&quot;,&quot;dtType&quot;:&quot;EB Transformer&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;UPS&quot;,&quot;Revit Family&quot;:&quot;E-M_UPS&quot;,&quot;Revit Type&quot;:&quot;E-M_UPS&quot;,&quot;dtCategory&quot;:&quot;UPS&quot;,&quot;dtType&quot;:&quot;Main UPS&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;UPS&quot;,&quot;Revit Family&quot;:&quot;E-M_UPS Control&quot;,&quot;Revit Type&quot;:&quot;E-M_UPS Control&quot;,&quot;dtCategory&quot;:&quot;UPS&quot;,&quot;dtType&quot;:&quot;UPS Control&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Ups DB&quot;,&quot;Revit Type&quot;:&quot;E-M_APFC Panel&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;ACB Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalEquipment&quot;,&quot;baType&quot;:&quot;Distribution Panel&quot;,&quot;Revit Family&quot;:&quot;E-M_Ups DB&quot;,&quot;Revit Type&quot;:&quot;E-M_Plugin Box-03&quot;,&quot;dtCategory&quot;:&quot;Distribution Panel&quot;,&quot;dtType&quot;:&quot;Plugin Box&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;General Equipments / Machines&quot;,&quot;Revit Family&quot;:&quot;E-M-Wall Fan&quot;,&quot;Revit Type&quot;:&quot;E-M-Wall Fan&quot;,&quot;dtCategory&quot;:&quot;General Equipments / Machines&quot;,&quot;dtType&quot;:&quot;Wall Fan&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;E-M_6 nos 16 AMPS Socket&quot;,&quot;Revit Type&quot;:&quot;E-M_6 nos 16 AMPS Socket&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Unfused Sockets&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;General Equipments / Machines&quot;,&quot;Revit Family&quot;:&quot;E-M_Ceiling Fan&quot;,&quot;Revit Type&quot;:&quot;E-M_Ceiling Fan&quot;,&quot;dtCategory&quot;:&quot;General Equipments / Machines&quot;,&quot;dtType&quot;:&quot;Ceiling Fan&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Switch Boards&quot;,&quot;Revit Family&quot;:&quot;E-M_Emergency Lighting Switch Board&quot;,&quot;Revit Type&quot;:&quot;E-M_Emergency Lighting Switch Board&quot;,&quot;dtCategory&quot;:&quot;Switch Boards&quot;,&quot;dtType&quot;:&quot;Emergency Switch Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Switch Boards&quot;,&quot;Revit Family&quot;:&quot;E-M_Lighting Switch Board&quot;,&quot;Revit Type&quot;:&quot;E-M_Lighting Switch Board&quot;,&quot;dtCategory&quot;:&quot;Switch Boards&quot;,&quot;dtType&quot;:&quot;Lighting Switch Board&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;General Equipments / Machines&quot;,&quot;Revit Family&quot;:&quot;E-M_Pedastrial Fan&quot;,&quot;Revit Type&quot;:&quot;E-M_Pedestal Fan&quot;,&quot;dtCategory&quot;:&quot;General Equipments / Machines&quot;,&quot;dtType&quot;:&quot;Pedestal Fan&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;E-M_Single Switch Socket&quot;,&quot;Revit Type&quot;:&quot;E-M_Single Switch Socket&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Single Socket Switch&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;E-M_Socket&quot;,&quot;Revit Type&quot;:&quot;E-M_Socket&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Unfused Sockets&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;E-M_Thriple Socket Switch&quot;,&quot;Revit Type&quot;:&quot;E-M_Thriple Socket Switch&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Triple Socket Switch&quot;},{&quot;Revit Category&quot;:&quot;OST_ElectricalFixtures&quot;,&quot;baType&quot;:&quot;Sockets&quot;,&quot;Revit Family&quot;:&quot;Single Data outlet&quot;,&quot;Revit Type&quot;:&quot;Single Data outlet&quot;,&quot;dtCategory&quot;:&quot;Sockets&quot;,&quot;dtType&quot;:&quot;Data Outlet&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Alarm-Smoke_and_Heat_Detectors&quot;,&quot;Revit Type&quot;:&quot;Smoke Detector&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Smoke Detector&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Firealarm_manual_call_point&quot;,&quot;Revit Type&quot;:&quot;Fire alarm&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Manual Call Point&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Firealarm_panel&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Fire Alarm Panel&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Isolator _ Module _Notifier&quot;,&quot;Revit Type&quot;:&quot;Isolator _ Module&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Isolator module&quot;},{&quot;Revit Category&quot;:&quot;OST_FireAlarmDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Sounder&quot;,&quot;Revit Type&quot;:&quot;Sounder_indoor&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Sounder&quot;},{&quot;Revit Category&quot;:&quot;OST_FlexDuctCurves&quot;,&quot;baType&quot;:&quot;Duct&quot;,&quot;Revit Family&quot;:&quot;Flex Duct Round&quot;,&quot;Revit Type&quot;:&quot;Flex - Round&quot;,&quot;dtCategory&quot;:&quot;Duct&quot;,&quot;dtType&quot;:&quot;DG Exhaust Duct&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor 200 mm fill concrete&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor Finishes&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Lift Floor Finishes&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor Finishes 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Brick  Finishes&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor Toilet Sink&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Granite  Toilet Sink&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Bathroom Wall Finishes&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor Landscape \&quot;  fill concrete 3&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Floor12\&quot;  fill concrete 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;S_M_Concrete Slab - 9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;S_M_Concrete Slab - 12\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Concrete Slab -9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Concrete Slab - 6\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Concrete Slab - 5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Concrete Slab - 8\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_STP Slab&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Pump Slab&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;A-M_Pump Slab 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Floor 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Floors&quot;,&quot;Revit Family&quot;:&quot;Floor&quot;,&quot;Revit Type&quot;:&quot;Floor 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M__Type_5_Rack&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M__Type_5_Rack_2&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M__Type_5_Rack_3&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M__Type_5_Rack_6&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Desk&quot;,&quot;Revit Type&quot;:&quot;A-M_Desk&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Desk&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Desk Cupboard&quot;,&quot;Revit Type&quot;:&quot;A-M_Desk Cupboard&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Desk Cupboard&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Desk Cupboard 2&quot;,&quot;Revit Type&quot;:&quot;A-M_Desk Cupboard 2&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Desk Cupboard&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Fabric checking table&quot;,&quot;Revit Type&quot;:&quot;Fabric checking table Type-1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Checking Table&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Furniture Desk&quot;,&quot;Revit Type&quot;:&quot;Furniture Desk&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Desk&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Locker Pass-Thru 2 Openings&quot;,&quot;Revit Type&quot;:&quot;ED3DA14&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Lockers&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_MS_Pallete&quot;,&quot;Revit Type&quot;:&quot;A-M_MS_Pallete&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;MS Pallete&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Office Stationery Wooden Cubords&quot;,&quot;Revit Type&quot;:&quot;Office Stationary Wooden Cuboard&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Stationary Wooden Cupboard&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Old Table&quot;,&quot;Revit Type&quot;:&quot;Old table Type-1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Table&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_PVC_Pallet&quot;,&quot;Revit Type&quot;:&quot;A-M_PVC_Pallet&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;PVC Pallete&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Rack&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M_Rack_Type_4_Rack&quot;,&quot;Revit Type&quot;:&quot;A-M_Rack_1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;Revit Family&quot;:&quot;A-M_Rack_Type_4_Rack&quot;,&quot;Revit Type&quot;:&quot;Type 2_End&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Pallet Space&quot;,&quot;Revit Family&quot;:&quot;A-M_Space Object&quot;,&quot;Revit Type&quot;:&quot;A-M_Space Object&quot;,&quot;dtCategory&quot;:&quot;Pallet Space&quot;,&quot;dtType&quot;:&quot;Pallet Box&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Tanjore Paintings&quot;,&quot;Revit Type&quot;:&quot;Tanjore Paintings&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Paintings&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Trim Rack&quot;,&quot;Revit Type&quot;:&quot;A-M_Trim Rack&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Trim Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;A-M_Trims hecking table&quot;,&quot;Revit Type&quot;:&quot;Trim  checking table Type-1&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Trim Checking Table&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Wooden Writing Desk&quot;,&quot;Revit Type&quot;:&quot;Writing Desk&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Writing Desk&quot;},{&quot;Revit Category&quot;:&quot;OST_Furniture&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;End Rack Frame&quot;,&quot;Revit Type&quot;:&quot;End Rack Frame&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_GenericModel&quot;,&quot;Revit Family&quot;:&quot;A-M_Drainage 2&quot;,&quot;Revit Type&quot;:&quot;Family3&quot;},{&quot;Revit Category&quot;:&quot;OST_GenericModel&quot;,&quot;baType&quot;:&quot;Office Furniture &amp;Fitting&quot;,&quot;Revit Family&quot;:&quot;A-M_Tanjore Painting&quot;,&quot;Revit Type&quot;:&quot;A-M_Tanjore Painting&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Paintings&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;8mm Head&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;8mm Head&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;1/4\&quot; Head&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;Level 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;A-M_Level Triangle&quot;},{&quot;Revit Category&quot;:&quot;OST_Levels&quot;,&quot;Revit Family&quot;:&quot;Level&quot;,&quot;Revit Type&quot;:&quot;Level 1&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingDevices&quot;,&quot;baType&quot;:&quot;Sensor&quot;,&quot;Revit Family&quot;:&quot;E-M_PIR sensor&quot;,&quot;Revit Type&quot;:&quot;E-M_PIR Sensor&quot;,&quot;dtCategory&quot;:&quot;Sensor&quot;,&quot;dtType&quot;:&quot;Movement Sensor&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_18W Surface mounted lighting fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_18W Tube Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Tube Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_18W Surface mounted lighting fitting.2&quot;,&quot;Revit Type&quot;:&quot;E-M_18W Tube Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Tube Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_30W LED Halogen Light&quot;,&quot;Revit Type&quot;:&quot;E-M_400W LED Halogen Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Halogen Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Hanging Light&quot;,&quot;Revit Type&quot;:&quot;E-M_39W pendent mounted LED tubelight&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Pendant Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Light Fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_Suspended LED Flexstrip light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Light Fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_4&apos; LED TUBE&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Mirror Light&quot;,&quot;Revit Type&quot;:&quot;E-M_Mirror Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Mirror Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Surface mounted lighting fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_10W LED Surface mounted lighting fitting(EL)&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Surface mounted lighting fitting&quot;,&quot;Revit Type&quot;:&quot;E-M_10W LED Surface mounted lighting fitting&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;E-M_Wall Tube Light&quot;,&quot;Revit Type&quot;:&quot;E-M_Wall Tube Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;Tube Light&quot;},{&quot;Revit Category&quot;:&quot;OST_LightingFixtures&quot;,&quot;baType&quot;:&quot;Lighting&quot;,&quot;Revit Family&quot;:&quot;Light box.0005&quot;,&quot;Revit Type&quot;:&quot;E-M_Square Light&quot;,&quot;dtCategory&quot;:&quot;Lighting&quot;,&quot;dtType&quot;:&quot;LED Square Light&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;Revit Family&quot;:&quot;A-M_Drainage&quot;,&quot;Revit Type&quot;:&quot;Family3&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;E-M_Diesel tank&quot;,&quot;Revit Type&quot;:&quot;1000 Ltrs&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Diesel Tank&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;F-M_Diesel generator Pump&quot;,&quot;Revit Type&quot;:&quot;Diesel Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Diesel&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;F-M_Elelctrical Pump&quot;,&quot;Revit Type&quot;:&quot;3P&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Electrical&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire hose Box&quot;,&quot;Revit Type&quot;:&quot;Fire hose Box&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Hose Reel Box&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Extinguisher&quot;,&quot;Revit Type&quot;:&quot;Extinguisher&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Extinguisher&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_FIRE_HYDRANT&quot;,&quot;Revit Type&quot;:&quot;FIRE_HYDRANT&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Fire Brigade Inlet or Outlet&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Hose Reel&quot;,&quot;Revit Type&quot;:&quot;Hose Reel&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Hose Reel Drum&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;F-M_Jockey Pump&quot;,&quot;Revit Type&quot;:&quot;Johnson Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Jockey&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Landing_Valve&quot;,&quot;Revit Type&quot;:&quot;Landing_Valve_&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Single Headed Hydrant&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_AIR Blower&quot;,&quot;Revit Type&quot;:&quot;Blower&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Blower&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Cleaner Filter Tank&quot;,&quot;Revit Type&quot;:&quot;CL tank&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Cleaner Filter Tank&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Drain Sump Pit&quot;,&quot;Revit Type&quot;:&quot;Drain Sump Pit&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Sump Pit&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Drain Sump Pit&quot;,&quot;Revit Type&quot;:&quot;Drain Sump Pit&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Sump Pit&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Drain Water Chamber&quot;,&quot;Revit Type&quot;:&quot;Drain Water Chamber&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Drain Water Chamber&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Feed Pump&quot;,&quot;Revit Type&quot;:&quot;50_40&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Filter Feed&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Feed Pump_STP&quot;,&quot;Revit Type&quot;:&quot;FFP&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Filter Feed&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Tank&quot;,&quot;Revit Type&quot;:&quot;ACF&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Activated Carbon Filter&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Tank&quot;,&quot;Revit Type&quot;:&quot;DMF&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Dual Media Filter&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Tank_STP&quot;,&quot;Revit Type&quot;:&quot;ACF&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Activated Carbon Filter&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Filter Tank_STP&quot;,&quot;Revit Type&quot;:&quot;PSF&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Dual Media Filter&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Hydro Pneumatic Pump&quot;,&quot;Revit Type&quot;:&quot;Hydro Pneumatic Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Hydro Pneumatic&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Storage Tank&quot;,&quot;Revit Family&quot;:&quot;P-M_Hypochloride System tank&quot;,&quot;Revit Type&quot;:&quot;Hypochloride System tank&quot;,&quot;dtCategory&quot;:&quot;Storage Tank&quot;,&quot;dtType&quot;:&quot;Hydrochloride System&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Monobloc Pump&quot;,&quot;Revit Type&quot;:&quot;Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Monobloc&quot;},{&quot;Revit Category&quot;:&quot;OST_MechanicalEquipment&quot;,&quot;baType&quot;:&quot;Pumps&quot;,&quot;Revit Family&quot;:&quot;P-M_Pump-Submersible-Liberty-Effluent&quot;,&quot;Revit Type&quot;:&quot;Submerged Pump&quot;,&quot;dtCategory&quot;:&quot;Pumps&quot;,&quot;dtType&quot;:&quot;Submerged&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Ball Valve - 50-150 mm&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Ball Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Ball Valve - 50-150 mm&quot;,&quot;Revit Type&quot;:&quot;25 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Ball Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Butterfly_valve_&quot;,&quot;Revit Type&quot;:&quot;BV-80A&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Butterfly Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Butterfly_valve_&quot;,&quot;Revit Type&quot;:&quot;BV-150A&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Butterfly Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Butterfly_valve_&quot;,&quot;Revit Type&quot;:&quot;BV-100A&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Butterfly Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Non Return Valve - Wafer - 50-600 mm&quot;,&quot;Revit Type&quot;:&quot;150 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Non return Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Non Return Valve - Wafer - 50-600 mm&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Non return Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Solenoid Valve - 50-450 mm - Flanged&quot;,&quot;Revit Type&quot;:&quot;200 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Solenoid Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Solenoid Valve - 50-450 mm - Flanged&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Solenoid Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Water Flow Alarm Switch&quot;,&quot;Revit Type&quot;:&quot;Water Flow Alarm Switch&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Flow Switch&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Y Strainer - 50-500 mm - Flanged&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Y Strainer&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Fire Protection Valve&quot;,&quot;Revit Family&quot;:&quot;F-M_Y Strainer - 50-500 mm - Flanged&quot;,&quot;Revit Type&quot;:&quot;200 mm&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Valve&quot;,&quot;dtType&quot;:&quot;Y Strainer&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Angle_valve&quot;,&quot;Revit Type&quot;:&quot;Angle valve&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Angle Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;20 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Angle Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;40 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Angle Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;80 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Angle Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;50 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Ball Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeAccessory&quot;,&quot;baType&quot;:&quot;Plumbing Valve&quot;,&quot;Revit Family&quot;:&quot;P-M_Ball Valve&quot;,&quot;Revit Type&quot;:&quot;65 mm&quot;,&quot;dtCategory&quot;:&quot;Plumbing Valve&quot;,&quot;dtType&quot;:&quot;Ball Valve&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeCurves&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;Pipe Types&quot;,&quot;Revit Type&quot;:&quot;P-M_PVC&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Drain Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeCurves&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;Pipe Types&quot;,&quot;Revit Type&quot;:&quot;P-M_HDPE&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Water Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeCurves&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;Pipe Types&quot;,&quot;Revit Type&quot;:&quot;E-M_Pipe&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;EM Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeCurves&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;Pipe Types&quot;,&quot;Revit Type&quot;:&quot;F-M_FP&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Fire Protection Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Cap - Welded - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Flange - Blind - Steel - Class 150&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved Equal Tee&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Concentric Reducer-WOC&quot;,&quot;Revit Type&quot;:&quot;Threaded&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Cross-WOC&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Elbow_45&amp;90&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Elbow_45&amp;90&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Grooved_Tee WOC&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;F-M_Tee Reducing - Threaded - MI - Class 150&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;FP_Grooved Cap&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Bend - PVC - Sch 40&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Bend - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Cap - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Cap - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Cap - Welded - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Elbow - Welded - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Reducer - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Tee - Welded - Generic&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Tee Reducing - Threaded - MI - Class 150&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Tee Reducing Sanitary - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Tee Sanitary - PVC - Sch 40 - DWV&quot;,&quot;Revit Type&quot;:&quot;Standard&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_PipeFitting&quot;,&quot;baType&quot;:&quot;Pipe&quot;,&quot;Revit Family&quot;:&quot;P-M_Threaded_Concentric Reducer&quot;,&quot;Revit Type&quot;:&quot;Threaded&quot;,&quot;dtCategory&quot;:&quot;Pipe&quot;,&quot;dtType&quot;:&quot;Pipe Fitting&quot;},{&quot;Revit Category&quot;:&quot;OST_Planting&quot;,&quot;Revit Family&quot;:&quot;27039_Shade_Tree_3682&quot;,&quot;Revit Type&quot;:&quot;27039_Shade_Tree_3682&quot;},{&quot;Revit Category&quot;:&quot;OST_Planting&quot;,&quot;Revit Family&quot;:&quot;3d_oak_tree_a_tree12bx_16942&quot;,&quot;Revit Type&quot;:&quot;3d_oak_tree_a_tree12bx_16942&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_Faucet&quot;,&quot;Revit Type&quot;:&quot;A-M_Faucet&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Faucet&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Gratting&quot;,&quot;Revit Type&quot;:&quot;A-M_Grating&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Grating&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Gratting-1&quot;,&quot;Revit Type&quot;:&quot;A-M_Grating-1&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Grating&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_Sink-Lavatory&quot;,&quot;Revit Type&quot;:&quot;A-M_Sink&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Sink&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_Tap&quot;,&quot;Revit Type&quot;:&quot;A-M_Sink Tap&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Sink Tap&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_toilet_wall_hung&quot;,&quot;Revit Type&quot;:&quot;A-M_Wall_Hung_WC-Valverfa_2893&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Water Closet&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Equipment&quot;,&quot;Revit Family&quot;:&quot;A-M_urinal_12788&quot;,&quot;Revit Type&quot;:&quot;A-M_Urinal&quot;,&quot;dtCategory&quot;:&quot;Sanitary Equipment&quot;,&quot;dtType&quot;:&quot;Urinals&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Waste Trap DWC1&quot;,&quot;Revit Type&quot;:&quot;A-M_Waste Trap_DWC 2&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Waste Trap&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Waste Trap DWC1&quot;,&quot;Revit Type&quot;:&quot;A-M_Waste Trap_DWC&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Waste Trap&quot;},{&quot;Revit Category&quot;:&quot;OST_PlumbingFixtures&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;P-M_Floor_Drain&quot;,&quot;Revit Type&quot;:&quot;Floor_Drain&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Floor Drain&quot;},{&quot;Revit Category&quot;:&quot;OST_RailingTopRail&quot;,&quot;Revit Family&quot;:&quot;Top Rail Type&quot;,&quot;Revit Type&quot;:&quot;Circular - 40mm&quot;},{&quot;Revit Category&quot;:&quot;OST_Ramps&quot;,&quot;Revit Family&quot;:&quot;Ramp&quot;,&quot;Revit Type&quot;:&quot;Ramp 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Roofs&quot;,&quot;Revit Family&quot;:&quot;Sloped Glazing&quot;,&quot;Revit Type&quot;:&quot;A-M_Entrance  Glazing&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;E-M_CCTV Camera&quot;,&quot;Revit Type&quot;:&quot;Bullet Camera&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Bullet Camera&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;E-M_Thumb Reader&quot;,&quot;Revit Type&quot;:&quot;E-M_Thumb Reader&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Thumb Reader&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;External cctv dome camera&quot;,&quot;Revit Type&quot;:&quot;CCTV Camera&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Bullet Camera&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Storage Devices&quot;,&quot;Revit Family&quot;:&quot;IT BOX&quot;,&quot;Revit Type&quot;:&quot;IT BOX&quot;,&quot;dtCategory&quot;:&quot;Storage Devices&quot;,&quot;dtType&quot;:&quot;Hub Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;Network Box&quot;,&quot;Revit Type&quot;:&quot;Computer Server&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Switch Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;NVR Box&quot;,&quot;Revit Type&quot;:&quot;CCTV Control Switches&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;NVR Rack&quot;},{&quot;Revit Category&quot;:&quot;OST_SecurityDevices&quot;,&quot;baType&quot;:&quot;Safety and Security&quot;,&quot;Revit Family&quot;:&quot;NVR Box&quot;,&quot;Revit Type&quot;:&quot;NVR Box&quot;,&quot;dtCategory&quot;:&quot;Safety and Security&quot;,&quot;dtType&quot;:&quot;Network Video Recorder&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Lift&quot;,&quot;Revit Family&quot;:&quot;A-M_Elevator-KONE-MonoSpace500_Front_Opening&quot;,&quot;Revit Type&quot;:&quot;150fpm_2000lbs_Passenger Elevator&quot;,&quot;dtCategory&quot;:&quot;Lift&quot;,&quot;dtType&quot;:&quot;Passenger Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Lift&quot;,&quot;Revit Family&quot;:&quot;A-M_Elevator-KONE-MonoSpace500_Front_Opening Service Lift&quot;,&quot;Revit Type&quot;:&quot;150fpm_2000lbs_Passenger Elevator&quot;,&quot;dtCategory&quot;:&quot;Lift&quot;,&quot;dtType&quot;:&quot;Passenger Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Mirror&quot;,&quot;Revit Type&quot;:&quot;Mirror&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Mirror&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Mirror 2&quot;,&quot;Revit Type&quot;:&quot;Mirror 2&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Mirror&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Lift&quot;,&quot;Revit Family&quot;:&quot;A-M_Scissor_lift_18142&quot;,&quot;Revit Type&quot;:&quot;Scissor_lift_18142&quot;,&quot;dtCategory&quot;:&quot;Lift&quot;,&quot;dtType&quot;:&quot;Scissor Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Sanitary Accessories&quot;,&quot;Revit Family&quot;:&quot;A-M_Soap_Dispenser_3270 (1)&quot;,&quot;Revit Type&quot;:&quot;Soap_Dispenser_3270 (1)&quot;,&quot;dtCategory&quot;:&quot;Sanitary Accessories&quot;,&quot;dtType&quot;:&quot;Soap Dispenser&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_ACE Material Pallet_Jack_Lifting Equpiment&quot;,&quot;Revit Type&quot;:&quot;E-M_ACE Material Pallet_Jack_Lifting Equpiment&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Electric Pallet Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Fabric Checking Machine&quot;,&quot;Revit Type&quot;:&quot;E-M_Fabric Checking Machine&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Fabric Checker&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Hand Pallet Trolley&quot;,&quot;Revit Type&quot;:&quot;E-M_Hand Pallet Trolley&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Hand Pallet Trolley&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Weighing Scale Platform&quot;,&quot;Revit Type&quot;:&quot;E-M_Weighing Scale Platform&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Platform Scale&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Weighing Scale-Tabletop&quot;,&quot;Revit Type&quot;:&quot;E-M_Weighing Scale-Tabletop&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Table Top&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;E-M_Xerox Machine&quot;,&quot;Revit Type&quot;:&quot;E-M_Xerox Machine&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Photo Copier&quot;},{&quot;Revit Category&quot;:&quot;OST_SpecialityEquipment&quot;,&quot;baType&quot;:&quot;Main Store Equipments&quot;,&quot;Revit Family&quot;:&quot;sewing_machine_7099&quot;,&quot;Revit Type&quot;:&quot;Fax - Table&quot;,&quot;dtCategory&quot;:&quot;Main Store Equipments&quot;,&quot;dtType&quot;:&quot;Sewing Machine&quot;},{&quot;Revit Category&quot;:&quot;OST_Sprinklers&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Sprinkler_pendent&quot;,&quot;Revit Type&quot;:&quot;Pendent Type Sprinkler_BOAZ&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;BOAZ Pendent Type Sprinkler&quot;},{&quot;Revit Category&quot;:&quot;OST_Sprinklers&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Sprinkler_pendent&quot;,&quot;Revit Type&quot;:&quot;Pendent Type Sprinkler_Tyco&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Tyco Pendent Type Sprinkler&quot;},{&quot;Revit Category&quot;:&quot;OST_Sprinklers&quot;,&quot;baType&quot;:&quot;Fire Protection Device&quot;,&quot;Revit Family&quot;:&quot;F-M_Fire_Sprinkler_Upright&quot;,&quot;Revit Type&quot;:&quot;Pendent Type Sprinkler_Tyco&quot;,&quot;dtCategory&quot;:&quot;Fire Protection Device&quot;,&quot;dtType&quot;:&quot;Tyco Upright Type Sprinkler&quot;},{&quot;Revit Category&quot;:&quot;OST_StackedWalls&quot;,&quot;Revit Family&quot;:&quot;Stacked Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Stacked Wall 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Stairs&quot;,&quot;Revit Family&quot;:&quot;Cast-In-Place Stair&quot;,&quot;Revit Type&quot;:&quot;A-M_Monolithic Stair&quot;},{&quot;Revit Category&quot;:&quot;OST_StairsLandings&quot;,&quot;Revit Family&quot;:&quot;Monolithic Landing&quot;,&quot;Revit Type&quot;:&quot;A-M_300mm Thickness&quot;},{&quot;Revit Category&quot;:&quot;OST_StairsRailing&quot;,&quot;Revit Family&quot;:&quot;Railing&quot;,&quot;Revit Type&quot;:&quot;900mm Pipe&quot;},{&quot;Revit Category&quot;:&quot;OST_StairsRailing&quot;,&quot;Revit Family&quot;:&quot;Railing&quot;,&quot;Revit Type&quot;:&quot;Rail - Digger Specialties - C321 - Heavy Duty - Crossover - 42\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_StairsRuns&quot;,&quot;Revit Family&quot;:&quot;Monolithic Run&quot;,&quot;Revit Type&quot;:&quot;A-M_150mm Depth&quot;},{&quot;Revit Category&quot;:&quot;OST_StructConnections&quot;,&quot;Revit Family&quot;:&quot;A-M_Steel Support&quot;,&quot;Revit Type&quot;:&quot;Steel Support&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Type 3&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Type 4&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Type 7&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Type 6&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;Concrete-Rectangular-Column&quot;,&quot;Revit Type&quot;:&quot;S_M_Column_Boundary Wall&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular-Column with Drop Caps&quot;,&quot;Revit Type&quot;:&quot;S-M_TYPE_1&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S-M_Type_2&quot;,&quot;Revit Type&quot;:&quot;M_300 x 450&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S-M_Type_2&quot;,&quot;Revit Type&quot;:&quot;M_17&apos;3\&quot;X 8&apos;7.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S-M_Type_2 Corner end&quot;,&quot;Revit Type&quot;:&quot;M_300 x 450&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S_M_LShaped Column&quot;,&quot;Revit Type&quot;:&quot;12 x 18&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralColumns&quot;,&quot;Revit Family&quot;:&quot;S_M_Shaped Column Cornered&quot;,&quot;Revit Type&quot;:&quot;S-M_TYPE_2&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_1&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_4&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_2&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_3&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_6&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_7&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_5&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_8&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_10_Service Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Type_10_Passenger  Lift&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Pump Foundation&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Pump Foundation 2&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFoundation&quot;,&quot;Revit Family&quot;:&quot;S_M_Rectangular_Footing&quot;,&quot;Revit Type&quot;:&quot;Pump Foundation 3&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_9\&quot;X24&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_18x24&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_9\&quot;X30&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_12\&quot;X18&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_30\&quot;X18&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_18x12&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_9\&quot;X20&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_20x9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M _BR1_18x9 2&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_BR2_20x9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_12\&quot;X24&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_18x9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M _BR3_18x9&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_Concealed Beam 9x6&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_30x24&quot;},{&quot;Revit Category&quot;:&quot;OST_StructuralFraming&quot;,&quot;Revit Family&quot;:&quot;M_Concrete-Rectangular Beam&quot;,&quot;Revit Type&quot;:&quot;S-M_18x6 Pergola&quot;},{&quot;Revit Category&quot;:&quot;OST_TelephoneDevices&quot;,&quot;baType&quot;:&quot;Office Furniture &amp; Fittings&quot;,&quot;Revit Family&quot;:&quot;Telephone_Generic_Business_bsf_18281&quot;,&quot;Revit Type&quot;:&quot;Telephone_Generic_Business_bsf_18281&quot;,&quot;dtCategory&quot;:&quot;Furniture &amp; Fittings&quot;,&quot;dtType&quot;:&quot;Telephone&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_ Walls Facade  11&quot;,&quot;Revit Type&quot;:&quot;Walls Facade  11&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Wall Facade 12&quot;,&quot;Revit Type&quot;:&quot;Wall Facade 12&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Wall Facade1&quot;,&quot;Revit Type&quot;:&quot;Wall Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls 1&quot;,&quot;Revit Type&quot;:&quot;Walls 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade&quot;,&quot;Revit Type&quot;:&quot;Walls Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 1&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 8&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 10&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 13&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 13&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 2&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 3&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 3&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 4&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 8&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 6&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 6&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 8&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 8&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade 9&quot;,&quot;Revit Type&quot;:&quot;Walls Facade 9&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade1&quot;,&quot;Revit Type&quot;:&quot;A-M_Walls Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade2&quot;,&quot;Revit Type&quot;:&quot;Walls Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;A-M_Walls Facade3&quot;,&quot;Revit Type&quot;:&quot;Walls Facade&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Blockwork- 9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exteroir_Blockwork- 9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Blockwork- 4.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Granite Claddding&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Wall 7 \&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Blockwork- 6 \&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Blockwork- 0.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Wal_Exterior - 0.5&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Blockwork- 9\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom-Fabio Brown 0.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom-Eternity Brown 0.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom-Eternity Beige 0.5\&quot; 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom- 0.5\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes restroom-Tiles&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Ledge Wall- 4\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interior_Bathroom Partion- 3\&quot;&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;Generic - 8\&quot; Masonry&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;Generic - 9\&quot; Masonry&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes Lift Cera Grey Granite&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Finishes Lift Jet Black  Granite&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;S-M-9\&quot;  Wall&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;S-M-225  Wall&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;S-M-6 &apos;Wall&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Basic Wall&quot;,&quot;Revit Type&quot;:&quot;S-M-7 1/2\&quot;  Wall 2&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall 4&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall 5&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall 6&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_EXterior Curtain Wall 9&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Glazed Panel&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall 7&quot;,&quot;dtCategory&quot;:&quot;Glazing&quot;,&quot;dtType&quot;:&quot;Structural&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Window&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interrior Curtain Wall 8&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Glazed &quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Glazed &quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior Curtain Wall Staircase&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Interrior Curtain Wall 10&quot;},{&quot;Revit Category&quot;:&quot;OST_Walls&quot;,&quot;Revit Family&quot;:&quot;Curtain Wall&quot;,&quot;Revit Type&quot;:&quot;A-M_Exterior fixed glass&quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Instance-Window-Fixed&quot;,&quot;Revit Type&quot;:&quot;0610 x 1220mm&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Glazed &quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Reliable_Louvers_-_6375ZS_-_Stationary_Heavyline_Louver&quot;,&quot;Revit Type&quot;:&quot;Reliable_Louvers_-_6375ZS_-_Stationary_Heavyline_Louver&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Glazed &quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Window 1&quot;,&quot;Revit Type&quot;:&quot;Window 1&quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Windows_Opening-Slide_UFME_Fenetre_Coulissante_2V&quot;,&quot;Revit Type&quot;:&quot;W2    6&apos;  X 4&apos; 6\&quot;&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Punched &quot;},{&quot;Revit Category&quot;:&quot;OST_Windows&quot;,&quot;baType&quot;:&quot;Windows&quot;,&quot;Revit Family&quot;:&quot;A-M_Windows_Opening-Slide_UFME_Fenetre_Coulissante_2V&quot;,&quot;Revit Type&quot;:&quot;W3    4&apos;  X 4&apos; 6\&quot; 2&quot;,&quot;dtCategory&quot;:&quot;Windows&quot;,&quot;dtType&quot;:&quot;Punched &quot;},{&quot;dtCategory&quot;:&quot;KAR Docs&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/itemsvc/api/v1/nameduseritems/${C_LTMUSERITEMDBID1}/relateditems/bulk?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Untill getting created status call &apos;N&apos; time . Looping statement</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_TASKID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">C_TASKID</stringProp>
                <stringProp name="RegexExtractor.regex">qa3-api.invicara.com:443/itemsvc/api/v1/tasks/(.+?)\n</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_TASKID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">_userItemId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${c_status}&quot;.indexOf(&quot;COMPLETED&quot;) == -1,)}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/itemsvc/api/v1/tasks?nsfilter_T001_LOADTYPEMAPFROM_XLXSFILE" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="nsfilter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">nsfilter</stringProp>
                      <stringProp name="Argument.value">${CNAMESPACESID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/itemsvc/api/v1/tasks/${C_TASKID}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Untill getting created status call &apos;N&apos; time . Looping statement</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="c_status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">c_status</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;_status&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTFOUND_c_status</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                <intProp name="OnError.action">6</intProp>
              </ResultAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_ADDBIMPK_UPLOADERDATASOURECE" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/datasourcesvc/api/v1/orchestrators?nsfilter_T001_ADDBIMPK_UPLOADERDATASOURECE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;_name&quot;: &quot;BIMPK Uploader&quot;,&#xd;
	&quot;_description&quot;: &quot;Orchestrator to upload model from BIMPK file&quot;,&#xd;
	&quot;_namespaces&quot;: [&quot;${CNAMESPACESID}&quot;],&#xd;
	&quot;_userType&quot;: &quot;bimpk_uploader&quot;,&#xd;
	&quot;_params&quot;: {&#xd;
		&quot;tasks&quot;: [  {&#xd;
			&quot;name&quot;: &quot;folder_cleaner_target&quot;,&#xd;
			&quot;_sequenceno&quot;: 6&#xd;
		}, {&#xd;
			&quot;name&quot;: &quot;scz_relations_target&quot;,&#xd;
			&quot;_sequenceno&quot;: 5&#xd;
		}, {&#xd;
			&quot;name&quot;: &quot;default_script_target&quot;,&#xd;
			&quot;_actualparams&quot;: {&#xd;
				&quot;userType&quot;: &quot;iaf_ext_bimpk_upload&quot;,&#xd;
				&quot;_scriptName&quot;: &quot;createModelDataCache&quot;&#xd;
			},&#xd;
			&quot;_sequenceno&quot;: 4&#xd;
		}, {&#xd;
			&quot;name&quot;: &quot;default_script_target&quot;,&#xd;
			&quot;_actualparams&quot;: {&#xd;
				&quot;userType&quot;: &quot;iaf_ext_bimpk_upload&quot;,&#xd;
				&quot;_scriptName&quot;: &quot;uploadBimpk&quot;&#xd;
			},&#xd;
			&quot;_sequenceno&quot;: 3&#xd;
		}, {&#xd;
			&quot;name&quot;: &quot;bimpk_element_extractor&quot;,&#xd;
			&quot;_sequenceno&quot;: 2&#xd;
		}, {&#xd;
			&quot;name&quot;: &quot;bimpk_file_extractor&quot;,&#xd;
			&quot;_sequenceno&quot;: 1&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/datasourcesvc/api/v1/orchestrators?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">[&quot;${C_NAMESPACESID}&quot;]</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_orchestratorId" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_fileId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_orchestratorId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_orchestratorId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/datasourcesvc/api/v1/orchestrators?nsfilter_T001_ADDBIMPK_UPLOADERDATASOURECE" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;_name&quot;:&quot;BIMPK Uploader&quot;,&quot;_description&quot;:&quot;Orchestrator to upload model from BIMPK file&quot;,&quot;_namespaces&quot;:[&quot;${CNAMESPACESID}&quot;],&quot;_userType&quot;:&quot;iaf_bimpk_upload&quot;,&quot;_params&quot;:{&quot;tasks&quot;:[{&quot;_orchcomp&quot;:&quot;default_script_target&quot;,&quot;_name&quot;:&quot;Copy space relationships from previous version&quot;,&quot;_sequenceno&quot;:7,&quot;_actualparams&quot;:{&quot;userType&quot;:&quot;iaf_ext_bimpk_post_imp&quot;,&quot;relatedUserType&quot;:&quot;iaf_ext_space_coll&quot;}},{&quot;_orchcomp&quot;:&quot;default_script_target&quot;,&quot;_name&quot;:&quot;Copy assets relationships from previous version&quot;,&quot;_sequenceno&quot;:6,&quot;_actualparams&quot;:{&quot;userType&quot;:&quot;iaf_ext_bimpk_post_imp&quot;,&quot;relatedUserType&quot;:&quot;iaf_ext_asset_coll&quot;}},{&quot;name&quot;:&quot;folder_cleaner_target&quot;,&quot;_sequenceno&quot;:5},{&quot;name&quot;:&quot;scz_relations_target&quot;,&quot;_sequenceno&quot;:4},{&quot;name&quot;:&quot;default_script_target&quot;,&quot;_actualparams&quot;:{&quot;userType&quot;:&quot;iaf_ext_bimpk_upload&quot;},&quot;_sequenceno&quot;:3},{&quot;name&quot;:&quot;bimpk_element_extractor&quot;,&quot;_sequenceno&quot;:2},{&quot;name&quot;:&quot;bimpk_file_extractor&quot;,&quot;_sequenceno&quot;:1}]}}&#xd;
&#xd;
{&#xd;
  &quot;_name&quot;: &quot;BIMPK Uploader&quot;,&#xd;
  &quot;_description&quot;: &quot;Orchestrator to upload model from BIMPK file&quot;,&#xd;
  &quot;_namespaces&quot;: [&#xd;
    &quot;${CNAMESPACESID}&quot;&#xd;
  ],&#xd;
  &quot;_userType&quot;: &quot;iaf_bimpk_upload&quot;,&#xd;
  &quot;instant&quot;: true,&#xd;
  &quot;_params&quot;: {&#xd;
    &quot;tasks&quot;: [&#xd;
      {&#xd;
        &quot;name&quot;: &quot;bimpk_file_extractor&quot;,&#xd;
        &quot;_sequenceno&quot;: 1&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/datasourcesvc/api/v1/orchestrators?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_orchestratorId" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_fileId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_orchestratorId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_orchestratorId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_Upload BIMPK FILE" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/filesvc/api/v1/files?_namespaces&amp;nsfilter_T001_Upload BIMPK FILE" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="5SPD_Federated_Model_R16_Compressed_V5.bimpk" elementType="HTTPFileArg">
                    <stringProp name="File.path">5SPD_Federated_Model_R16_Compressed_V5.bimpk</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">file</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/filesvc/api/v1/files?_namespaces=${CNAMESPACESID}&amp;nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">1200000</stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">/filesvc/api/v1/files</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_DWFILEID" enabled="true">
                <stringProp name="TestPlan.comments">_tipId&quot;:&quot;b79a071a-304c-4e28-985c-ed7deb593b11&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_DWFILEID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_fileId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_DWFILEID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_DWFILEVERSIONID" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_orchrunid&quot;:&quot;f9fcae73-5672-457a-8bca-4f6a4cc36159&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_DWFILEVERSIONID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_tipId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_DWFILEVERSIONID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_IMPORTMODEL-ACTION" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST/datasourcesvc/api/v1/orchrun?nsfilter_T001_DIGITALTWINIMPORTMODEL-ACTION" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;orchestratorId&quot;:&quot;${C_orchestratorId}&quot;,&quot;_actualparams&quot;:[{&quot;sequence_type_id&quot;:&quot;9a616686-571e-4167-8a70-d180dcd585a9&quot;,&#xd;
&quot;params&quot;:{&quot;_fileId&quot;:&quot;${C_DWFILEID}&quot;,&quot;_fileVersionId&quot;:&quot;${C_DWFILEVERSIONID}&quot;}}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/datasourcesvc/api/v1/orchrun?nsfilter=${CNAMESPACESID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Untill getting created status call &apos;N&apos; time . Looping statement</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_DWORCHRUNID" enabled="true">
                <stringProp name="TestPlan.comments">&quot;_orchrunid&quot;:&quot;f9fcae73-5672-457a-8bca-4f6a4cc36159&quot;</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">C_DWORCHRUNID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;_orchrunid&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND_C_DWORCHRUNID</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="T001_THINKTIME" enabled="true">
                <stringProp name="ConstantTimer.delay">${T001_THINKTIME}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T001_MODELOMPORT_IMPORTMODEL-GETACTION" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__jexl3(&quot;${response}&quot; != &quot;COMPLETED&quot; &amp;&amp; &quot;${response}&quot; != &quot;CANCELLED&quot; &amp;&amp; &quot;${response}&quot; != &quot;ERROR&quot;,)}</stringProp>
              <stringProp name="TestPlan.comments">COMPLETED</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET/datasourcesvc/api/v1/orchrun_T001_DIGITALTWINIMPORTMODEL-ACTION" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="nsfilter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">nsfilter</stringProp>
                      <stringProp name="Argument.value">${CNAMESPACESID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${QA3_URL_API}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/datasourcesvc/api/v1/orchrun/${C_DWORCHRUNID}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout">60000</stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_ACCESSTOKENID1}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="response" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;_orchrunid&quot;:&quot;f9fcae73-5672-457a-8bca-4f6a4cc36159&quot;</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">response</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;_status&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTFOUND_response</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="P_ORCHTHINKTIME" enabled="true">
                  <stringProp name="ConstantTimer.delay">${P_ORCHTHINKTIME}</stringProp>
                </ConstantTimer>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">FileWriter f = new FileWriter(&quot;InvicaraIPUT4UserRun002_0107.txt&quot;,true);
BufferedWriter out = new BufferedWriter(f);
out.write(&quot;${__timeShift(HH:mm:ss,,,,)}&quot;  + &quot;,&quot; + vars.get(&quot;response&quot;) + &quot;,&quot; + &quot;${__threadNum}&quot; +  &quot;\n&quot;);
out.close();
f.close();</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">4</intProp>
          </ResultAction>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>true</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>true</responseData>
                <samplerData>true</samplerData>
                <xml>true</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>true</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <fileName>true</fileName>
                <hostname>true</hostname>
                <threadCounts>true</threadCounts>
                <sampleCount>true</sampleCount>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="TestPlan.comments">C:\Users\VMPT_User\Documents\Invicara_Jmeter\QA2 Environment\Model Import\XML FILE\4Users-CaptialLand_T001_MODELIMPORT_13OCT_TR1.xml</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">C:\Users\VMPT_User\Documents\Invicara_Jmeter\QA3 ENVIRONMENT\MODEL IMPORT\1USER_CaptialLandProject_T001_MODELIMPORT_23JAN2023_Testrun1.jtl</stringProp>
            <stringProp name="TestPlan.comments">C:\Users\VMPT_User\Documents\Invicara_Jmeter\QA1 Environment\MODEL IMPORT\QA1  - VERSION 3.1\2USER_CaptialLandProject_T001_MODELIMPORT_24JAN2023_Testrun1.jtl</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\Users\VMPT_User\Documents\Invicara_Jmeter\QA1 Environment\ITEM SERVICE AND PASSPORT SERVICE\Get Named File Collection\05User_GetNamedFileCollection_21042023.jtl</stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\Users\VMPT_User\Documents\Invicara_Jmeter\KSA Environment SA QA1\4.0 Platform Version\4USER_Captiland_MODELIMPORT-24April2023_TR3.jtl</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <stringProp name="TestPlan.comments">C:\Users\VMPT_User\Documents\Invicara_Jmeter\QA2 Environment\Model Import\T001_MODELIMPORT_4Users-CAPTIALLAND_06OCT.csv</stringProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.BytesThroughputOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Bytes Throughput Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\Users\VMPT_User\Documents\Invicara_Jmeter\KSA Environment SA QA1\4.0 Platform Version\4USER_Captiland_MODELIMPORT-24April2023_TR3.jtl</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
